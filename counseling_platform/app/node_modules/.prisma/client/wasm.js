
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  role: 'role',
  state: 'state',
  phone: 'phone',
  specialization: 'specialization',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  approvalStatus: 'approvalStatus',
  approvedAt: 'approvedAt',
  approvedBy: 'approvedBy',
  experience: 'experience',
  motivation: 'motivation',
  rejectionReason: 'rejectionReason'
};

exports.Prisma.ChildScalarFieldEnum = {
  id: 'id',
  name: 'name',
  age: 'age',
  gender: 'gender',
  state: 'state',
  district: 'district',
  background: 'background',
  schoolLevel: 'schoolLevel',
  interests: 'interests',
  challenges: 'challenges',
  language: 'language',
  profileImage: 'profileImage',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssignmentScalarFieldEnum = {
  id: 'id',
  volunteerId: 'volunteerId',
  childId: 'childId',
  assignedAt: 'assignedAt',
  isActive: 'isActive',
  notes: 'notes'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  childId: 'childId',
  volunteerId: 'volunteerId',
  scheduledAt: 'scheduledAt',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  status: 'status',
  sessionType: 'sessionType',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionSummaryScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  summary: 'summary',
  sessionDuration: 'sessionDuration',
  sessionType: 'sessionType',
  initialMood: 'initialMood',
  finalMood: 'finalMood',
  moodChanges: 'moodChanges',
  concernsDiscussed: 'concernsDiscussed',
  topicsDiscussed: 'topicsDiscussed',
  culturalStoriesUsed: 'culturalStoriesUsed',
  techniquesUsed: 'techniquesUsed',
  techniqueEffectiveness: 'techniqueEffectiveness',
  storyResponse: 'storyResponse',
  breakthroughs: 'breakthroughs',
  keyInsights: 'keyInsights',
  challengesFaced: 'challengesFaced',
  challengeHandling: 'challengeHandling',
  engagementLevel: 'engagementLevel',
  participationNotes: 'participationNotes',
  progressMade: 'progressMade',
  nextSteps: 'nextSteps',
  actionItems: 'actionItems',
  recommendations: 'recommendations',
  sessionEffectiveness: 'sessionEffectiveness',
  volunteerConfidence: 'volunteerConfidence',
  nextSessionFocus: 'nextSessionFocus',
  nextSessionTiming: 'nextSessionTiming',
  additionalNotes: 'additionalNotes',
  resolutionStatus: 'resolutionStatus',
  followUpNeeded: 'followUpNeeded',
  followUpDate: 'followUpDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KnowledgeBaseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  summary: 'summary',
  category: 'category',
  subCategory: 'subCategory',
  fileType: 'fileType',
  fileUrl: 'fileUrl',
  isActive: 'isActive',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  downloadCount: 'downloadCount',
  embeddings: 'embeddings',
  fileSize: 'fileSize',
  isProcessed: 'isProcessed',
  views: 'views'
};

exports.Prisma.DocumentChunkScalarFieldEnum = {
  id: 'id',
  knowledgeBaseId: 'knowledgeBaseId',
  content: 'content',
  chunkIndex: 'chunkIndex',
  embeddings: 'embeddings',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.CulturalStoryScalarFieldEnum = {
  id: 'id',
  title: 'title',
  source: 'source',
  summary: 'summary',
  fullStory: 'fullStory',
  themes: 'themes',
  applicableFor: 'applicableFor',
  moralLessons: 'moralLessons',
  tags: 'tags',
  isActive: 'isActive',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConcernScalarFieldEnum = {
  id: 'id',
  childId: 'childId',
  title: 'title',
  description: 'description',
  category: 'category',
  severity: 'severity',
  status: 'status',
  identifiedAt: 'identifiedAt',
  resolvedAt: 'resolvedAt',
  resolution: 'resolution',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  message: 'message',
  response: 'response',
  context: 'context',
  isSystemMsg: 'isSystemMsg',
  createdAt: 'createdAt'
};

exports.Prisma.AiChatConversationScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  childId: 'childId',
  volunteerId: 'volunteerId',
  conversationName: 'conversationName',
  context: 'context',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AiChatMessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  role: 'role',
  content: 'content',
  ragContext: 'ragContext',
  timestamp: 'timestamp',
  metadata: 'metadata'
};

exports.Prisma.ConversationMemoryScalarFieldEnum = {
  id: 'id',
  childId: 'childId',
  volunteerId: 'volunteerId',
  sessionId: 'sessionId',
  memoryType: 'memoryType',
  content: 'content',
  importance: 'importance',
  associatedTags: 'associatedTags',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  description: 'description',
  color: 'color',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  VOLUNTEER: 'VOLUNTEER'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

exports.SessionStatus = exports.$Enums.SessionStatus = {
  PLANNED: 'PLANNED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.SessionType = exports.$Enums.SessionType = {
  COUNSELING: 'COUNSELING',
  CAREER_GUIDANCE: 'CAREER_GUIDANCE',
  PSYCHOLOGICAL_SUPPORT: 'PSYCHOLOGICAL_SUPPORT',
  FOLLOW_UP: 'FOLLOW_UP'
};

exports.ResolutionStatus = exports.$Enums.ResolutionStatus = {
  RESOLVED: 'RESOLVED',
  IN_PROGRESS: 'IN_PROGRESS',
  PENDING: 'PENDING',
  ESCALATED: 'ESCALATED'
};

exports.KnowledgeCategory = exports.$Enums.KnowledgeCategory = {
  CAREER_GUIDANCE: 'CAREER_GUIDANCE',
  PSYCHOLOGICAL_COUNSELING: 'PSYCHOLOGICAL_COUNSELING',
  CULTURAL_WISDOM: 'CULTURAL_WISDOM',
  EDUCATIONAL_RESOURCES: 'EDUCATIONAL_RESOURCES',
  LIFE_SKILLS: 'LIFE_SKILLS'
};

exports.StorySource = exports.$Enums.StorySource = {
  RAMAYANA: 'RAMAYANA',
  MAHABHARATA: 'MAHABHARATA',
  BHAGAVAD_GITA: 'BHAGAVAD_GITA',
  PANCHTANTRA: 'PANCHTANTRA',
  JATAKA_TALES: 'JATAKA_TALES',
  HITOPADESHA: 'HITOPADESHA',
  TENALI_RAMA: 'TENALI_RAMA',
  AKBAR_BIRBAL: 'AKBAR_BIRBAL',
  OTHER: 'OTHER'
};

exports.ConcernCategory = exports.$Enums.ConcernCategory = {
  ACADEMIC: 'ACADEMIC',
  FAMILY: 'FAMILY',
  EMOTIONAL: 'EMOTIONAL',
  BEHAVIORAL: 'BEHAVIORAL',
  CAREER: 'CAREER',
  SOCIAL: 'SOCIAL',
  HEALTH: 'HEALTH',
  FINANCIAL: 'FINANCIAL'
};

exports.Severity = exports.$Enums.Severity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.ConcernStatus = exports.$Enums.ConcernStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

exports.AiChatRole = exports.$Enums.AiChatRole = {
  USER: 'USER',
  ASSISTANT: 'ASSISTANT',
  SYSTEM: 'SYSTEM'
};

exports.MemoryType = exports.$Enums.MemoryType = {
  IMPORTANT_INSIGHT: 'IMPORTANT_INSIGHT',
  CHILD_PREFERENCE: 'CHILD_PREFERENCE',
  EFFECTIVE_TECHNIQUE: 'EFFECTIVE_TECHNIQUE',
  WARNING_SIGN: 'WARNING_SIGN',
  BREAKTHROUGH_MOMENT: 'BREAKTHROUGH_MOMENT',
  CULTURAL_REFERENCE: 'CULTURAL_REFERENCE',
  FAMILY_CONTEXT: 'FAMILY_CONTEXT',
  BEHAVIORAL_PATTERN: 'BEHAVIORAL_PATTERN'
};

exports.TagCategory = exports.$Enums.TagCategory = {
  SKILL: 'SKILL',
  INTEREST: 'INTEREST',
  ISSUE: 'ISSUE',
  DEMOGRAPHIC: 'DEMOGRAPHIC',
  EDUCATIONAL: 'EDUCATIONAL'
};

exports.Prisma.ModelName = {
  User: 'User',
  Child: 'Child',
  Assignment: 'Assignment',
  Session: 'Session',
  SessionSummary: 'SessionSummary',
  KnowledgeBase: 'KnowledgeBase',
  DocumentChunk: 'DocumentChunk',
  CulturalStory: 'CulturalStory',
  Concern: 'Concern',
  ChatMessage: 'ChatMessage',
  AiChatConversation: 'AiChatConversation',
  AiChatMessage: 'AiChatMessage',
  ConversationMemory: 'ConversationMemory',
  Tag: 'Tag'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
