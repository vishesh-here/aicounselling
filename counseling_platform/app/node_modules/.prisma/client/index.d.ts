
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Child
 * 
 */
export type Child = $Result.DefaultSelection<Prisma.$ChildPayload>
/**
 * Model Assignment
 * 
 */
export type Assignment = $Result.DefaultSelection<Prisma.$AssignmentPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model SessionSummary
 * 
 */
export type SessionSummary = $Result.DefaultSelection<Prisma.$SessionSummaryPayload>
/**
 * Model KnowledgeBase
 * 
 */
export type KnowledgeBase = $Result.DefaultSelection<Prisma.$KnowledgeBasePayload>
/**
 * Model DocumentChunk
 * 
 */
export type DocumentChunk = $Result.DefaultSelection<Prisma.$DocumentChunkPayload>
/**
 * Model CulturalStory
 * 
 */
export type CulturalStory = $Result.DefaultSelection<Prisma.$CulturalStoryPayload>
/**
 * Model Concern
 * 
 */
export type Concern = $Result.DefaultSelection<Prisma.$ConcernPayload>
/**
 * Model ChatMessage
 * 
 */
export type ChatMessage = $Result.DefaultSelection<Prisma.$ChatMessagePayload>
/**
 * Model AiChatConversation
 * 
 */
export type AiChatConversation = $Result.DefaultSelection<Prisma.$AiChatConversationPayload>
/**
 * Model AiChatMessage
 * 
 */
export type AiChatMessage = $Result.DefaultSelection<Prisma.$AiChatMessagePayload>
/**
 * Model ConversationMemory
 * 
 */
export type ConversationMemory = $Result.DefaultSelection<Prisma.$ConversationMemoryPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  VOLUNTEER: 'VOLUNTEER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const ApprovalStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

export type ApprovalStatus = (typeof ApprovalStatus)[keyof typeof ApprovalStatus]


export const Gender: {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const SessionStatus: {
  PLANNED: 'PLANNED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type SessionStatus = (typeof SessionStatus)[keyof typeof SessionStatus]


export const SessionType: {
  COUNSELING: 'COUNSELING',
  CAREER_GUIDANCE: 'CAREER_GUIDANCE',
  PSYCHOLOGICAL_SUPPORT: 'PSYCHOLOGICAL_SUPPORT',
  FOLLOW_UP: 'FOLLOW_UP'
};

export type SessionType = (typeof SessionType)[keyof typeof SessionType]


export const ResolutionStatus: {
  RESOLVED: 'RESOLVED',
  IN_PROGRESS: 'IN_PROGRESS',
  PENDING: 'PENDING',
  ESCALATED: 'ESCALATED'
};

export type ResolutionStatus = (typeof ResolutionStatus)[keyof typeof ResolutionStatus]


export const KnowledgeCategory: {
  CAREER_GUIDANCE: 'CAREER_GUIDANCE',
  PSYCHOLOGICAL_COUNSELING: 'PSYCHOLOGICAL_COUNSELING',
  CULTURAL_WISDOM: 'CULTURAL_WISDOM',
  EDUCATIONAL_RESOURCES: 'EDUCATIONAL_RESOURCES',
  LIFE_SKILLS: 'LIFE_SKILLS'
};

export type KnowledgeCategory = (typeof KnowledgeCategory)[keyof typeof KnowledgeCategory]


export const StorySource: {
  RAMAYANA: 'RAMAYANA',
  MAHABHARATA: 'MAHABHARATA',
  BHAGAVAD_GITA: 'BHAGAVAD_GITA',
  PANCHTANTRA: 'PANCHTANTRA',
  JATAKA_TALES: 'JATAKA_TALES',
  HITOPADESHA: 'HITOPADESHA',
  TENALI_RAMA: 'TENALI_RAMA',
  AKBAR_BIRBAL: 'AKBAR_BIRBAL',
  OTHER: 'OTHER'
};

export type StorySource = (typeof StorySource)[keyof typeof StorySource]


export const ConcernCategory: {
  ACADEMIC: 'ACADEMIC',
  FAMILY: 'FAMILY',
  EMOTIONAL: 'EMOTIONAL',
  BEHAVIORAL: 'BEHAVIORAL',
  CAREER: 'CAREER',
  SOCIAL: 'SOCIAL',
  HEALTH: 'HEALTH',
  FINANCIAL: 'FINANCIAL'
};

export type ConcernCategory = (typeof ConcernCategory)[keyof typeof ConcernCategory]


export const Severity: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

export type Severity = (typeof Severity)[keyof typeof Severity]


export const ConcernStatus: {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

export type ConcernStatus = (typeof ConcernStatus)[keyof typeof ConcernStatus]


export const TagCategory: {
  SKILL: 'SKILL',
  INTEREST: 'INTEREST',
  ISSUE: 'ISSUE',
  DEMOGRAPHIC: 'DEMOGRAPHIC',
  EDUCATIONAL: 'EDUCATIONAL'
};

export type TagCategory = (typeof TagCategory)[keyof typeof TagCategory]


export const AiChatRole: {
  USER: 'USER',
  ASSISTANT: 'ASSISTANT',
  SYSTEM: 'SYSTEM'
};

export type AiChatRole = (typeof AiChatRole)[keyof typeof AiChatRole]


export const MemoryType: {
  IMPORTANT_INSIGHT: 'IMPORTANT_INSIGHT',
  CHILD_PREFERENCE: 'CHILD_PREFERENCE',
  EFFECTIVE_TECHNIQUE: 'EFFECTIVE_TECHNIQUE',
  WARNING_SIGN: 'WARNING_SIGN',
  BREAKTHROUGH_MOMENT: 'BREAKTHROUGH_MOMENT',
  CULTURAL_REFERENCE: 'CULTURAL_REFERENCE',
  FAMILY_CONTEXT: 'FAMILY_CONTEXT',
  BEHAVIORAL_PATTERN: 'BEHAVIORAL_PATTERN'
};

export type MemoryType = (typeof MemoryType)[keyof typeof MemoryType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type ApprovalStatus = $Enums.ApprovalStatus

export const ApprovalStatus: typeof $Enums.ApprovalStatus

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type SessionStatus = $Enums.SessionStatus

export const SessionStatus: typeof $Enums.SessionStatus

export type SessionType = $Enums.SessionType

export const SessionType: typeof $Enums.SessionType

export type ResolutionStatus = $Enums.ResolutionStatus

export const ResolutionStatus: typeof $Enums.ResolutionStatus

export type KnowledgeCategory = $Enums.KnowledgeCategory

export const KnowledgeCategory: typeof $Enums.KnowledgeCategory

export type StorySource = $Enums.StorySource

export const StorySource: typeof $Enums.StorySource

export type ConcernCategory = $Enums.ConcernCategory

export const ConcernCategory: typeof $Enums.ConcernCategory

export type Severity = $Enums.Severity

export const Severity: typeof $Enums.Severity

export type ConcernStatus = $Enums.ConcernStatus

export const ConcernStatus: typeof $Enums.ConcernStatus

export type TagCategory = $Enums.TagCategory

export const TagCategory: typeof $Enums.TagCategory

export type AiChatRole = $Enums.AiChatRole

export const AiChatRole: typeof $Enums.AiChatRole

export type MemoryType = $Enums.MemoryType

export const MemoryType: typeof $Enums.MemoryType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.child`: Exposes CRUD operations for the **Child** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Children
    * const children = await prisma.child.findMany()
    * ```
    */
  get child(): Prisma.ChildDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assignment`: Exposes CRUD operations for the **Assignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assignments
    * const assignments = await prisma.assignment.findMany()
    * ```
    */
  get assignment(): Prisma.AssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sessionSummary`: Exposes CRUD operations for the **SessionSummary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionSummaries
    * const sessionSummaries = await prisma.sessionSummary.findMany()
    * ```
    */
  get sessionSummary(): Prisma.SessionSummaryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.knowledgeBase`: Exposes CRUD operations for the **KnowledgeBase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KnowledgeBases
    * const knowledgeBases = await prisma.knowledgeBase.findMany()
    * ```
    */
  get knowledgeBase(): Prisma.KnowledgeBaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documentChunk`: Exposes CRUD operations for the **DocumentChunk** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentChunks
    * const documentChunks = await prisma.documentChunk.findMany()
    * ```
    */
  get documentChunk(): Prisma.DocumentChunkDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.culturalStory`: Exposes CRUD operations for the **CulturalStory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CulturalStories
    * const culturalStories = await prisma.culturalStory.findMany()
    * ```
    */
  get culturalStory(): Prisma.CulturalStoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.concern`: Exposes CRUD operations for the **Concern** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Concerns
    * const concerns = await prisma.concern.findMany()
    * ```
    */
  get concern(): Prisma.ConcernDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatMessage`: Exposes CRUD operations for the **ChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatMessages
    * const chatMessages = await prisma.chatMessage.findMany()
    * ```
    */
  get chatMessage(): Prisma.ChatMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aiChatConversation`: Exposes CRUD operations for the **AiChatConversation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AiChatConversations
    * const aiChatConversations = await prisma.aiChatConversation.findMany()
    * ```
    */
  get aiChatConversation(): Prisma.AiChatConversationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aiChatMessage`: Exposes CRUD operations for the **AiChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AiChatMessages
    * const aiChatMessages = await prisma.aiChatMessage.findMany()
    * ```
    */
  get aiChatMessage(): Prisma.AiChatMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.conversationMemory`: Exposes CRUD operations for the **ConversationMemory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConversationMemories
    * const conversationMemories = await prisma.conversationMemory.findMany()
    * ```
    */
  get conversationMemory(): Prisma.ConversationMemoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Child: 'Child',
    Assignment: 'Assignment',
    Session: 'Session',
    SessionSummary: 'SessionSummary',
    KnowledgeBase: 'KnowledgeBase',
    DocumentChunk: 'DocumentChunk',
    CulturalStory: 'CulturalStory',
    Concern: 'Concern',
    ChatMessage: 'ChatMessage',
    AiChatConversation: 'AiChatConversation',
    AiChatMessage: 'AiChatMessage',
    ConversationMemory: 'ConversationMemory',
    Tag: 'Tag'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "child" | "assignment" | "session" | "sessionSummary" | "knowledgeBase" | "documentChunk" | "culturalStory" | "concern" | "chatMessage" | "aiChatConversation" | "aiChatMessage" | "conversationMemory" | "tag"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Child: {
        payload: Prisma.$ChildPayload<ExtArgs>
        fields: Prisma.ChildFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChildFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChildFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          findFirst: {
            args: Prisma.ChildFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChildFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          findMany: {
            args: Prisma.ChildFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>[]
          }
          create: {
            args: Prisma.ChildCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          createMany: {
            args: Prisma.ChildCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChildCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>[]
          }
          delete: {
            args: Prisma.ChildDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          update: {
            args: Prisma.ChildUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          deleteMany: {
            args: Prisma.ChildDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChildUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChildUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>[]
          }
          upsert: {
            args: Prisma.ChildUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          aggregate: {
            args: Prisma.ChildAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChild>
          }
          groupBy: {
            args: Prisma.ChildGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChildGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChildCountArgs<ExtArgs>
            result: $Utils.Optional<ChildCountAggregateOutputType> | number
          }
        }
      }
      Assignment: {
        payload: Prisma.$AssignmentPayload<ExtArgs>
        fields: Prisma.AssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          findFirst: {
            args: Prisma.AssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          findMany: {
            args: Prisma.AssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          create: {
            args: Prisma.AssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          createMany: {
            args: Prisma.AssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          delete: {
            args: Prisma.AssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          update: {
            args: Prisma.AssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          deleteMany: {
            args: Prisma.AssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          upsert: {
            args: Prisma.AssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          aggregate: {
            args: Prisma.AssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssignment>
          }
          groupBy: {
            args: Prisma.AssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<AssignmentCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      SessionSummary: {
        payload: Prisma.$SessionSummaryPayload<ExtArgs>
        fields: Prisma.SessionSummaryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionSummaryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSummaryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionSummaryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSummaryPayload>
          }
          findFirst: {
            args: Prisma.SessionSummaryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSummaryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionSummaryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSummaryPayload>
          }
          findMany: {
            args: Prisma.SessionSummaryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSummaryPayload>[]
          }
          create: {
            args: Prisma.SessionSummaryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSummaryPayload>
          }
          createMany: {
            args: Prisma.SessionSummaryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionSummaryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSummaryPayload>[]
          }
          delete: {
            args: Prisma.SessionSummaryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSummaryPayload>
          }
          update: {
            args: Prisma.SessionSummaryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSummaryPayload>
          }
          deleteMany: {
            args: Prisma.SessionSummaryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionSummaryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionSummaryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSummaryPayload>[]
          }
          upsert: {
            args: Prisma.SessionSummaryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSummaryPayload>
          }
          aggregate: {
            args: Prisma.SessionSummaryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSessionSummary>
          }
          groupBy: {
            args: Prisma.SessionSummaryGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionSummaryGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionSummaryCountArgs<ExtArgs>
            result: $Utils.Optional<SessionSummaryCountAggregateOutputType> | number
          }
        }
      }
      KnowledgeBase: {
        payload: Prisma.$KnowledgeBasePayload<ExtArgs>
        fields: Prisma.KnowledgeBaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KnowledgeBaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KnowledgeBaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>
          }
          findFirst: {
            args: Prisma.KnowledgeBaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KnowledgeBaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>
          }
          findMany: {
            args: Prisma.KnowledgeBaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>[]
          }
          create: {
            args: Prisma.KnowledgeBaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>
          }
          createMany: {
            args: Prisma.KnowledgeBaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KnowledgeBaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>[]
          }
          delete: {
            args: Prisma.KnowledgeBaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>
          }
          update: {
            args: Prisma.KnowledgeBaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>
          }
          deleteMany: {
            args: Prisma.KnowledgeBaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KnowledgeBaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KnowledgeBaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>[]
          }
          upsert: {
            args: Prisma.KnowledgeBaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>
          }
          aggregate: {
            args: Prisma.KnowledgeBaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKnowledgeBase>
          }
          groupBy: {
            args: Prisma.KnowledgeBaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<KnowledgeBaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.KnowledgeBaseCountArgs<ExtArgs>
            result: $Utils.Optional<KnowledgeBaseCountAggregateOutputType> | number
          }
        }
      }
      DocumentChunk: {
        payload: Prisma.$DocumentChunkPayload<ExtArgs>
        fields: Prisma.DocumentChunkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentChunkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentChunkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentChunkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentChunkPayload>
          }
          findFirst: {
            args: Prisma.DocumentChunkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentChunkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentChunkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentChunkPayload>
          }
          findMany: {
            args: Prisma.DocumentChunkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentChunkPayload>[]
          }
          create: {
            args: Prisma.DocumentChunkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentChunkPayload>
          }
          createMany: {
            args: Prisma.DocumentChunkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentChunkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentChunkPayload>[]
          }
          delete: {
            args: Prisma.DocumentChunkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentChunkPayload>
          }
          update: {
            args: Prisma.DocumentChunkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentChunkPayload>
          }
          deleteMany: {
            args: Prisma.DocumentChunkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentChunkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentChunkUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentChunkPayload>[]
          }
          upsert: {
            args: Prisma.DocumentChunkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentChunkPayload>
          }
          aggregate: {
            args: Prisma.DocumentChunkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentChunk>
          }
          groupBy: {
            args: Prisma.DocumentChunkGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentChunkGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentChunkCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentChunkCountAggregateOutputType> | number
          }
        }
      }
      CulturalStory: {
        payload: Prisma.$CulturalStoryPayload<ExtArgs>
        fields: Prisma.CulturalStoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CulturalStoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalStoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CulturalStoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalStoryPayload>
          }
          findFirst: {
            args: Prisma.CulturalStoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalStoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CulturalStoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalStoryPayload>
          }
          findMany: {
            args: Prisma.CulturalStoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalStoryPayload>[]
          }
          create: {
            args: Prisma.CulturalStoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalStoryPayload>
          }
          createMany: {
            args: Prisma.CulturalStoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CulturalStoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalStoryPayload>[]
          }
          delete: {
            args: Prisma.CulturalStoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalStoryPayload>
          }
          update: {
            args: Prisma.CulturalStoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalStoryPayload>
          }
          deleteMany: {
            args: Prisma.CulturalStoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CulturalStoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CulturalStoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalStoryPayload>[]
          }
          upsert: {
            args: Prisma.CulturalStoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalStoryPayload>
          }
          aggregate: {
            args: Prisma.CulturalStoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCulturalStory>
          }
          groupBy: {
            args: Prisma.CulturalStoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CulturalStoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CulturalStoryCountArgs<ExtArgs>
            result: $Utils.Optional<CulturalStoryCountAggregateOutputType> | number
          }
        }
      }
      Concern: {
        payload: Prisma.$ConcernPayload<ExtArgs>
        fields: Prisma.ConcernFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConcernFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcernPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConcernFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcernPayload>
          }
          findFirst: {
            args: Prisma.ConcernFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcernPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConcernFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcernPayload>
          }
          findMany: {
            args: Prisma.ConcernFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcernPayload>[]
          }
          create: {
            args: Prisma.ConcernCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcernPayload>
          }
          createMany: {
            args: Prisma.ConcernCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConcernCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcernPayload>[]
          }
          delete: {
            args: Prisma.ConcernDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcernPayload>
          }
          update: {
            args: Prisma.ConcernUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcernPayload>
          }
          deleteMany: {
            args: Prisma.ConcernDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConcernUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConcernUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcernPayload>[]
          }
          upsert: {
            args: Prisma.ConcernUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcernPayload>
          }
          aggregate: {
            args: Prisma.ConcernAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConcern>
          }
          groupBy: {
            args: Prisma.ConcernGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConcernGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConcernCountArgs<ExtArgs>
            result: $Utils.Optional<ConcernCountAggregateOutputType> | number
          }
        }
      }
      ChatMessage: {
        payload: Prisma.$ChatMessagePayload<ExtArgs>
        fields: Prisma.ChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findFirst: {
            args: Prisma.ChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findMany: {
            args: Prisma.ChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          create: {
            args: Prisma.ChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          createMany: {
            args: Prisma.ChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          delete: {
            args: Prisma.ChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          update: {
            args: Prisma.ChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.ChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          upsert: {
            args: Prisma.ChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          aggregate: {
            args: Prisma.ChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatMessage>
          }
          groupBy: {
            args: Prisma.ChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageCountAggregateOutputType> | number
          }
        }
      }
      AiChatConversation: {
        payload: Prisma.$AiChatConversationPayload<ExtArgs>
        fields: Prisma.AiChatConversationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AiChatConversationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatConversationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AiChatConversationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatConversationPayload>
          }
          findFirst: {
            args: Prisma.AiChatConversationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatConversationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AiChatConversationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatConversationPayload>
          }
          findMany: {
            args: Prisma.AiChatConversationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatConversationPayload>[]
          }
          create: {
            args: Prisma.AiChatConversationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatConversationPayload>
          }
          createMany: {
            args: Prisma.AiChatConversationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AiChatConversationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatConversationPayload>[]
          }
          delete: {
            args: Prisma.AiChatConversationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatConversationPayload>
          }
          update: {
            args: Prisma.AiChatConversationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatConversationPayload>
          }
          deleteMany: {
            args: Prisma.AiChatConversationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AiChatConversationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AiChatConversationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatConversationPayload>[]
          }
          upsert: {
            args: Prisma.AiChatConversationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatConversationPayload>
          }
          aggregate: {
            args: Prisma.AiChatConversationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAiChatConversation>
          }
          groupBy: {
            args: Prisma.AiChatConversationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AiChatConversationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AiChatConversationCountArgs<ExtArgs>
            result: $Utils.Optional<AiChatConversationCountAggregateOutputType> | number
          }
        }
      }
      AiChatMessage: {
        payload: Prisma.$AiChatMessagePayload<ExtArgs>
        fields: Prisma.AiChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AiChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AiChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>
          }
          findFirst: {
            args: Prisma.AiChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AiChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>
          }
          findMany: {
            args: Prisma.AiChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>[]
          }
          create: {
            args: Prisma.AiChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>
          }
          createMany: {
            args: Prisma.AiChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AiChatMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>[]
          }
          delete: {
            args: Prisma.AiChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>
          }
          update: {
            args: Prisma.AiChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.AiChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AiChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AiChatMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>[]
          }
          upsert: {
            args: Prisma.AiChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>
          }
          aggregate: {
            args: Prisma.AiChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAiChatMessage>
          }
          groupBy: {
            args: Prisma.AiChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<AiChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.AiChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<AiChatMessageCountAggregateOutputType> | number
          }
        }
      }
      ConversationMemory: {
        payload: Prisma.$ConversationMemoryPayload<ExtArgs>
        fields: Prisma.ConversationMemoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConversationMemoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConversationMemoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemoryPayload>
          }
          findFirst: {
            args: Prisma.ConversationMemoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConversationMemoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemoryPayload>
          }
          findMany: {
            args: Prisma.ConversationMemoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemoryPayload>[]
          }
          create: {
            args: Prisma.ConversationMemoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemoryPayload>
          }
          createMany: {
            args: Prisma.ConversationMemoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConversationMemoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemoryPayload>[]
          }
          delete: {
            args: Prisma.ConversationMemoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemoryPayload>
          }
          update: {
            args: Prisma.ConversationMemoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemoryPayload>
          }
          deleteMany: {
            args: Prisma.ConversationMemoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConversationMemoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConversationMemoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemoryPayload>[]
          }
          upsert: {
            args: Prisma.ConversationMemoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemoryPayload>
          }
          aggregate: {
            args: Prisma.ConversationMemoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConversationMemory>
          }
          groupBy: {
            args: Prisma.ConversationMemoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConversationMemoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConversationMemoryCountArgs<ExtArgs>
            result: $Utils.Optional<ConversationMemoryCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    child?: ChildOmit
    assignment?: AssignmentOmit
    session?: SessionOmit
    sessionSummary?: SessionSummaryOmit
    knowledgeBase?: KnowledgeBaseOmit
    documentChunk?: DocumentChunkOmit
    culturalStory?: CulturalStoryOmit
    concern?: ConcernOmit
    chatMessage?: ChatMessageOmit
    aiChatConversation?: AiChatConversationOmit
    aiChatMessage?: AiChatMessageOmit
    conversationMemory?: ConversationMemoryOmit
    tag?: TagOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    assignments: number
    chatMessages: number
    culturalStories: number
    knowledgeBase: number
    sessions: number
    aiChatConversations: number
    conversationMemories: number
    approvedUsers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | UserCountOutputTypeCountAssignmentsArgs
    chatMessages?: boolean | UserCountOutputTypeCountChatMessagesArgs
    culturalStories?: boolean | UserCountOutputTypeCountCulturalStoriesArgs
    knowledgeBase?: boolean | UserCountOutputTypeCountKnowledgeBaseArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    aiChatConversations?: boolean | UserCountOutputTypeCountAiChatConversationsArgs
    conversationMemories?: boolean | UserCountOutputTypeCountConversationMemoriesArgs
    approvedUsers?: boolean | UserCountOutputTypeCountApprovedUsersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCulturalStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CulturalStoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountKnowledgeBaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KnowledgeBaseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAiChatConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AiChatConversationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConversationMemoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationMemoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApprovedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type ChildCountOutputType
   */

  export type ChildCountOutputType = {
    assignments: number
    concerns: number
    sessions: number
    aiChatConversations: number
    conversationMemories: number
    tags: number
  }

  export type ChildCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | ChildCountOutputTypeCountAssignmentsArgs
    concerns?: boolean | ChildCountOutputTypeCountConcernsArgs
    sessions?: boolean | ChildCountOutputTypeCountSessionsArgs
    aiChatConversations?: boolean | ChildCountOutputTypeCountAiChatConversationsArgs
    conversationMemories?: boolean | ChildCountOutputTypeCountConversationMemoriesArgs
    tags?: boolean | ChildCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes
  /**
   * ChildCountOutputType without action
   */
  export type ChildCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildCountOutputType
     */
    select?: ChildCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChildCountOutputType without action
   */
  export type ChildCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }

  /**
   * ChildCountOutputType without action
   */
  export type ChildCountOutputTypeCountConcernsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConcernWhereInput
  }

  /**
   * ChildCountOutputType without action
   */
  export type ChildCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * ChildCountOutputType without action
   */
  export type ChildCountOutputTypeCountAiChatConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AiChatConversationWhereInput
  }

  /**
   * ChildCountOutputType without action
   */
  export type ChildCountOutputTypeCountConversationMemoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationMemoryWhereInput
  }

  /**
   * ChildCountOutputType without action
   */
  export type ChildCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
  }


  /**
   * Count Type SessionCountOutputType
   */

  export type SessionCountOutputType = {
    chatMessages: number
    aiChatConversations: number
    conversationMemories: number
  }

  export type SessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatMessages?: boolean | SessionCountOutputTypeCountChatMessagesArgs
    aiChatConversations?: boolean | SessionCountOutputTypeCountAiChatConversationsArgs
    conversationMemories?: boolean | SessionCountOutputTypeCountConversationMemoriesArgs
  }

  // Custom InputTypes
  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCountOutputType
     */
    select?: SessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeCountChatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeCountAiChatConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AiChatConversationWhereInput
  }

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeCountConversationMemoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationMemoryWhereInput
  }


  /**
   * Count Type KnowledgeBaseCountOutputType
   */

  export type KnowledgeBaseCountOutputType = {
    chunks: number
    tags: number
  }

  export type KnowledgeBaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chunks?: boolean | KnowledgeBaseCountOutputTypeCountChunksArgs
    tags?: boolean | KnowledgeBaseCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes
  /**
   * KnowledgeBaseCountOutputType without action
   */
  export type KnowledgeBaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBaseCountOutputType
     */
    select?: KnowledgeBaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * KnowledgeBaseCountOutputType without action
   */
  export type KnowledgeBaseCountOutputTypeCountChunksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentChunkWhereInput
  }

  /**
   * KnowledgeBaseCountOutputType without action
   */
  export type KnowledgeBaseCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
  }


  /**
   * Count Type AiChatConversationCountOutputType
   */

  export type AiChatConversationCountOutputType = {
    messages: number
  }

  export type AiChatConversationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | AiChatConversationCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * AiChatConversationCountOutputType without action
   */
  export type AiChatConversationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatConversationCountOutputType
     */
    select?: AiChatConversationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AiChatConversationCountOutputType without action
   */
  export type AiChatConversationCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AiChatMessageWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    children: number
    knowledgeBase: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | TagCountOutputTypeCountChildrenArgs
    knowledgeBase?: boolean | TagCountOutputTypeCountKnowledgeBaseArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChildWhereInput
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountKnowledgeBaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KnowledgeBaseWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.UserRole | null
    state: string | null
    phone: string | null
    specialization: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    approvalStatus: $Enums.ApprovalStatus | null
    approvedAt: Date | null
    approvedBy: string | null
    experience: string | null
    motivation: string | null
    rejectionReason: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.UserRole | null
    state: string | null
    phone: string | null
    specialization: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    approvalStatus: $Enums.ApprovalStatus | null
    approvedAt: Date | null
    approvedBy: string | null
    experience: string | null
    motivation: string | null
    rejectionReason: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    role: number
    state: number
    phone: number
    specialization: number
    isActive: number
    createdAt: number
    updatedAt: number
    approvalStatus: number
    approvedAt: number
    approvedBy: number
    experience: number
    motivation: number
    rejectionReason: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    state?: true
    phone?: true
    specialization?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    approvalStatus?: true
    approvedAt?: true
    approvedBy?: true
    experience?: true
    motivation?: true
    rejectionReason?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    state?: true
    phone?: true
    specialization?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    approvalStatus?: true
    approvedAt?: true
    approvedBy?: true
    experience?: true
    motivation?: true
    rejectionReason?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    state?: true
    phone?: true
    specialization?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    approvalStatus?: true
    approvedAt?: true
    approvedBy?: true
    experience?: true
    motivation?: true
    rejectionReason?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    password: string
    role: $Enums.UserRole
    state: string | null
    phone: string | null
    specialization: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    approvalStatus: $Enums.ApprovalStatus
    approvedAt: Date | null
    approvedBy: string | null
    experience: string | null
    motivation: string | null
    rejectionReason: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    state?: boolean
    phone?: boolean
    specialization?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    approvalStatus?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    experience?: boolean
    motivation?: boolean
    rejectionReason?: boolean
    assignments?: boolean | User$assignmentsArgs<ExtArgs>
    chatMessages?: boolean | User$chatMessagesArgs<ExtArgs>
    culturalStories?: boolean | User$culturalStoriesArgs<ExtArgs>
    knowledgeBase?: boolean | User$knowledgeBaseArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    aiChatConversations?: boolean | User$aiChatConversationsArgs<ExtArgs>
    conversationMemories?: boolean | User$conversationMemoriesArgs<ExtArgs>
    approver?: boolean | User$approverArgs<ExtArgs>
    approvedUsers?: boolean | User$approvedUsersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    state?: boolean
    phone?: boolean
    specialization?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    approvalStatus?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    experience?: boolean
    motivation?: boolean
    rejectionReason?: boolean
    approver?: boolean | User$approverArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    state?: boolean
    phone?: boolean
    specialization?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    approvalStatus?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    experience?: boolean
    motivation?: boolean
    rejectionReason?: boolean
    approver?: boolean | User$approverArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    state?: boolean
    phone?: boolean
    specialization?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    approvalStatus?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    experience?: boolean
    motivation?: boolean
    rejectionReason?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "role" | "state" | "phone" | "specialization" | "isActive" | "createdAt" | "updatedAt" | "approvalStatus" | "approvedAt" | "approvedBy" | "experience" | "motivation" | "rejectionReason", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | User$assignmentsArgs<ExtArgs>
    chatMessages?: boolean | User$chatMessagesArgs<ExtArgs>
    culturalStories?: boolean | User$culturalStoriesArgs<ExtArgs>
    knowledgeBase?: boolean | User$knowledgeBaseArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    aiChatConversations?: boolean | User$aiChatConversationsArgs<ExtArgs>
    conversationMemories?: boolean | User$conversationMemoriesArgs<ExtArgs>
    approver?: boolean | User$approverArgs<ExtArgs>
    approvedUsers?: boolean | User$approvedUsersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    approver?: boolean | User$approverArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    approver?: boolean | User$approverArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      assignments: Prisma.$AssignmentPayload<ExtArgs>[]
      chatMessages: Prisma.$ChatMessagePayload<ExtArgs>[]
      culturalStories: Prisma.$CulturalStoryPayload<ExtArgs>[]
      knowledgeBase: Prisma.$KnowledgeBasePayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      aiChatConversations: Prisma.$AiChatConversationPayload<ExtArgs>[]
      conversationMemories: Prisma.$ConversationMemoryPayload<ExtArgs>[]
      approver: Prisma.$UserPayload<ExtArgs> | null
      approvedUsers: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      password: string
      role: $Enums.UserRole
      state: string | null
      phone: string | null
      specialization: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      approvalStatus: $Enums.ApprovalStatus
      approvedAt: Date | null
      approvedBy: string | null
      experience: string | null
      motivation: string | null
      rejectionReason: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignments<T extends User$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chatMessages<T extends User$chatMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$chatMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    culturalStories<T extends User$culturalStoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$culturalStoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CulturalStoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    knowledgeBase<T extends User$knowledgeBaseArgs<ExtArgs> = {}>(args?: Subset<T, User$knowledgeBaseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    aiChatConversations<T extends User$aiChatConversationsArgs<ExtArgs> = {}>(args?: Subset<T, User$aiChatConversationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatConversationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    conversationMemories<T extends User$conversationMemoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$conversationMemoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationMemoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    approver<T extends User$approverArgs<ExtArgs> = {}>(args?: Subset<T, User$approverArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    approvedUsers<T extends User$approvedUsersArgs<ExtArgs> = {}>(args?: Subset<T, User$approvedUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly state: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly specialization: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly approvalStatus: FieldRef<"User", 'ApprovalStatus'>
    readonly approvedAt: FieldRef<"User", 'DateTime'>
    readonly approvedBy: FieldRef<"User", 'String'>
    readonly experience: FieldRef<"User", 'String'>
    readonly motivation: FieldRef<"User", 'String'>
    readonly rejectionReason: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.assignments
   */
  export type User$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * User.chatMessages
   */
  export type User$chatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * User.culturalStories
   */
  export type User$culturalStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalStory
     */
    select?: CulturalStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalStory
     */
    omit?: CulturalStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalStoryInclude<ExtArgs> | null
    where?: CulturalStoryWhereInput
    orderBy?: CulturalStoryOrderByWithRelationInput | CulturalStoryOrderByWithRelationInput[]
    cursor?: CulturalStoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CulturalStoryScalarFieldEnum | CulturalStoryScalarFieldEnum[]
  }

  /**
   * User.knowledgeBase
   */
  export type User$knowledgeBaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeBaseInclude<ExtArgs> | null
    where?: KnowledgeBaseWhereInput
    orderBy?: KnowledgeBaseOrderByWithRelationInput | KnowledgeBaseOrderByWithRelationInput[]
    cursor?: KnowledgeBaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KnowledgeBaseScalarFieldEnum | KnowledgeBaseScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.aiChatConversations
   */
  export type User$aiChatConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatConversation
     */
    select?: AiChatConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatConversation
     */
    omit?: AiChatConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatConversationInclude<ExtArgs> | null
    where?: AiChatConversationWhereInput
    orderBy?: AiChatConversationOrderByWithRelationInput | AiChatConversationOrderByWithRelationInput[]
    cursor?: AiChatConversationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AiChatConversationScalarFieldEnum | AiChatConversationScalarFieldEnum[]
  }

  /**
   * User.conversationMemories
   */
  export type User$conversationMemoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMemory
     */
    select?: ConversationMemorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConversationMemory
     */
    omit?: ConversationMemoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemoryInclude<ExtArgs> | null
    where?: ConversationMemoryWhereInput
    orderBy?: ConversationMemoryOrderByWithRelationInput | ConversationMemoryOrderByWithRelationInput[]
    cursor?: ConversationMemoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationMemoryScalarFieldEnum | ConversationMemoryScalarFieldEnum[]
  }

  /**
   * User.approver
   */
  export type User$approverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User.approvedUsers
   */
  export type User$approvedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Child
   */

  export type AggregateChild = {
    _count: ChildCountAggregateOutputType | null
    _avg: ChildAvgAggregateOutputType | null
    _sum: ChildSumAggregateOutputType | null
    _min: ChildMinAggregateOutputType | null
    _max: ChildMaxAggregateOutputType | null
  }

  export type ChildAvgAggregateOutputType = {
    age: number | null
  }

  export type ChildSumAggregateOutputType = {
    age: number | null
  }

  export type ChildMinAggregateOutputType = {
    id: string | null
    name: string | null
    age: number | null
    gender: $Enums.Gender | null
    state: string | null
    district: string | null
    background: string | null
    schoolLevel: string | null
    language: string | null
    profileImage: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChildMaxAggregateOutputType = {
    id: string | null
    name: string | null
    age: number | null
    gender: $Enums.Gender | null
    state: string | null
    district: string | null
    background: string | null
    schoolLevel: string | null
    language: string | null
    profileImage: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChildCountAggregateOutputType = {
    id: number
    name: number
    age: number
    gender: number
    state: number
    district: number
    background: number
    schoolLevel: number
    interests: number
    challenges: number
    language: number
    profileImage: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChildAvgAggregateInputType = {
    age?: true
  }

  export type ChildSumAggregateInputType = {
    age?: true
  }

  export type ChildMinAggregateInputType = {
    id?: true
    name?: true
    age?: true
    gender?: true
    state?: true
    district?: true
    background?: true
    schoolLevel?: true
    language?: true
    profileImage?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChildMaxAggregateInputType = {
    id?: true
    name?: true
    age?: true
    gender?: true
    state?: true
    district?: true
    background?: true
    schoolLevel?: true
    language?: true
    profileImage?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChildCountAggregateInputType = {
    id?: true
    name?: true
    age?: true
    gender?: true
    state?: true
    district?: true
    background?: true
    schoolLevel?: true
    interests?: true
    challenges?: true
    language?: true
    profileImage?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChildAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Child to aggregate.
     */
    where?: ChildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Children to fetch.
     */
    orderBy?: ChildOrderByWithRelationInput | ChildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Children from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Children.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Children
    **/
    _count?: true | ChildCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChildAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChildSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChildMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChildMaxAggregateInputType
  }

  export type GetChildAggregateType<T extends ChildAggregateArgs> = {
        [P in keyof T & keyof AggregateChild]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChild[P]>
      : GetScalarType<T[P], AggregateChild[P]>
  }




  export type ChildGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChildWhereInput
    orderBy?: ChildOrderByWithAggregationInput | ChildOrderByWithAggregationInput[]
    by: ChildScalarFieldEnum[] | ChildScalarFieldEnum
    having?: ChildScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChildCountAggregateInputType | true
    _avg?: ChildAvgAggregateInputType
    _sum?: ChildSumAggregateInputType
    _min?: ChildMinAggregateInputType
    _max?: ChildMaxAggregateInputType
  }

  export type ChildGroupByOutputType = {
    id: string
    name: string
    age: number
    gender: $Enums.Gender
    state: string
    district: string | null
    background: string | null
    schoolLevel: string | null
    interests: string[]
    challenges: string[]
    language: string
    profileImage: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ChildCountAggregateOutputType | null
    _avg: ChildAvgAggregateOutputType | null
    _sum: ChildSumAggregateOutputType | null
    _min: ChildMinAggregateOutputType | null
    _max: ChildMaxAggregateOutputType | null
  }

  type GetChildGroupByPayload<T extends ChildGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChildGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChildGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChildGroupByOutputType[P]>
            : GetScalarType<T[P], ChildGroupByOutputType[P]>
        }
      >
    >


  export type ChildSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    age?: boolean
    gender?: boolean
    state?: boolean
    district?: boolean
    background?: boolean
    schoolLevel?: boolean
    interests?: boolean
    challenges?: boolean
    language?: boolean
    profileImage?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assignments?: boolean | Child$assignmentsArgs<ExtArgs>
    concerns?: boolean | Child$concernsArgs<ExtArgs>
    sessions?: boolean | Child$sessionsArgs<ExtArgs>
    aiChatConversations?: boolean | Child$aiChatConversationsArgs<ExtArgs>
    conversationMemories?: boolean | Child$conversationMemoriesArgs<ExtArgs>
    tags?: boolean | Child$tagsArgs<ExtArgs>
    _count?: boolean | ChildCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["child"]>

  export type ChildSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    age?: boolean
    gender?: boolean
    state?: boolean
    district?: boolean
    background?: boolean
    schoolLevel?: boolean
    interests?: boolean
    challenges?: boolean
    language?: boolean
    profileImage?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["child"]>

  export type ChildSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    age?: boolean
    gender?: boolean
    state?: boolean
    district?: boolean
    background?: boolean
    schoolLevel?: boolean
    interests?: boolean
    challenges?: boolean
    language?: boolean
    profileImage?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["child"]>

  export type ChildSelectScalar = {
    id?: boolean
    name?: boolean
    age?: boolean
    gender?: boolean
    state?: boolean
    district?: boolean
    background?: boolean
    schoolLevel?: boolean
    interests?: boolean
    challenges?: boolean
    language?: boolean
    profileImage?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChildOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "age" | "gender" | "state" | "district" | "background" | "schoolLevel" | "interests" | "challenges" | "language" | "profileImage" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["child"]>
  export type ChildInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | Child$assignmentsArgs<ExtArgs>
    concerns?: boolean | Child$concernsArgs<ExtArgs>
    sessions?: boolean | Child$sessionsArgs<ExtArgs>
    aiChatConversations?: boolean | Child$aiChatConversationsArgs<ExtArgs>
    conversationMemories?: boolean | Child$conversationMemoriesArgs<ExtArgs>
    tags?: boolean | Child$tagsArgs<ExtArgs>
    _count?: boolean | ChildCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChildIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ChildIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ChildPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Child"
    objects: {
      assignments: Prisma.$AssignmentPayload<ExtArgs>[]
      concerns: Prisma.$ConcernPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      aiChatConversations: Prisma.$AiChatConversationPayload<ExtArgs>[]
      conversationMemories: Prisma.$ConversationMemoryPayload<ExtArgs>[]
      tags: Prisma.$TagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      age: number
      gender: $Enums.Gender
      state: string
      district: string | null
      background: string | null
      schoolLevel: string | null
      interests: string[]
      challenges: string[]
      language: string
      profileImage: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["child"]>
    composites: {}
  }

  type ChildGetPayload<S extends boolean | null | undefined | ChildDefaultArgs> = $Result.GetResult<Prisma.$ChildPayload, S>

  type ChildCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChildFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChildCountAggregateInputType | true
    }

  export interface ChildDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Child'], meta: { name: 'Child' } }
    /**
     * Find zero or one Child that matches the filter.
     * @param {ChildFindUniqueArgs} args - Arguments to find a Child
     * @example
     * // Get one Child
     * const child = await prisma.child.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChildFindUniqueArgs>(args: SelectSubset<T, ChildFindUniqueArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Child that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChildFindUniqueOrThrowArgs} args - Arguments to find a Child
     * @example
     * // Get one Child
     * const child = await prisma.child.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChildFindUniqueOrThrowArgs>(args: SelectSubset<T, ChildFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Child that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildFindFirstArgs} args - Arguments to find a Child
     * @example
     * // Get one Child
     * const child = await prisma.child.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChildFindFirstArgs>(args?: SelectSubset<T, ChildFindFirstArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Child that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildFindFirstOrThrowArgs} args - Arguments to find a Child
     * @example
     * // Get one Child
     * const child = await prisma.child.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChildFindFirstOrThrowArgs>(args?: SelectSubset<T, ChildFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Children that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Children
     * const children = await prisma.child.findMany()
     * 
     * // Get first 10 Children
     * const children = await prisma.child.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const childWithIdOnly = await prisma.child.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChildFindManyArgs>(args?: SelectSubset<T, ChildFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Child.
     * @param {ChildCreateArgs} args - Arguments to create a Child.
     * @example
     * // Create one Child
     * const Child = await prisma.child.create({
     *   data: {
     *     // ... data to create a Child
     *   }
     * })
     * 
     */
    create<T extends ChildCreateArgs>(args: SelectSubset<T, ChildCreateArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Children.
     * @param {ChildCreateManyArgs} args - Arguments to create many Children.
     * @example
     * // Create many Children
     * const child = await prisma.child.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChildCreateManyArgs>(args?: SelectSubset<T, ChildCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Children and returns the data saved in the database.
     * @param {ChildCreateManyAndReturnArgs} args - Arguments to create many Children.
     * @example
     * // Create many Children
     * const child = await prisma.child.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Children and only return the `id`
     * const childWithIdOnly = await prisma.child.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChildCreateManyAndReturnArgs>(args?: SelectSubset<T, ChildCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Child.
     * @param {ChildDeleteArgs} args - Arguments to delete one Child.
     * @example
     * // Delete one Child
     * const Child = await prisma.child.delete({
     *   where: {
     *     // ... filter to delete one Child
     *   }
     * })
     * 
     */
    delete<T extends ChildDeleteArgs>(args: SelectSubset<T, ChildDeleteArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Child.
     * @param {ChildUpdateArgs} args - Arguments to update one Child.
     * @example
     * // Update one Child
     * const child = await prisma.child.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChildUpdateArgs>(args: SelectSubset<T, ChildUpdateArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Children.
     * @param {ChildDeleteManyArgs} args - Arguments to filter Children to delete.
     * @example
     * // Delete a few Children
     * const { count } = await prisma.child.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChildDeleteManyArgs>(args?: SelectSubset<T, ChildDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Children.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Children
     * const child = await prisma.child.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChildUpdateManyArgs>(args: SelectSubset<T, ChildUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Children and returns the data updated in the database.
     * @param {ChildUpdateManyAndReturnArgs} args - Arguments to update many Children.
     * @example
     * // Update many Children
     * const child = await prisma.child.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Children and only return the `id`
     * const childWithIdOnly = await prisma.child.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChildUpdateManyAndReturnArgs>(args: SelectSubset<T, ChildUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Child.
     * @param {ChildUpsertArgs} args - Arguments to update or create a Child.
     * @example
     * // Update or create a Child
     * const child = await prisma.child.upsert({
     *   create: {
     *     // ... data to create a Child
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Child we want to update
     *   }
     * })
     */
    upsert<T extends ChildUpsertArgs>(args: SelectSubset<T, ChildUpsertArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Children.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildCountArgs} args - Arguments to filter Children to count.
     * @example
     * // Count the number of Children
     * const count = await prisma.child.count({
     *   where: {
     *     // ... the filter for the Children we want to count
     *   }
     * })
    **/
    count<T extends ChildCountArgs>(
      args?: Subset<T, ChildCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChildCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Child.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChildAggregateArgs>(args: Subset<T, ChildAggregateArgs>): Prisma.PrismaPromise<GetChildAggregateType<T>>

    /**
     * Group by Child.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChildGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChildGroupByArgs['orderBy'] }
        : { orderBy?: ChildGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChildGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChildGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Child model
   */
  readonly fields: ChildFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Child.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChildClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignments<T extends Child$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Child$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    concerns<T extends Child$concernsArgs<ExtArgs> = {}>(args?: Subset<T, Child$concernsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConcernPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends Child$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Child$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    aiChatConversations<T extends Child$aiChatConversationsArgs<ExtArgs> = {}>(args?: Subset<T, Child$aiChatConversationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatConversationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    conversationMemories<T extends Child$conversationMemoriesArgs<ExtArgs> = {}>(args?: Subset<T, Child$conversationMemoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationMemoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tags<T extends Child$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Child$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Child model
   */
  interface ChildFieldRefs {
    readonly id: FieldRef<"Child", 'String'>
    readonly name: FieldRef<"Child", 'String'>
    readonly age: FieldRef<"Child", 'Int'>
    readonly gender: FieldRef<"Child", 'Gender'>
    readonly state: FieldRef<"Child", 'String'>
    readonly district: FieldRef<"Child", 'String'>
    readonly background: FieldRef<"Child", 'String'>
    readonly schoolLevel: FieldRef<"Child", 'String'>
    readonly interests: FieldRef<"Child", 'String[]'>
    readonly challenges: FieldRef<"Child", 'String[]'>
    readonly language: FieldRef<"Child", 'String'>
    readonly profileImage: FieldRef<"Child", 'String'>
    readonly isActive: FieldRef<"Child", 'Boolean'>
    readonly createdAt: FieldRef<"Child", 'DateTime'>
    readonly updatedAt: FieldRef<"Child", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Child findUnique
   */
  export type ChildFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter, which Child to fetch.
     */
    where: ChildWhereUniqueInput
  }

  /**
   * Child findUniqueOrThrow
   */
  export type ChildFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter, which Child to fetch.
     */
    where: ChildWhereUniqueInput
  }

  /**
   * Child findFirst
   */
  export type ChildFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter, which Child to fetch.
     */
    where?: ChildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Children to fetch.
     */
    orderBy?: ChildOrderByWithRelationInput | ChildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Children.
     */
    cursor?: ChildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Children from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Children.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Children.
     */
    distinct?: ChildScalarFieldEnum | ChildScalarFieldEnum[]
  }

  /**
   * Child findFirstOrThrow
   */
  export type ChildFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter, which Child to fetch.
     */
    where?: ChildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Children to fetch.
     */
    orderBy?: ChildOrderByWithRelationInput | ChildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Children.
     */
    cursor?: ChildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Children from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Children.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Children.
     */
    distinct?: ChildScalarFieldEnum | ChildScalarFieldEnum[]
  }

  /**
   * Child findMany
   */
  export type ChildFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter, which Children to fetch.
     */
    where?: ChildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Children to fetch.
     */
    orderBy?: ChildOrderByWithRelationInput | ChildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Children.
     */
    cursor?: ChildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Children from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Children.
     */
    skip?: number
    distinct?: ChildScalarFieldEnum | ChildScalarFieldEnum[]
  }

  /**
   * Child create
   */
  export type ChildCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * The data needed to create a Child.
     */
    data: XOR<ChildCreateInput, ChildUncheckedCreateInput>
  }

  /**
   * Child createMany
   */
  export type ChildCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Children.
     */
    data: ChildCreateManyInput | ChildCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Child createManyAndReturn
   */
  export type ChildCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * The data used to create many Children.
     */
    data: ChildCreateManyInput | ChildCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Child update
   */
  export type ChildUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * The data needed to update a Child.
     */
    data: XOR<ChildUpdateInput, ChildUncheckedUpdateInput>
    /**
     * Choose, which Child to update.
     */
    where: ChildWhereUniqueInput
  }

  /**
   * Child updateMany
   */
  export type ChildUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Children.
     */
    data: XOR<ChildUpdateManyMutationInput, ChildUncheckedUpdateManyInput>
    /**
     * Filter which Children to update
     */
    where?: ChildWhereInput
    /**
     * Limit how many Children to update.
     */
    limit?: number
  }

  /**
   * Child updateManyAndReturn
   */
  export type ChildUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * The data used to update Children.
     */
    data: XOR<ChildUpdateManyMutationInput, ChildUncheckedUpdateManyInput>
    /**
     * Filter which Children to update
     */
    where?: ChildWhereInput
    /**
     * Limit how many Children to update.
     */
    limit?: number
  }

  /**
   * Child upsert
   */
  export type ChildUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * The filter to search for the Child to update in case it exists.
     */
    where: ChildWhereUniqueInput
    /**
     * In case the Child found by the `where` argument doesn't exist, create a new Child with this data.
     */
    create: XOR<ChildCreateInput, ChildUncheckedCreateInput>
    /**
     * In case the Child was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChildUpdateInput, ChildUncheckedUpdateInput>
  }

  /**
   * Child delete
   */
  export type ChildDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter which Child to delete.
     */
    where: ChildWhereUniqueInput
  }

  /**
   * Child deleteMany
   */
  export type ChildDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Children to delete
     */
    where?: ChildWhereInput
    /**
     * Limit how many Children to delete.
     */
    limit?: number
  }

  /**
   * Child.assignments
   */
  export type Child$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Child.concerns
   */
  export type Child$concernsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concern
     */
    select?: ConcernSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Concern
     */
    omit?: ConcernOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcernInclude<ExtArgs> | null
    where?: ConcernWhereInput
    orderBy?: ConcernOrderByWithRelationInput | ConcernOrderByWithRelationInput[]
    cursor?: ConcernWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConcernScalarFieldEnum | ConcernScalarFieldEnum[]
  }

  /**
   * Child.sessions
   */
  export type Child$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Child.aiChatConversations
   */
  export type Child$aiChatConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatConversation
     */
    select?: AiChatConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatConversation
     */
    omit?: AiChatConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatConversationInclude<ExtArgs> | null
    where?: AiChatConversationWhereInput
    orderBy?: AiChatConversationOrderByWithRelationInput | AiChatConversationOrderByWithRelationInput[]
    cursor?: AiChatConversationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AiChatConversationScalarFieldEnum | AiChatConversationScalarFieldEnum[]
  }

  /**
   * Child.conversationMemories
   */
  export type Child$conversationMemoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMemory
     */
    select?: ConversationMemorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConversationMemory
     */
    omit?: ConversationMemoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemoryInclude<ExtArgs> | null
    where?: ConversationMemoryWhereInput
    orderBy?: ConversationMemoryOrderByWithRelationInput | ConversationMemoryOrderByWithRelationInput[]
    cursor?: ConversationMemoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationMemoryScalarFieldEnum | ConversationMemoryScalarFieldEnum[]
  }

  /**
   * Child.tags
   */
  export type Child$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    where?: TagWhereInput
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    cursor?: TagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Child without action
   */
  export type ChildDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
  }


  /**
   * Model Assignment
   */

  export type AggregateAssignment = {
    _count: AssignmentCountAggregateOutputType | null
    _min: AssignmentMinAggregateOutputType | null
    _max: AssignmentMaxAggregateOutputType | null
  }

  export type AssignmentMinAggregateOutputType = {
    id: string | null
    volunteerId: string | null
    childId: string | null
    assignedAt: Date | null
    isActive: boolean | null
    notes: string | null
  }

  export type AssignmentMaxAggregateOutputType = {
    id: string | null
    volunteerId: string | null
    childId: string | null
    assignedAt: Date | null
    isActive: boolean | null
    notes: string | null
  }

  export type AssignmentCountAggregateOutputType = {
    id: number
    volunteerId: number
    childId: number
    assignedAt: number
    isActive: number
    notes: number
    _all: number
  }


  export type AssignmentMinAggregateInputType = {
    id?: true
    volunteerId?: true
    childId?: true
    assignedAt?: true
    isActive?: true
    notes?: true
  }

  export type AssignmentMaxAggregateInputType = {
    id?: true
    volunteerId?: true
    childId?: true
    assignedAt?: true
    isActive?: true
    notes?: true
  }

  export type AssignmentCountAggregateInputType = {
    id?: true
    volunteerId?: true
    childId?: true
    assignedAt?: true
    isActive?: true
    notes?: true
    _all?: true
  }

  export type AssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assignment to aggregate.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assignments
    **/
    _count?: true | AssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssignmentMaxAggregateInputType
  }

  export type GetAssignmentAggregateType<T extends AssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssignment[P]>
      : GetScalarType<T[P], AggregateAssignment[P]>
  }




  export type AssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithAggregationInput | AssignmentOrderByWithAggregationInput[]
    by: AssignmentScalarFieldEnum[] | AssignmentScalarFieldEnum
    having?: AssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssignmentCountAggregateInputType | true
    _min?: AssignmentMinAggregateInputType
    _max?: AssignmentMaxAggregateInputType
  }

  export type AssignmentGroupByOutputType = {
    id: string
    volunteerId: string
    childId: string
    assignedAt: Date
    isActive: boolean
    notes: string | null
    _count: AssignmentCountAggregateOutputType | null
    _min: AssignmentMinAggregateOutputType | null
    _max: AssignmentMaxAggregateOutputType | null
  }

  type GetAssignmentGroupByPayload<T extends AssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], AssignmentGroupByOutputType[P]>
        }
      >
    >


  export type AssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    volunteerId?: boolean
    childId?: boolean
    assignedAt?: boolean
    isActive?: boolean
    notes?: boolean
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    volunteerId?: boolean
    childId?: boolean
    assignedAt?: boolean
    isActive?: boolean
    notes?: boolean
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    volunteerId?: boolean
    childId?: boolean
    assignedAt?: boolean
    isActive?: boolean
    notes?: boolean
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectScalar = {
    id?: boolean
    volunteerId?: boolean
    childId?: boolean
    assignedAt?: boolean
    isActive?: boolean
    notes?: boolean
  }

  export type AssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "volunteerId" | "childId" | "assignedAt" | "isActive" | "notes", ExtArgs["result"]["assignment"]>
  export type AssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Assignment"
    objects: {
      child: Prisma.$ChildPayload<ExtArgs>
      volunteer: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      volunteerId: string
      childId: string
      assignedAt: Date
      isActive: boolean
      notes: string | null
    }, ExtArgs["result"]["assignment"]>
    composites: {}
  }

  type AssignmentGetPayload<S extends boolean | null | undefined | AssignmentDefaultArgs> = $Result.GetResult<Prisma.$AssignmentPayload, S>

  type AssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssignmentCountAggregateInputType | true
    }

  export interface AssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Assignment'], meta: { name: 'Assignment' } }
    /**
     * Find zero or one Assignment that matches the filter.
     * @param {AssignmentFindUniqueArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssignmentFindUniqueArgs>(args: SelectSubset<T, AssignmentFindUniqueArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Assignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssignmentFindUniqueOrThrowArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindFirstArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssignmentFindFirstArgs>(args?: SelectSubset<T, AssignmentFindFirstArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindFirstOrThrowArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Assignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assignments
     * const assignments = await prisma.assignment.findMany()
     * 
     * // Get first 10 Assignments
     * const assignments = await prisma.assignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assignmentWithIdOnly = await prisma.assignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssignmentFindManyArgs>(args?: SelectSubset<T, AssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Assignment.
     * @param {AssignmentCreateArgs} args - Arguments to create a Assignment.
     * @example
     * // Create one Assignment
     * const Assignment = await prisma.assignment.create({
     *   data: {
     *     // ... data to create a Assignment
     *   }
     * })
     * 
     */
    create<T extends AssignmentCreateArgs>(args: SelectSubset<T, AssignmentCreateArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Assignments.
     * @param {AssignmentCreateManyArgs} args - Arguments to create many Assignments.
     * @example
     * // Create many Assignments
     * const assignment = await prisma.assignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssignmentCreateManyArgs>(args?: SelectSubset<T, AssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assignments and returns the data saved in the database.
     * @param {AssignmentCreateManyAndReturnArgs} args - Arguments to create many Assignments.
     * @example
     * // Create many Assignments
     * const assignment = await prisma.assignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assignments and only return the `id`
     * const assignmentWithIdOnly = await prisma.assignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Assignment.
     * @param {AssignmentDeleteArgs} args - Arguments to delete one Assignment.
     * @example
     * // Delete one Assignment
     * const Assignment = await prisma.assignment.delete({
     *   where: {
     *     // ... filter to delete one Assignment
     *   }
     * })
     * 
     */
    delete<T extends AssignmentDeleteArgs>(args: SelectSubset<T, AssignmentDeleteArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Assignment.
     * @param {AssignmentUpdateArgs} args - Arguments to update one Assignment.
     * @example
     * // Update one Assignment
     * const assignment = await prisma.assignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssignmentUpdateArgs>(args: SelectSubset<T, AssignmentUpdateArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Assignments.
     * @param {AssignmentDeleteManyArgs} args - Arguments to filter Assignments to delete.
     * @example
     * // Delete a few Assignments
     * const { count } = await prisma.assignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssignmentDeleteManyArgs>(args?: SelectSubset<T, AssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assignments
     * const assignment = await prisma.assignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssignmentUpdateManyArgs>(args: SelectSubset<T, AssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assignments and returns the data updated in the database.
     * @param {AssignmentUpdateManyAndReturnArgs} args - Arguments to update many Assignments.
     * @example
     * // Update many Assignments
     * const assignment = await prisma.assignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Assignments and only return the `id`
     * const assignmentWithIdOnly = await prisma.assignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Assignment.
     * @param {AssignmentUpsertArgs} args - Arguments to update or create a Assignment.
     * @example
     * // Update or create a Assignment
     * const assignment = await prisma.assignment.upsert({
     *   create: {
     *     // ... data to create a Assignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assignment we want to update
     *   }
     * })
     */
    upsert<T extends AssignmentUpsertArgs>(args: SelectSubset<T, AssignmentUpsertArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentCountArgs} args - Arguments to filter Assignments to count.
     * @example
     * // Count the number of Assignments
     * const count = await prisma.assignment.count({
     *   where: {
     *     // ... the filter for the Assignments we want to count
     *   }
     * })
    **/
    count<T extends AssignmentCountArgs>(
      args?: Subset<T, AssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssignmentAggregateArgs>(args: Subset<T, AssignmentAggregateArgs>): Prisma.PrismaPromise<GetAssignmentAggregateType<T>>

    /**
     * Group by Assignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssignmentGroupByArgs['orderBy'] }
        : { orderBy?: AssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Assignment model
   */
  readonly fields: AssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Assignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    child<T extends ChildDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChildDefaultArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    volunteer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Assignment model
   */
  interface AssignmentFieldRefs {
    readonly id: FieldRef<"Assignment", 'String'>
    readonly volunteerId: FieldRef<"Assignment", 'String'>
    readonly childId: FieldRef<"Assignment", 'String'>
    readonly assignedAt: FieldRef<"Assignment", 'DateTime'>
    readonly isActive: FieldRef<"Assignment", 'Boolean'>
    readonly notes: FieldRef<"Assignment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Assignment findUnique
   */
  export type AssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment findUniqueOrThrow
   */
  export type AssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment findFirst
   */
  export type AssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assignments.
     */
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment findFirstOrThrow
   */
  export type AssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assignments.
     */
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment findMany
   */
  export type AssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignments to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment create
   */
  export type AssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Assignment.
     */
    data: XOR<AssignmentCreateInput, AssignmentUncheckedCreateInput>
  }

  /**
   * Assignment createMany
   */
  export type AssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assignments.
     */
    data: AssignmentCreateManyInput | AssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Assignment createManyAndReturn
   */
  export type AssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many Assignments.
     */
    data: AssignmentCreateManyInput | AssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assignment update
   */
  export type AssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Assignment.
     */
    data: XOR<AssignmentUpdateInput, AssignmentUncheckedUpdateInput>
    /**
     * Choose, which Assignment to update.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment updateMany
   */
  export type AssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assignments.
     */
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyInput>
    /**
     * Filter which Assignments to update
     */
    where?: AssignmentWhereInput
    /**
     * Limit how many Assignments to update.
     */
    limit?: number
  }

  /**
   * Assignment updateManyAndReturn
   */
  export type AssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * The data used to update Assignments.
     */
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyInput>
    /**
     * Filter which Assignments to update
     */
    where?: AssignmentWhereInput
    /**
     * Limit how many Assignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assignment upsert
   */
  export type AssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Assignment to update in case it exists.
     */
    where: AssignmentWhereUniqueInput
    /**
     * In case the Assignment found by the `where` argument doesn't exist, create a new Assignment with this data.
     */
    create: XOR<AssignmentCreateInput, AssignmentUncheckedCreateInput>
    /**
     * In case the Assignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssignmentUpdateInput, AssignmentUncheckedUpdateInput>
  }

  /**
   * Assignment delete
   */
  export type AssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter which Assignment to delete.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment deleteMany
   */
  export type AssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assignments to delete
     */
    where?: AssignmentWhereInput
    /**
     * Limit how many Assignments to delete.
     */
    limit?: number
  }

  /**
   * Assignment without action
   */
  export type AssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    childId: string | null
    volunteerId: string | null
    scheduledAt: Date | null
    startedAt: Date | null
    endedAt: Date | null
    status: $Enums.SessionStatus | null
    sessionType: $Enums.SessionType | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    childId: string | null
    volunteerId: string | null
    scheduledAt: Date | null
    startedAt: Date | null
    endedAt: Date | null
    status: $Enums.SessionStatus | null
    sessionType: $Enums.SessionType | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    childId: number
    volunteerId: number
    scheduledAt: number
    startedAt: number
    endedAt: number
    status: number
    sessionType: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    childId?: true
    volunteerId?: true
    scheduledAt?: true
    startedAt?: true
    endedAt?: true
    status?: true
    sessionType?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    childId?: true
    volunteerId?: true
    scheduledAt?: true
    startedAt?: true
    endedAt?: true
    status?: true
    sessionType?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    childId?: true
    volunteerId?: true
    scheduledAt?: true
    startedAt?: true
    endedAt?: true
    status?: true
    sessionType?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    childId: string
    volunteerId: string
    scheduledAt: Date | null
    startedAt: Date | null
    endedAt: Date | null
    status: $Enums.SessionStatus
    sessionType: $Enums.SessionType
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    childId?: boolean
    volunteerId?: boolean
    scheduledAt?: boolean
    startedAt?: boolean
    endedAt?: boolean
    status?: boolean
    sessionType?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatMessages?: boolean | Session$chatMessagesArgs<ExtArgs>
    aiChatConversations?: boolean | Session$aiChatConversationsArgs<ExtArgs>
    conversationMemories?: boolean | Session$conversationMemoriesArgs<ExtArgs>
    summary?: boolean | Session$summaryArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | SessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    childId?: boolean
    volunteerId?: boolean
    scheduledAt?: boolean
    startedAt?: boolean
    endedAt?: boolean
    status?: boolean
    sessionType?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    childId?: boolean
    volunteerId?: boolean
    scheduledAt?: boolean
    startedAt?: boolean
    endedAt?: boolean
    status?: boolean
    sessionType?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    childId?: boolean
    volunteerId?: boolean
    scheduledAt?: boolean
    startedAt?: boolean
    endedAt?: boolean
    status?: boolean
    sessionType?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "childId" | "volunteerId" | "scheduledAt" | "startedAt" | "endedAt" | "status" | "sessionType" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatMessages?: boolean | Session$chatMessagesArgs<ExtArgs>
    aiChatConversations?: boolean | Session$aiChatConversationsArgs<ExtArgs>
    conversationMemories?: boolean | Session$conversationMemoriesArgs<ExtArgs>
    summary?: boolean | Session$summaryArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | SessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      chatMessages: Prisma.$ChatMessagePayload<ExtArgs>[]
      aiChatConversations: Prisma.$AiChatConversationPayload<ExtArgs>[]
      conversationMemories: Prisma.$ConversationMemoryPayload<ExtArgs>[]
      summary: Prisma.$SessionSummaryPayload<ExtArgs> | null
      child: Prisma.$ChildPayload<ExtArgs>
      volunteer: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      childId: string
      volunteerId: string
      scheduledAt: Date | null
      startedAt: Date | null
      endedAt: Date | null
      status: $Enums.SessionStatus
      sessionType: $Enums.SessionType
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chatMessages<T extends Session$chatMessagesArgs<ExtArgs> = {}>(args?: Subset<T, Session$chatMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    aiChatConversations<T extends Session$aiChatConversationsArgs<ExtArgs> = {}>(args?: Subset<T, Session$aiChatConversationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatConversationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    conversationMemories<T extends Session$conversationMemoriesArgs<ExtArgs> = {}>(args?: Subset<T, Session$conversationMemoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationMemoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    summary<T extends Session$summaryArgs<ExtArgs> = {}>(args?: Subset<T, Session$summaryArgs<ExtArgs>>): Prisma__SessionSummaryClient<$Result.GetResult<Prisma.$SessionSummaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    child<T extends ChildDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChildDefaultArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    volunteer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly childId: FieldRef<"Session", 'String'>
    readonly volunteerId: FieldRef<"Session", 'String'>
    readonly scheduledAt: FieldRef<"Session", 'DateTime'>
    readonly startedAt: FieldRef<"Session", 'DateTime'>
    readonly endedAt: FieldRef<"Session", 'DateTime'>
    readonly status: FieldRef<"Session", 'SessionStatus'>
    readonly sessionType: FieldRef<"Session", 'SessionType'>
    readonly notes: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session.chatMessages
   */
  export type Session$chatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * Session.aiChatConversations
   */
  export type Session$aiChatConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatConversation
     */
    select?: AiChatConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatConversation
     */
    omit?: AiChatConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatConversationInclude<ExtArgs> | null
    where?: AiChatConversationWhereInput
    orderBy?: AiChatConversationOrderByWithRelationInput | AiChatConversationOrderByWithRelationInput[]
    cursor?: AiChatConversationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AiChatConversationScalarFieldEnum | AiChatConversationScalarFieldEnum[]
  }

  /**
   * Session.conversationMemories
   */
  export type Session$conversationMemoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMemory
     */
    select?: ConversationMemorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConversationMemory
     */
    omit?: ConversationMemoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemoryInclude<ExtArgs> | null
    where?: ConversationMemoryWhereInput
    orderBy?: ConversationMemoryOrderByWithRelationInput | ConversationMemoryOrderByWithRelationInput[]
    cursor?: ConversationMemoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationMemoryScalarFieldEnum | ConversationMemoryScalarFieldEnum[]
  }

  /**
   * Session.summary
   */
  export type Session$summaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSummary
     */
    select?: SessionSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSummary
     */
    omit?: SessionSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSummaryInclude<ExtArgs> | null
    where?: SessionSummaryWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model SessionSummary
   */

  export type AggregateSessionSummary = {
    _count: SessionSummaryCountAggregateOutputType | null
    _min: SessionSummaryMinAggregateOutputType | null
    _max: SessionSummaryMaxAggregateOutputType | null
  }

  export type SessionSummaryMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    summary: string | null
    sessionDuration: string | null
    sessionType: string | null
    initialMood: string | null
    finalMood: string | null
    moodChanges: string | null
    storyResponse: string | null
    breakthroughs: string | null
    keyInsights: string | null
    challengesFaced: string | null
    challengeHandling: string | null
    engagementLevel: string | null
    participationNotes: string | null
    progressMade: string | null
    recommendations: string | null
    sessionEffectiveness: string | null
    volunteerConfidence: string | null
    nextSessionFocus: string | null
    nextSessionTiming: string | null
    additionalNotes: string | null
    resolutionStatus: $Enums.ResolutionStatus | null
    followUpNeeded: boolean | null
    followUpDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionSummaryMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    summary: string | null
    sessionDuration: string | null
    sessionType: string | null
    initialMood: string | null
    finalMood: string | null
    moodChanges: string | null
    storyResponse: string | null
    breakthroughs: string | null
    keyInsights: string | null
    challengesFaced: string | null
    challengeHandling: string | null
    engagementLevel: string | null
    participationNotes: string | null
    progressMade: string | null
    recommendations: string | null
    sessionEffectiveness: string | null
    volunteerConfidence: string | null
    nextSessionFocus: string | null
    nextSessionTiming: string | null
    additionalNotes: string | null
    resolutionStatus: $Enums.ResolutionStatus | null
    followUpNeeded: boolean | null
    followUpDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionSummaryCountAggregateOutputType = {
    id: number
    sessionId: number
    summary: number
    sessionDuration: number
    sessionType: number
    initialMood: number
    finalMood: number
    moodChanges: number
    concernsDiscussed: number
    topicsDiscussed: number
    culturalStoriesUsed: number
    techniquesUsed: number
    techniqueEffectiveness: number
    storyResponse: number
    breakthroughs: number
    keyInsights: number
    challengesFaced: number
    challengeHandling: number
    engagementLevel: number
    participationNotes: number
    progressMade: number
    nextSteps: number
    actionItems: number
    recommendations: number
    sessionEffectiveness: number
    volunteerConfidence: number
    nextSessionFocus: number
    nextSessionTiming: number
    additionalNotes: number
    resolutionStatus: number
    followUpNeeded: number
    followUpDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionSummaryMinAggregateInputType = {
    id?: true
    sessionId?: true
    summary?: true
    sessionDuration?: true
    sessionType?: true
    initialMood?: true
    finalMood?: true
    moodChanges?: true
    storyResponse?: true
    breakthroughs?: true
    keyInsights?: true
    challengesFaced?: true
    challengeHandling?: true
    engagementLevel?: true
    participationNotes?: true
    progressMade?: true
    recommendations?: true
    sessionEffectiveness?: true
    volunteerConfidence?: true
    nextSessionFocus?: true
    nextSessionTiming?: true
    additionalNotes?: true
    resolutionStatus?: true
    followUpNeeded?: true
    followUpDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionSummaryMaxAggregateInputType = {
    id?: true
    sessionId?: true
    summary?: true
    sessionDuration?: true
    sessionType?: true
    initialMood?: true
    finalMood?: true
    moodChanges?: true
    storyResponse?: true
    breakthroughs?: true
    keyInsights?: true
    challengesFaced?: true
    challengeHandling?: true
    engagementLevel?: true
    participationNotes?: true
    progressMade?: true
    recommendations?: true
    sessionEffectiveness?: true
    volunteerConfidence?: true
    nextSessionFocus?: true
    nextSessionTiming?: true
    additionalNotes?: true
    resolutionStatus?: true
    followUpNeeded?: true
    followUpDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionSummaryCountAggregateInputType = {
    id?: true
    sessionId?: true
    summary?: true
    sessionDuration?: true
    sessionType?: true
    initialMood?: true
    finalMood?: true
    moodChanges?: true
    concernsDiscussed?: true
    topicsDiscussed?: true
    culturalStoriesUsed?: true
    techniquesUsed?: true
    techniqueEffectiveness?: true
    storyResponse?: true
    breakthroughs?: true
    keyInsights?: true
    challengesFaced?: true
    challengeHandling?: true
    engagementLevel?: true
    participationNotes?: true
    progressMade?: true
    nextSteps?: true
    actionItems?: true
    recommendations?: true
    sessionEffectiveness?: true
    volunteerConfidence?: true
    nextSessionFocus?: true
    nextSessionTiming?: true
    additionalNotes?: true
    resolutionStatus?: true
    followUpNeeded?: true
    followUpDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionSummaryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionSummary to aggregate.
     */
    where?: SessionSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionSummaries to fetch.
     */
    orderBy?: SessionSummaryOrderByWithRelationInput | SessionSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SessionSummaries
    **/
    _count?: true | SessionSummaryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionSummaryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionSummaryMaxAggregateInputType
  }

  export type GetSessionSummaryAggregateType<T extends SessionSummaryAggregateArgs> = {
        [P in keyof T & keyof AggregateSessionSummary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionSummary[P]>
      : GetScalarType<T[P], AggregateSessionSummary[P]>
  }




  export type SessionSummaryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionSummaryWhereInput
    orderBy?: SessionSummaryOrderByWithAggregationInput | SessionSummaryOrderByWithAggregationInput[]
    by: SessionSummaryScalarFieldEnum[] | SessionSummaryScalarFieldEnum
    having?: SessionSummaryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionSummaryCountAggregateInputType | true
    _min?: SessionSummaryMinAggregateInputType
    _max?: SessionSummaryMaxAggregateInputType
  }

  export type SessionSummaryGroupByOutputType = {
    id: string
    sessionId: string
    summary: string
    sessionDuration: string | null
    sessionType: string | null
    initialMood: string | null
    finalMood: string | null
    moodChanges: string | null
    concernsDiscussed: string[]
    topicsDiscussed: string[]
    culturalStoriesUsed: string[]
    techniquesUsed: string[]
    techniqueEffectiveness: JsonValue | null
    storyResponse: string | null
    breakthroughs: string | null
    keyInsights: string | null
    challengesFaced: string | null
    challengeHandling: string | null
    engagementLevel: string | null
    participationNotes: string | null
    progressMade: string | null
    nextSteps: string[]
    actionItems: string[]
    recommendations: string | null
    sessionEffectiveness: string | null
    volunteerConfidence: string | null
    nextSessionFocus: string | null
    nextSessionTiming: string | null
    additionalNotes: string | null
    resolutionStatus: $Enums.ResolutionStatus
    followUpNeeded: boolean
    followUpDate: Date | null
    createdAt: Date
    updatedAt: Date
    _count: SessionSummaryCountAggregateOutputType | null
    _min: SessionSummaryMinAggregateOutputType | null
    _max: SessionSummaryMaxAggregateOutputType | null
  }

  type GetSessionSummaryGroupByPayload<T extends SessionSummaryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionSummaryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionSummaryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionSummaryGroupByOutputType[P]>
            : GetScalarType<T[P], SessionSummaryGroupByOutputType[P]>
        }
      >
    >


  export type SessionSummarySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    summary?: boolean
    sessionDuration?: boolean
    sessionType?: boolean
    initialMood?: boolean
    finalMood?: boolean
    moodChanges?: boolean
    concernsDiscussed?: boolean
    topicsDiscussed?: boolean
    culturalStoriesUsed?: boolean
    techniquesUsed?: boolean
    techniqueEffectiveness?: boolean
    storyResponse?: boolean
    breakthroughs?: boolean
    keyInsights?: boolean
    challengesFaced?: boolean
    challengeHandling?: boolean
    engagementLevel?: boolean
    participationNotes?: boolean
    progressMade?: boolean
    nextSteps?: boolean
    actionItems?: boolean
    recommendations?: boolean
    sessionEffectiveness?: boolean
    volunteerConfidence?: boolean
    nextSessionFocus?: boolean
    nextSessionTiming?: boolean
    additionalNotes?: boolean
    resolutionStatus?: boolean
    followUpNeeded?: boolean
    followUpDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionSummary"]>

  export type SessionSummarySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    summary?: boolean
    sessionDuration?: boolean
    sessionType?: boolean
    initialMood?: boolean
    finalMood?: boolean
    moodChanges?: boolean
    concernsDiscussed?: boolean
    topicsDiscussed?: boolean
    culturalStoriesUsed?: boolean
    techniquesUsed?: boolean
    techniqueEffectiveness?: boolean
    storyResponse?: boolean
    breakthroughs?: boolean
    keyInsights?: boolean
    challengesFaced?: boolean
    challengeHandling?: boolean
    engagementLevel?: boolean
    participationNotes?: boolean
    progressMade?: boolean
    nextSteps?: boolean
    actionItems?: boolean
    recommendations?: boolean
    sessionEffectiveness?: boolean
    volunteerConfidence?: boolean
    nextSessionFocus?: boolean
    nextSessionTiming?: boolean
    additionalNotes?: boolean
    resolutionStatus?: boolean
    followUpNeeded?: boolean
    followUpDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionSummary"]>

  export type SessionSummarySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    summary?: boolean
    sessionDuration?: boolean
    sessionType?: boolean
    initialMood?: boolean
    finalMood?: boolean
    moodChanges?: boolean
    concernsDiscussed?: boolean
    topicsDiscussed?: boolean
    culturalStoriesUsed?: boolean
    techniquesUsed?: boolean
    techniqueEffectiveness?: boolean
    storyResponse?: boolean
    breakthroughs?: boolean
    keyInsights?: boolean
    challengesFaced?: boolean
    challengeHandling?: boolean
    engagementLevel?: boolean
    participationNotes?: boolean
    progressMade?: boolean
    nextSteps?: boolean
    actionItems?: boolean
    recommendations?: boolean
    sessionEffectiveness?: boolean
    volunteerConfidence?: boolean
    nextSessionFocus?: boolean
    nextSessionTiming?: boolean
    additionalNotes?: boolean
    resolutionStatus?: boolean
    followUpNeeded?: boolean
    followUpDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionSummary"]>

  export type SessionSummarySelectScalar = {
    id?: boolean
    sessionId?: boolean
    summary?: boolean
    sessionDuration?: boolean
    sessionType?: boolean
    initialMood?: boolean
    finalMood?: boolean
    moodChanges?: boolean
    concernsDiscussed?: boolean
    topicsDiscussed?: boolean
    culturalStoriesUsed?: boolean
    techniquesUsed?: boolean
    techniqueEffectiveness?: boolean
    storyResponse?: boolean
    breakthroughs?: boolean
    keyInsights?: boolean
    challengesFaced?: boolean
    challengeHandling?: boolean
    engagementLevel?: boolean
    participationNotes?: boolean
    progressMade?: boolean
    nextSteps?: boolean
    actionItems?: boolean
    recommendations?: boolean
    sessionEffectiveness?: boolean
    volunteerConfidence?: boolean
    nextSessionFocus?: boolean
    nextSessionTiming?: boolean
    additionalNotes?: boolean
    resolutionStatus?: boolean
    followUpNeeded?: boolean
    followUpDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SessionSummaryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionId" | "summary" | "sessionDuration" | "sessionType" | "initialMood" | "finalMood" | "moodChanges" | "concernsDiscussed" | "topicsDiscussed" | "culturalStoriesUsed" | "techniquesUsed" | "techniqueEffectiveness" | "storyResponse" | "breakthroughs" | "keyInsights" | "challengesFaced" | "challengeHandling" | "engagementLevel" | "participationNotes" | "progressMade" | "nextSteps" | "actionItems" | "recommendations" | "sessionEffectiveness" | "volunteerConfidence" | "nextSessionFocus" | "nextSessionTiming" | "additionalNotes" | "resolutionStatus" | "followUpNeeded" | "followUpDate" | "createdAt" | "updatedAt", ExtArgs["result"]["sessionSummary"]>
  export type SessionSummaryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }
  export type SessionSummaryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }
  export type SessionSummaryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }

  export type $SessionSummaryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SessionSummary"
    objects: {
      session: Prisma.$SessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      summary: string
      sessionDuration: string | null
      sessionType: string | null
      initialMood: string | null
      finalMood: string | null
      moodChanges: string | null
      concernsDiscussed: string[]
      topicsDiscussed: string[]
      culturalStoriesUsed: string[]
      techniquesUsed: string[]
      techniqueEffectiveness: Prisma.JsonValue | null
      storyResponse: string | null
      breakthroughs: string | null
      keyInsights: string | null
      challengesFaced: string | null
      challengeHandling: string | null
      engagementLevel: string | null
      participationNotes: string | null
      progressMade: string | null
      nextSteps: string[]
      actionItems: string[]
      recommendations: string | null
      sessionEffectiveness: string | null
      volunteerConfidence: string | null
      nextSessionFocus: string | null
      nextSessionTiming: string | null
      additionalNotes: string | null
      resolutionStatus: $Enums.ResolutionStatus
      followUpNeeded: boolean
      followUpDate: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sessionSummary"]>
    composites: {}
  }

  type SessionSummaryGetPayload<S extends boolean | null | undefined | SessionSummaryDefaultArgs> = $Result.GetResult<Prisma.$SessionSummaryPayload, S>

  type SessionSummaryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionSummaryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionSummaryCountAggregateInputType | true
    }

  export interface SessionSummaryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SessionSummary'], meta: { name: 'SessionSummary' } }
    /**
     * Find zero or one SessionSummary that matches the filter.
     * @param {SessionSummaryFindUniqueArgs} args - Arguments to find a SessionSummary
     * @example
     * // Get one SessionSummary
     * const sessionSummary = await prisma.sessionSummary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionSummaryFindUniqueArgs>(args: SelectSubset<T, SessionSummaryFindUniqueArgs<ExtArgs>>): Prisma__SessionSummaryClient<$Result.GetResult<Prisma.$SessionSummaryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SessionSummary that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionSummaryFindUniqueOrThrowArgs} args - Arguments to find a SessionSummary
     * @example
     * // Get one SessionSummary
     * const sessionSummary = await prisma.sessionSummary.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionSummaryFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionSummaryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionSummaryClient<$Result.GetResult<Prisma.$SessionSummaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SessionSummary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionSummaryFindFirstArgs} args - Arguments to find a SessionSummary
     * @example
     * // Get one SessionSummary
     * const sessionSummary = await prisma.sessionSummary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionSummaryFindFirstArgs>(args?: SelectSubset<T, SessionSummaryFindFirstArgs<ExtArgs>>): Prisma__SessionSummaryClient<$Result.GetResult<Prisma.$SessionSummaryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SessionSummary that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionSummaryFindFirstOrThrowArgs} args - Arguments to find a SessionSummary
     * @example
     * // Get one SessionSummary
     * const sessionSummary = await prisma.sessionSummary.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionSummaryFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionSummaryFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionSummaryClient<$Result.GetResult<Prisma.$SessionSummaryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SessionSummaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionSummaryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionSummaries
     * const sessionSummaries = await prisma.sessionSummary.findMany()
     * 
     * // Get first 10 SessionSummaries
     * const sessionSummaries = await prisma.sessionSummary.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionSummaryWithIdOnly = await prisma.sessionSummary.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionSummaryFindManyArgs>(args?: SelectSubset<T, SessionSummaryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionSummaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SessionSummary.
     * @param {SessionSummaryCreateArgs} args - Arguments to create a SessionSummary.
     * @example
     * // Create one SessionSummary
     * const SessionSummary = await prisma.sessionSummary.create({
     *   data: {
     *     // ... data to create a SessionSummary
     *   }
     * })
     * 
     */
    create<T extends SessionSummaryCreateArgs>(args: SelectSubset<T, SessionSummaryCreateArgs<ExtArgs>>): Prisma__SessionSummaryClient<$Result.GetResult<Prisma.$SessionSummaryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SessionSummaries.
     * @param {SessionSummaryCreateManyArgs} args - Arguments to create many SessionSummaries.
     * @example
     * // Create many SessionSummaries
     * const sessionSummary = await prisma.sessionSummary.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionSummaryCreateManyArgs>(args?: SelectSubset<T, SessionSummaryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SessionSummaries and returns the data saved in the database.
     * @param {SessionSummaryCreateManyAndReturnArgs} args - Arguments to create many SessionSummaries.
     * @example
     * // Create many SessionSummaries
     * const sessionSummary = await prisma.sessionSummary.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SessionSummaries and only return the `id`
     * const sessionSummaryWithIdOnly = await prisma.sessionSummary.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionSummaryCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionSummaryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionSummaryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SessionSummary.
     * @param {SessionSummaryDeleteArgs} args - Arguments to delete one SessionSummary.
     * @example
     * // Delete one SessionSummary
     * const SessionSummary = await prisma.sessionSummary.delete({
     *   where: {
     *     // ... filter to delete one SessionSummary
     *   }
     * })
     * 
     */
    delete<T extends SessionSummaryDeleteArgs>(args: SelectSubset<T, SessionSummaryDeleteArgs<ExtArgs>>): Prisma__SessionSummaryClient<$Result.GetResult<Prisma.$SessionSummaryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SessionSummary.
     * @param {SessionSummaryUpdateArgs} args - Arguments to update one SessionSummary.
     * @example
     * // Update one SessionSummary
     * const sessionSummary = await prisma.sessionSummary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionSummaryUpdateArgs>(args: SelectSubset<T, SessionSummaryUpdateArgs<ExtArgs>>): Prisma__SessionSummaryClient<$Result.GetResult<Prisma.$SessionSummaryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SessionSummaries.
     * @param {SessionSummaryDeleteManyArgs} args - Arguments to filter SessionSummaries to delete.
     * @example
     * // Delete a few SessionSummaries
     * const { count } = await prisma.sessionSummary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionSummaryDeleteManyArgs>(args?: SelectSubset<T, SessionSummaryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionSummaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionSummaryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionSummaries
     * const sessionSummary = await prisma.sessionSummary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionSummaryUpdateManyArgs>(args: SelectSubset<T, SessionSummaryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionSummaries and returns the data updated in the database.
     * @param {SessionSummaryUpdateManyAndReturnArgs} args - Arguments to update many SessionSummaries.
     * @example
     * // Update many SessionSummaries
     * const sessionSummary = await prisma.sessionSummary.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SessionSummaries and only return the `id`
     * const sessionSummaryWithIdOnly = await prisma.sessionSummary.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionSummaryUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionSummaryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionSummaryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SessionSummary.
     * @param {SessionSummaryUpsertArgs} args - Arguments to update or create a SessionSummary.
     * @example
     * // Update or create a SessionSummary
     * const sessionSummary = await prisma.sessionSummary.upsert({
     *   create: {
     *     // ... data to create a SessionSummary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionSummary we want to update
     *   }
     * })
     */
    upsert<T extends SessionSummaryUpsertArgs>(args: SelectSubset<T, SessionSummaryUpsertArgs<ExtArgs>>): Prisma__SessionSummaryClient<$Result.GetResult<Prisma.$SessionSummaryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SessionSummaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionSummaryCountArgs} args - Arguments to filter SessionSummaries to count.
     * @example
     * // Count the number of SessionSummaries
     * const count = await prisma.sessionSummary.count({
     *   where: {
     *     // ... the filter for the SessionSummaries we want to count
     *   }
     * })
    **/
    count<T extends SessionSummaryCountArgs>(
      args?: Subset<T, SessionSummaryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionSummaryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionSummary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionSummaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionSummaryAggregateArgs>(args: Subset<T, SessionSummaryAggregateArgs>): Prisma.PrismaPromise<GetSessionSummaryAggregateType<T>>

    /**
     * Group by SessionSummary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionSummaryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionSummaryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionSummaryGroupByArgs['orderBy'] }
        : { orderBy?: SessionSummaryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionSummaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionSummaryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SessionSummary model
   */
  readonly fields: SessionSummaryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SessionSummary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionSummaryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends SessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SessionDefaultArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SessionSummary model
   */
  interface SessionSummaryFieldRefs {
    readonly id: FieldRef<"SessionSummary", 'String'>
    readonly sessionId: FieldRef<"SessionSummary", 'String'>
    readonly summary: FieldRef<"SessionSummary", 'String'>
    readonly sessionDuration: FieldRef<"SessionSummary", 'String'>
    readonly sessionType: FieldRef<"SessionSummary", 'String'>
    readonly initialMood: FieldRef<"SessionSummary", 'String'>
    readonly finalMood: FieldRef<"SessionSummary", 'String'>
    readonly moodChanges: FieldRef<"SessionSummary", 'String'>
    readonly concernsDiscussed: FieldRef<"SessionSummary", 'String[]'>
    readonly topicsDiscussed: FieldRef<"SessionSummary", 'String[]'>
    readonly culturalStoriesUsed: FieldRef<"SessionSummary", 'String[]'>
    readonly techniquesUsed: FieldRef<"SessionSummary", 'String[]'>
    readonly techniqueEffectiveness: FieldRef<"SessionSummary", 'Json'>
    readonly storyResponse: FieldRef<"SessionSummary", 'String'>
    readonly breakthroughs: FieldRef<"SessionSummary", 'String'>
    readonly keyInsights: FieldRef<"SessionSummary", 'String'>
    readonly challengesFaced: FieldRef<"SessionSummary", 'String'>
    readonly challengeHandling: FieldRef<"SessionSummary", 'String'>
    readonly engagementLevel: FieldRef<"SessionSummary", 'String'>
    readonly participationNotes: FieldRef<"SessionSummary", 'String'>
    readonly progressMade: FieldRef<"SessionSummary", 'String'>
    readonly nextSteps: FieldRef<"SessionSummary", 'String[]'>
    readonly actionItems: FieldRef<"SessionSummary", 'String[]'>
    readonly recommendations: FieldRef<"SessionSummary", 'String'>
    readonly sessionEffectiveness: FieldRef<"SessionSummary", 'String'>
    readonly volunteerConfidence: FieldRef<"SessionSummary", 'String'>
    readonly nextSessionFocus: FieldRef<"SessionSummary", 'String'>
    readonly nextSessionTiming: FieldRef<"SessionSummary", 'String'>
    readonly additionalNotes: FieldRef<"SessionSummary", 'String'>
    readonly resolutionStatus: FieldRef<"SessionSummary", 'ResolutionStatus'>
    readonly followUpNeeded: FieldRef<"SessionSummary", 'Boolean'>
    readonly followUpDate: FieldRef<"SessionSummary", 'DateTime'>
    readonly createdAt: FieldRef<"SessionSummary", 'DateTime'>
    readonly updatedAt: FieldRef<"SessionSummary", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SessionSummary findUnique
   */
  export type SessionSummaryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSummary
     */
    select?: SessionSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSummary
     */
    omit?: SessionSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSummaryInclude<ExtArgs> | null
    /**
     * Filter, which SessionSummary to fetch.
     */
    where: SessionSummaryWhereUniqueInput
  }

  /**
   * SessionSummary findUniqueOrThrow
   */
  export type SessionSummaryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSummary
     */
    select?: SessionSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSummary
     */
    omit?: SessionSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSummaryInclude<ExtArgs> | null
    /**
     * Filter, which SessionSummary to fetch.
     */
    where: SessionSummaryWhereUniqueInput
  }

  /**
   * SessionSummary findFirst
   */
  export type SessionSummaryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSummary
     */
    select?: SessionSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSummary
     */
    omit?: SessionSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSummaryInclude<ExtArgs> | null
    /**
     * Filter, which SessionSummary to fetch.
     */
    where?: SessionSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionSummaries to fetch.
     */
    orderBy?: SessionSummaryOrderByWithRelationInput | SessionSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionSummaries.
     */
    cursor?: SessionSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionSummaries.
     */
    distinct?: SessionSummaryScalarFieldEnum | SessionSummaryScalarFieldEnum[]
  }

  /**
   * SessionSummary findFirstOrThrow
   */
  export type SessionSummaryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSummary
     */
    select?: SessionSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSummary
     */
    omit?: SessionSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSummaryInclude<ExtArgs> | null
    /**
     * Filter, which SessionSummary to fetch.
     */
    where?: SessionSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionSummaries to fetch.
     */
    orderBy?: SessionSummaryOrderByWithRelationInput | SessionSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionSummaries.
     */
    cursor?: SessionSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionSummaries.
     */
    distinct?: SessionSummaryScalarFieldEnum | SessionSummaryScalarFieldEnum[]
  }

  /**
   * SessionSummary findMany
   */
  export type SessionSummaryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSummary
     */
    select?: SessionSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSummary
     */
    omit?: SessionSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSummaryInclude<ExtArgs> | null
    /**
     * Filter, which SessionSummaries to fetch.
     */
    where?: SessionSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionSummaries to fetch.
     */
    orderBy?: SessionSummaryOrderByWithRelationInput | SessionSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SessionSummaries.
     */
    cursor?: SessionSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionSummaries.
     */
    skip?: number
    distinct?: SessionSummaryScalarFieldEnum | SessionSummaryScalarFieldEnum[]
  }

  /**
   * SessionSummary create
   */
  export type SessionSummaryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSummary
     */
    select?: SessionSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSummary
     */
    omit?: SessionSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSummaryInclude<ExtArgs> | null
    /**
     * The data needed to create a SessionSummary.
     */
    data: XOR<SessionSummaryCreateInput, SessionSummaryUncheckedCreateInput>
  }

  /**
   * SessionSummary createMany
   */
  export type SessionSummaryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SessionSummaries.
     */
    data: SessionSummaryCreateManyInput | SessionSummaryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SessionSummary createManyAndReturn
   */
  export type SessionSummaryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSummary
     */
    select?: SessionSummarySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSummary
     */
    omit?: SessionSummaryOmit<ExtArgs> | null
    /**
     * The data used to create many SessionSummaries.
     */
    data: SessionSummaryCreateManyInput | SessionSummaryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSummaryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SessionSummary update
   */
  export type SessionSummaryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSummary
     */
    select?: SessionSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSummary
     */
    omit?: SessionSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSummaryInclude<ExtArgs> | null
    /**
     * The data needed to update a SessionSummary.
     */
    data: XOR<SessionSummaryUpdateInput, SessionSummaryUncheckedUpdateInput>
    /**
     * Choose, which SessionSummary to update.
     */
    where: SessionSummaryWhereUniqueInput
  }

  /**
   * SessionSummary updateMany
   */
  export type SessionSummaryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SessionSummaries.
     */
    data: XOR<SessionSummaryUpdateManyMutationInput, SessionSummaryUncheckedUpdateManyInput>
    /**
     * Filter which SessionSummaries to update
     */
    where?: SessionSummaryWhereInput
    /**
     * Limit how many SessionSummaries to update.
     */
    limit?: number
  }

  /**
   * SessionSummary updateManyAndReturn
   */
  export type SessionSummaryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSummary
     */
    select?: SessionSummarySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSummary
     */
    omit?: SessionSummaryOmit<ExtArgs> | null
    /**
     * The data used to update SessionSummaries.
     */
    data: XOR<SessionSummaryUpdateManyMutationInput, SessionSummaryUncheckedUpdateManyInput>
    /**
     * Filter which SessionSummaries to update
     */
    where?: SessionSummaryWhereInput
    /**
     * Limit how many SessionSummaries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSummaryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SessionSummary upsert
   */
  export type SessionSummaryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSummary
     */
    select?: SessionSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSummary
     */
    omit?: SessionSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSummaryInclude<ExtArgs> | null
    /**
     * The filter to search for the SessionSummary to update in case it exists.
     */
    where: SessionSummaryWhereUniqueInput
    /**
     * In case the SessionSummary found by the `where` argument doesn't exist, create a new SessionSummary with this data.
     */
    create: XOR<SessionSummaryCreateInput, SessionSummaryUncheckedCreateInput>
    /**
     * In case the SessionSummary was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionSummaryUpdateInput, SessionSummaryUncheckedUpdateInput>
  }

  /**
   * SessionSummary delete
   */
  export type SessionSummaryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSummary
     */
    select?: SessionSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSummary
     */
    omit?: SessionSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSummaryInclude<ExtArgs> | null
    /**
     * Filter which SessionSummary to delete.
     */
    where: SessionSummaryWhereUniqueInput
  }

  /**
   * SessionSummary deleteMany
   */
  export type SessionSummaryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionSummaries to delete
     */
    where?: SessionSummaryWhereInput
    /**
     * Limit how many SessionSummaries to delete.
     */
    limit?: number
  }

  /**
   * SessionSummary without action
   */
  export type SessionSummaryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSummary
     */
    select?: SessionSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSummary
     */
    omit?: SessionSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSummaryInclude<ExtArgs> | null
  }


  /**
   * Model KnowledgeBase
   */

  export type AggregateKnowledgeBase = {
    _count: KnowledgeBaseCountAggregateOutputType | null
    _avg: KnowledgeBaseAvgAggregateOutputType | null
    _sum: KnowledgeBaseSumAggregateOutputType | null
    _min: KnowledgeBaseMinAggregateOutputType | null
    _max: KnowledgeBaseMaxAggregateOutputType | null
  }

  export type KnowledgeBaseAvgAggregateOutputType = {
    downloadCount: number | null
    fileSize: number | null
    views: number | null
  }

  export type KnowledgeBaseSumAggregateOutputType = {
    downloadCount: number | null
    fileSize: number | null
    views: number | null
  }

  export type KnowledgeBaseMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    summary: string | null
    category: $Enums.KnowledgeCategory | null
    subCategory: string | null
    fileType: string | null
    fileUrl: string | null
    isActive: boolean | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    downloadCount: number | null
    fileSize: number | null
    isProcessed: boolean | null
    views: number | null
  }

  export type KnowledgeBaseMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    summary: string | null
    category: $Enums.KnowledgeCategory | null
    subCategory: string | null
    fileType: string | null
    fileUrl: string | null
    isActive: boolean | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    downloadCount: number | null
    fileSize: number | null
    isProcessed: boolean | null
    views: number | null
  }

  export type KnowledgeBaseCountAggregateOutputType = {
    id: number
    title: number
    content: number
    summary: number
    category: number
    subCategory: number
    fileType: number
    fileUrl: number
    isActive: number
    createdById: number
    createdAt: number
    updatedAt: number
    downloadCount: number
    embeddings: number
    fileSize: number
    isProcessed: number
    views: number
    _all: number
  }


  export type KnowledgeBaseAvgAggregateInputType = {
    downloadCount?: true
    fileSize?: true
    views?: true
  }

  export type KnowledgeBaseSumAggregateInputType = {
    downloadCount?: true
    fileSize?: true
    views?: true
  }

  export type KnowledgeBaseMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    summary?: true
    category?: true
    subCategory?: true
    fileType?: true
    fileUrl?: true
    isActive?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    downloadCount?: true
    fileSize?: true
    isProcessed?: true
    views?: true
  }

  export type KnowledgeBaseMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    summary?: true
    category?: true
    subCategory?: true
    fileType?: true
    fileUrl?: true
    isActive?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    downloadCount?: true
    fileSize?: true
    isProcessed?: true
    views?: true
  }

  export type KnowledgeBaseCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    summary?: true
    category?: true
    subCategory?: true
    fileType?: true
    fileUrl?: true
    isActive?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    downloadCount?: true
    embeddings?: true
    fileSize?: true
    isProcessed?: true
    views?: true
    _all?: true
  }

  export type KnowledgeBaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KnowledgeBase to aggregate.
     */
    where?: KnowledgeBaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnowledgeBases to fetch.
     */
    orderBy?: KnowledgeBaseOrderByWithRelationInput | KnowledgeBaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KnowledgeBaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnowledgeBases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnowledgeBases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KnowledgeBases
    **/
    _count?: true | KnowledgeBaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KnowledgeBaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KnowledgeBaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KnowledgeBaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KnowledgeBaseMaxAggregateInputType
  }

  export type GetKnowledgeBaseAggregateType<T extends KnowledgeBaseAggregateArgs> = {
        [P in keyof T & keyof AggregateKnowledgeBase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKnowledgeBase[P]>
      : GetScalarType<T[P], AggregateKnowledgeBase[P]>
  }




  export type KnowledgeBaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KnowledgeBaseWhereInput
    orderBy?: KnowledgeBaseOrderByWithAggregationInput | KnowledgeBaseOrderByWithAggregationInput[]
    by: KnowledgeBaseScalarFieldEnum[] | KnowledgeBaseScalarFieldEnum
    having?: KnowledgeBaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KnowledgeBaseCountAggregateInputType | true
    _avg?: KnowledgeBaseAvgAggregateInputType
    _sum?: KnowledgeBaseSumAggregateInputType
    _min?: KnowledgeBaseMinAggregateInputType
    _max?: KnowledgeBaseMaxAggregateInputType
  }

  export type KnowledgeBaseGroupByOutputType = {
    id: string
    title: string
    content: string
    summary: string | null
    category: $Enums.KnowledgeCategory
    subCategory: string | null
    fileType: string | null
    fileUrl: string | null
    isActive: boolean
    createdById: string
    createdAt: Date
    updatedAt: Date
    downloadCount: number
    embeddings: JsonValue | null
    fileSize: number | null
    isProcessed: boolean
    views: number
    _count: KnowledgeBaseCountAggregateOutputType | null
    _avg: KnowledgeBaseAvgAggregateOutputType | null
    _sum: KnowledgeBaseSumAggregateOutputType | null
    _min: KnowledgeBaseMinAggregateOutputType | null
    _max: KnowledgeBaseMaxAggregateOutputType | null
  }

  type GetKnowledgeBaseGroupByPayload<T extends KnowledgeBaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KnowledgeBaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KnowledgeBaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KnowledgeBaseGroupByOutputType[P]>
            : GetScalarType<T[P], KnowledgeBaseGroupByOutputType[P]>
        }
      >
    >


  export type KnowledgeBaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    summary?: boolean
    category?: boolean
    subCategory?: boolean
    fileType?: boolean
    fileUrl?: boolean
    isActive?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    downloadCount?: boolean
    embeddings?: boolean
    fileSize?: boolean
    isProcessed?: boolean
    views?: boolean
    chunks?: boolean | KnowledgeBase$chunksArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    tags?: boolean | KnowledgeBase$tagsArgs<ExtArgs>
    _count?: boolean | KnowledgeBaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["knowledgeBase"]>

  export type KnowledgeBaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    summary?: boolean
    category?: boolean
    subCategory?: boolean
    fileType?: boolean
    fileUrl?: boolean
    isActive?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    downloadCount?: boolean
    embeddings?: boolean
    fileSize?: boolean
    isProcessed?: boolean
    views?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["knowledgeBase"]>

  export type KnowledgeBaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    summary?: boolean
    category?: boolean
    subCategory?: boolean
    fileType?: boolean
    fileUrl?: boolean
    isActive?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    downloadCount?: boolean
    embeddings?: boolean
    fileSize?: boolean
    isProcessed?: boolean
    views?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["knowledgeBase"]>

  export type KnowledgeBaseSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    summary?: boolean
    category?: boolean
    subCategory?: boolean
    fileType?: boolean
    fileUrl?: boolean
    isActive?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    downloadCount?: boolean
    embeddings?: boolean
    fileSize?: boolean
    isProcessed?: boolean
    views?: boolean
  }

  export type KnowledgeBaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "content" | "summary" | "category" | "subCategory" | "fileType" | "fileUrl" | "isActive" | "createdById" | "createdAt" | "updatedAt" | "downloadCount" | "embeddings" | "fileSize" | "isProcessed" | "views", ExtArgs["result"]["knowledgeBase"]>
  export type KnowledgeBaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chunks?: boolean | KnowledgeBase$chunksArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    tags?: boolean | KnowledgeBase$tagsArgs<ExtArgs>
    _count?: boolean | KnowledgeBaseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type KnowledgeBaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type KnowledgeBaseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $KnowledgeBasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KnowledgeBase"
    objects: {
      chunks: Prisma.$DocumentChunkPayload<ExtArgs>[]
      createdBy: Prisma.$UserPayload<ExtArgs>
      tags: Prisma.$TagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      content: string
      summary: string | null
      category: $Enums.KnowledgeCategory
      subCategory: string | null
      fileType: string | null
      fileUrl: string | null
      isActive: boolean
      createdById: string
      createdAt: Date
      updatedAt: Date
      downloadCount: number
      embeddings: Prisma.JsonValue | null
      fileSize: number | null
      isProcessed: boolean
      views: number
    }, ExtArgs["result"]["knowledgeBase"]>
    composites: {}
  }

  type KnowledgeBaseGetPayload<S extends boolean | null | undefined | KnowledgeBaseDefaultArgs> = $Result.GetResult<Prisma.$KnowledgeBasePayload, S>

  type KnowledgeBaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KnowledgeBaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KnowledgeBaseCountAggregateInputType | true
    }

  export interface KnowledgeBaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KnowledgeBase'], meta: { name: 'KnowledgeBase' } }
    /**
     * Find zero or one KnowledgeBase that matches the filter.
     * @param {KnowledgeBaseFindUniqueArgs} args - Arguments to find a KnowledgeBase
     * @example
     * // Get one KnowledgeBase
     * const knowledgeBase = await prisma.knowledgeBase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KnowledgeBaseFindUniqueArgs>(args: SelectSubset<T, KnowledgeBaseFindUniqueArgs<ExtArgs>>): Prisma__KnowledgeBaseClient<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KnowledgeBase that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KnowledgeBaseFindUniqueOrThrowArgs} args - Arguments to find a KnowledgeBase
     * @example
     * // Get one KnowledgeBase
     * const knowledgeBase = await prisma.knowledgeBase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KnowledgeBaseFindUniqueOrThrowArgs>(args: SelectSubset<T, KnowledgeBaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KnowledgeBaseClient<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KnowledgeBase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeBaseFindFirstArgs} args - Arguments to find a KnowledgeBase
     * @example
     * // Get one KnowledgeBase
     * const knowledgeBase = await prisma.knowledgeBase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KnowledgeBaseFindFirstArgs>(args?: SelectSubset<T, KnowledgeBaseFindFirstArgs<ExtArgs>>): Prisma__KnowledgeBaseClient<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KnowledgeBase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeBaseFindFirstOrThrowArgs} args - Arguments to find a KnowledgeBase
     * @example
     * // Get one KnowledgeBase
     * const knowledgeBase = await prisma.knowledgeBase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KnowledgeBaseFindFirstOrThrowArgs>(args?: SelectSubset<T, KnowledgeBaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__KnowledgeBaseClient<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KnowledgeBases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeBaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KnowledgeBases
     * const knowledgeBases = await prisma.knowledgeBase.findMany()
     * 
     * // Get first 10 KnowledgeBases
     * const knowledgeBases = await prisma.knowledgeBase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const knowledgeBaseWithIdOnly = await prisma.knowledgeBase.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KnowledgeBaseFindManyArgs>(args?: SelectSubset<T, KnowledgeBaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KnowledgeBase.
     * @param {KnowledgeBaseCreateArgs} args - Arguments to create a KnowledgeBase.
     * @example
     * // Create one KnowledgeBase
     * const KnowledgeBase = await prisma.knowledgeBase.create({
     *   data: {
     *     // ... data to create a KnowledgeBase
     *   }
     * })
     * 
     */
    create<T extends KnowledgeBaseCreateArgs>(args: SelectSubset<T, KnowledgeBaseCreateArgs<ExtArgs>>): Prisma__KnowledgeBaseClient<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KnowledgeBases.
     * @param {KnowledgeBaseCreateManyArgs} args - Arguments to create many KnowledgeBases.
     * @example
     * // Create many KnowledgeBases
     * const knowledgeBase = await prisma.knowledgeBase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KnowledgeBaseCreateManyArgs>(args?: SelectSubset<T, KnowledgeBaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KnowledgeBases and returns the data saved in the database.
     * @param {KnowledgeBaseCreateManyAndReturnArgs} args - Arguments to create many KnowledgeBases.
     * @example
     * // Create many KnowledgeBases
     * const knowledgeBase = await prisma.knowledgeBase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KnowledgeBases and only return the `id`
     * const knowledgeBaseWithIdOnly = await prisma.knowledgeBase.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KnowledgeBaseCreateManyAndReturnArgs>(args?: SelectSubset<T, KnowledgeBaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KnowledgeBase.
     * @param {KnowledgeBaseDeleteArgs} args - Arguments to delete one KnowledgeBase.
     * @example
     * // Delete one KnowledgeBase
     * const KnowledgeBase = await prisma.knowledgeBase.delete({
     *   where: {
     *     // ... filter to delete one KnowledgeBase
     *   }
     * })
     * 
     */
    delete<T extends KnowledgeBaseDeleteArgs>(args: SelectSubset<T, KnowledgeBaseDeleteArgs<ExtArgs>>): Prisma__KnowledgeBaseClient<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KnowledgeBase.
     * @param {KnowledgeBaseUpdateArgs} args - Arguments to update one KnowledgeBase.
     * @example
     * // Update one KnowledgeBase
     * const knowledgeBase = await prisma.knowledgeBase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KnowledgeBaseUpdateArgs>(args: SelectSubset<T, KnowledgeBaseUpdateArgs<ExtArgs>>): Prisma__KnowledgeBaseClient<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KnowledgeBases.
     * @param {KnowledgeBaseDeleteManyArgs} args - Arguments to filter KnowledgeBases to delete.
     * @example
     * // Delete a few KnowledgeBases
     * const { count } = await prisma.knowledgeBase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KnowledgeBaseDeleteManyArgs>(args?: SelectSubset<T, KnowledgeBaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KnowledgeBases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeBaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KnowledgeBases
     * const knowledgeBase = await prisma.knowledgeBase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KnowledgeBaseUpdateManyArgs>(args: SelectSubset<T, KnowledgeBaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KnowledgeBases and returns the data updated in the database.
     * @param {KnowledgeBaseUpdateManyAndReturnArgs} args - Arguments to update many KnowledgeBases.
     * @example
     * // Update many KnowledgeBases
     * const knowledgeBase = await prisma.knowledgeBase.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KnowledgeBases and only return the `id`
     * const knowledgeBaseWithIdOnly = await prisma.knowledgeBase.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KnowledgeBaseUpdateManyAndReturnArgs>(args: SelectSubset<T, KnowledgeBaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KnowledgeBase.
     * @param {KnowledgeBaseUpsertArgs} args - Arguments to update or create a KnowledgeBase.
     * @example
     * // Update or create a KnowledgeBase
     * const knowledgeBase = await prisma.knowledgeBase.upsert({
     *   create: {
     *     // ... data to create a KnowledgeBase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KnowledgeBase we want to update
     *   }
     * })
     */
    upsert<T extends KnowledgeBaseUpsertArgs>(args: SelectSubset<T, KnowledgeBaseUpsertArgs<ExtArgs>>): Prisma__KnowledgeBaseClient<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KnowledgeBases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeBaseCountArgs} args - Arguments to filter KnowledgeBases to count.
     * @example
     * // Count the number of KnowledgeBases
     * const count = await prisma.knowledgeBase.count({
     *   where: {
     *     // ... the filter for the KnowledgeBases we want to count
     *   }
     * })
    **/
    count<T extends KnowledgeBaseCountArgs>(
      args?: Subset<T, KnowledgeBaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KnowledgeBaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KnowledgeBase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeBaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KnowledgeBaseAggregateArgs>(args: Subset<T, KnowledgeBaseAggregateArgs>): Prisma.PrismaPromise<GetKnowledgeBaseAggregateType<T>>

    /**
     * Group by KnowledgeBase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeBaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KnowledgeBaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KnowledgeBaseGroupByArgs['orderBy'] }
        : { orderBy?: KnowledgeBaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KnowledgeBaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKnowledgeBaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KnowledgeBase model
   */
  readonly fields: KnowledgeBaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KnowledgeBase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KnowledgeBaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chunks<T extends KnowledgeBase$chunksArgs<ExtArgs> = {}>(args?: Subset<T, KnowledgeBase$chunksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tags<T extends KnowledgeBase$tagsArgs<ExtArgs> = {}>(args?: Subset<T, KnowledgeBase$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KnowledgeBase model
   */
  interface KnowledgeBaseFieldRefs {
    readonly id: FieldRef<"KnowledgeBase", 'String'>
    readonly title: FieldRef<"KnowledgeBase", 'String'>
    readonly content: FieldRef<"KnowledgeBase", 'String'>
    readonly summary: FieldRef<"KnowledgeBase", 'String'>
    readonly category: FieldRef<"KnowledgeBase", 'KnowledgeCategory'>
    readonly subCategory: FieldRef<"KnowledgeBase", 'String'>
    readonly fileType: FieldRef<"KnowledgeBase", 'String'>
    readonly fileUrl: FieldRef<"KnowledgeBase", 'String'>
    readonly isActive: FieldRef<"KnowledgeBase", 'Boolean'>
    readonly createdById: FieldRef<"KnowledgeBase", 'String'>
    readonly createdAt: FieldRef<"KnowledgeBase", 'DateTime'>
    readonly updatedAt: FieldRef<"KnowledgeBase", 'DateTime'>
    readonly downloadCount: FieldRef<"KnowledgeBase", 'Int'>
    readonly embeddings: FieldRef<"KnowledgeBase", 'Json'>
    readonly fileSize: FieldRef<"KnowledgeBase", 'Int'>
    readonly isProcessed: FieldRef<"KnowledgeBase", 'Boolean'>
    readonly views: FieldRef<"KnowledgeBase", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * KnowledgeBase findUnique
   */
  export type KnowledgeBaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeBaseInclude<ExtArgs> | null
    /**
     * Filter, which KnowledgeBase to fetch.
     */
    where: KnowledgeBaseWhereUniqueInput
  }

  /**
   * KnowledgeBase findUniqueOrThrow
   */
  export type KnowledgeBaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeBaseInclude<ExtArgs> | null
    /**
     * Filter, which KnowledgeBase to fetch.
     */
    where: KnowledgeBaseWhereUniqueInput
  }

  /**
   * KnowledgeBase findFirst
   */
  export type KnowledgeBaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeBaseInclude<ExtArgs> | null
    /**
     * Filter, which KnowledgeBase to fetch.
     */
    where?: KnowledgeBaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnowledgeBases to fetch.
     */
    orderBy?: KnowledgeBaseOrderByWithRelationInput | KnowledgeBaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KnowledgeBases.
     */
    cursor?: KnowledgeBaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnowledgeBases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnowledgeBases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KnowledgeBases.
     */
    distinct?: KnowledgeBaseScalarFieldEnum | KnowledgeBaseScalarFieldEnum[]
  }

  /**
   * KnowledgeBase findFirstOrThrow
   */
  export type KnowledgeBaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeBaseInclude<ExtArgs> | null
    /**
     * Filter, which KnowledgeBase to fetch.
     */
    where?: KnowledgeBaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnowledgeBases to fetch.
     */
    orderBy?: KnowledgeBaseOrderByWithRelationInput | KnowledgeBaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KnowledgeBases.
     */
    cursor?: KnowledgeBaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnowledgeBases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnowledgeBases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KnowledgeBases.
     */
    distinct?: KnowledgeBaseScalarFieldEnum | KnowledgeBaseScalarFieldEnum[]
  }

  /**
   * KnowledgeBase findMany
   */
  export type KnowledgeBaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeBaseInclude<ExtArgs> | null
    /**
     * Filter, which KnowledgeBases to fetch.
     */
    where?: KnowledgeBaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnowledgeBases to fetch.
     */
    orderBy?: KnowledgeBaseOrderByWithRelationInput | KnowledgeBaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KnowledgeBases.
     */
    cursor?: KnowledgeBaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnowledgeBases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnowledgeBases.
     */
    skip?: number
    distinct?: KnowledgeBaseScalarFieldEnum | KnowledgeBaseScalarFieldEnum[]
  }

  /**
   * KnowledgeBase create
   */
  export type KnowledgeBaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeBaseInclude<ExtArgs> | null
    /**
     * The data needed to create a KnowledgeBase.
     */
    data: XOR<KnowledgeBaseCreateInput, KnowledgeBaseUncheckedCreateInput>
  }

  /**
   * KnowledgeBase createMany
   */
  export type KnowledgeBaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KnowledgeBases.
     */
    data: KnowledgeBaseCreateManyInput | KnowledgeBaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KnowledgeBase createManyAndReturn
   */
  export type KnowledgeBaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * The data used to create many KnowledgeBases.
     */
    data: KnowledgeBaseCreateManyInput | KnowledgeBaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeBaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * KnowledgeBase update
   */
  export type KnowledgeBaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeBaseInclude<ExtArgs> | null
    /**
     * The data needed to update a KnowledgeBase.
     */
    data: XOR<KnowledgeBaseUpdateInput, KnowledgeBaseUncheckedUpdateInput>
    /**
     * Choose, which KnowledgeBase to update.
     */
    where: KnowledgeBaseWhereUniqueInput
  }

  /**
   * KnowledgeBase updateMany
   */
  export type KnowledgeBaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KnowledgeBases.
     */
    data: XOR<KnowledgeBaseUpdateManyMutationInput, KnowledgeBaseUncheckedUpdateManyInput>
    /**
     * Filter which KnowledgeBases to update
     */
    where?: KnowledgeBaseWhereInput
    /**
     * Limit how many KnowledgeBases to update.
     */
    limit?: number
  }

  /**
   * KnowledgeBase updateManyAndReturn
   */
  export type KnowledgeBaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * The data used to update KnowledgeBases.
     */
    data: XOR<KnowledgeBaseUpdateManyMutationInput, KnowledgeBaseUncheckedUpdateManyInput>
    /**
     * Filter which KnowledgeBases to update
     */
    where?: KnowledgeBaseWhereInput
    /**
     * Limit how many KnowledgeBases to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeBaseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * KnowledgeBase upsert
   */
  export type KnowledgeBaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeBaseInclude<ExtArgs> | null
    /**
     * The filter to search for the KnowledgeBase to update in case it exists.
     */
    where: KnowledgeBaseWhereUniqueInput
    /**
     * In case the KnowledgeBase found by the `where` argument doesn't exist, create a new KnowledgeBase with this data.
     */
    create: XOR<KnowledgeBaseCreateInput, KnowledgeBaseUncheckedCreateInput>
    /**
     * In case the KnowledgeBase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KnowledgeBaseUpdateInput, KnowledgeBaseUncheckedUpdateInput>
  }

  /**
   * KnowledgeBase delete
   */
  export type KnowledgeBaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeBaseInclude<ExtArgs> | null
    /**
     * Filter which KnowledgeBase to delete.
     */
    where: KnowledgeBaseWhereUniqueInput
  }

  /**
   * KnowledgeBase deleteMany
   */
  export type KnowledgeBaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KnowledgeBases to delete
     */
    where?: KnowledgeBaseWhereInput
    /**
     * Limit how many KnowledgeBases to delete.
     */
    limit?: number
  }

  /**
   * KnowledgeBase.chunks
   */
  export type KnowledgeBase$chunksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentChunk
     */
    select?: DocumentChunkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentChunk
     */
    omit?: DocumentChunkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentChunkInclude<ExtArgs> | null
    where?: DocumentChunkWhereInput
    orderBy?: DocumentChunkOrderByWithRelationInput | DocumentChunkOrderByWithRelationInput[]
    cursor?: DocumentChunkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentChunkScalarFieldEnum | DocumentChunkScalarFieldEnum[]
  }

  /**
   * KnowledgeBase.tags
   */
  export type KnowledgeBase$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    where?: TagWhereInput
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    cursor?: TagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * KnowledgeBase without action
   */
  export type KnowledgeBaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeBaseInclude<ExtArgs> | null
  }


  /**
   * Model DocumentChunk
   */

  export type AggregateDocumentChunk = {
    _count: DocumentChunkCountAggregateOutputType | null
    _avg: DocumentChunkAvgAggregateOutputType | null
    _sum: DocumentChunkSumAggregateOutputType | null
    _min: DocumentChunkMinAggregateOutputType | null
    _max: DocumentChunkMaxAggregateOutputType | null
  }

  export type DocumentChunkAvgAggregateOutputType = {
    chunkIndex: number | null
  }

  export type DocumentChunkSumAggregateOutputType = {
    chunkIndex: number | null
  }

  export type DocumentChunkMinAggregateOutputType = {
    id: string | null
    knowledgeBaseId: string | null
    content: string | null
    chunkIndex: number | null
    createdAt: Date | null
  }

  export type DocumentChunkMaxAggregateOutputType = {
    id: string | null
    knowledgeBaseId: string | null
    content: string | null
    chunkIndex: number | null
    createdAt: Date | null
  }

  export type DocumentChunkCountAggregateOutputType = {
    id: number
    knowledgeBaseId: number
    content: number
    chunkIndex: number
    embeddings: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type DocumentChunkAvgAggregateInputType = {
    chunkIndex?: true
  }

  export type DocumentChunkSumAggregateInputType = {
    chunkIndex?: true
  }

  export type DocumentChunkMinAggregateInputType = {
    id?: true
    knowledgeBaseId?: true
    content?: true
    chunkIndex?: true
    createdAt?: true
  }

  export type DocumentChunkMaxAggregateInputType = {
    id?: true
    knowledgeBaseId?: true
    content?: true
    chunkIndex?: true
    createdAt?: true
  }

  export type DocumentChunkCountAggregateInputType = {
    id?: true
    knowledgeBaseId?: true
    content?: true
    chunkIndex?: true
    embeddings?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type DocumentChunkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentChunk to aggregate.
     */
    where?: DocumentChunkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentChunks to fetch.
     */
    orderBy?: DocumentChunkOrderByWithRelationInput | DocumentChunkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentChunkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentChunks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentChunks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentChunks
    **/
    _count?: true | DocumentChunkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentChunkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentChunkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentChunkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentChunkMaxAggregateInputType
  }

  export type GetDocumentChunkAggregateType<T extends DocumentChunkAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentChunk]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentChunk[P]>
      : GetScalarType<T[P], AggregateDocumentChunk[P]>
  }




  export type DocumentChunkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentChunkWhereInput
    orderBy?: DocumentChunkOrderByWithAggregationInput | DocumentChunkOrderByWithAggregationInput[]
    by: DocumentChunkScalarFieldEnum[] | DocumentChunkScalarFieldEnum
    having?: DocumentChunkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentChunkCountAggregateInputType | true
    _avg?: DocumentChunkAvgAggregateInputType
    _sum?: DocumentChunkSumAggregateInputType
    _min?: DocumentChunkMinAggregateInputType
    _max?: DocumentChunkMaxAggregateInputType
  }

  export type DocumentChunkGroupByOutputType = {
    id: string
    knowledgeBaseId: string
    content: string
    chunkIndex: number
    embeddings: JsonValue | null
    metadata: JsonValue | null
    createdAt: Date
    _count: DocumentChunkCountAggregateOutputType | null
    _avg: DocumentChunkAvgAggregateOutputType | null
    _sum: DocumentChunkSumAggregateOutputType | null
    _min: DocumentChunkMinAggregateOutputType | null
    _max: DocumentChunkMaxAggregateOutputType | null
  }

  type GetDocumentChunkGroupByPayload<T extends DocumentChunkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentChunkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentChunkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentChunkGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentChunkGroupByOutputType[P]>
        }
      >
    >


  export type DocumentChunkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    knowledgeBaseId?: boolean
    content?: boolean
    chunkIndex?: boolean
    embeddings?: boolean
    metadata?: boolean
    createdAt?: boolean
    knowledgeBase?: boolean | KnowledgeBaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentChunk"]>

  export type DocumentChunkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    knowledgeBaseId?: boolean
    content?: boolean
    chunkIndex?: boolean
    embeddings?: boolean
    metadata?: boolean
    createdAt?: boolean
    knowledgeBase?: boolean | KnowledgeBaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentChunk"]>

  export type DocumentChunkSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    knowledgeBaseId?: boolean
    content?: boolean
    chunkIndex?: boolean
    embeddings?: boolean
    metadata?: boolean
    createdAt?: boolean
    knowledgeBase?: boolean | KnowledgeBaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentChunk"]>

  export type DocumentChunkSelectScalar = {
    id?: boolean
    knowledgeBaseId?: boolean
    content?: boolean
    chunkIndex?: boolean
    embeddings?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type DocumentChunkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "knowledgeBaseId" | "content" | "chunkIndex" | "embeddings" | "metadata" | "createdAt", ExtArgs["result"]["documentChunk"]>
  export type DocumentChunkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    knowledgeBase?: boolean | KnowledgeBaseDefaultArgs<ExtArgs>
  }
  export type DocumentChunkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    knowledgeBase?: boolean | KnowledgeBaseDefaultArgs<ExtArgs>
  }
  export type DocumentChunkIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    knowledgeBase?: boolean | KnowledgeBaseDefaultArgs<ExtArgs>
  }

  export type $DocumentChunkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentChunk"
    objects: {
      knowledgeBase: Prisma.$KnowledgeBasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      knowledgeBaseId: string
      content: string
      chunkIndex: number
      embeddings: Prisma.JsonValue | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["documentChunk"]>
    composites: {}
  }

  type DocumentChunkGetPayload<S extends boolean | null | undefined | DocumentChunkDefaultArgs> = $Result.GetResult<Prisma.$DocumentChunkPayload, S>

  type DocumentChunkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentChunkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentChunkCountAggregateInputType | true
    }

  export interface DocumentChunkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentChunk'], meta: { name: 'DocumentChunk' } }
    /**
     * Find zero or one DocumentChunk that matches the filter.
     * @param {DocumentChunkFindUniqueArgs} args - Arguments to find a DocumentChunk
     * @example
     * // Get one DocumentChunk
     * const documentChunk = await prisma.documentChunk.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentChunkFindUniqueArgs>(args: SelectSubset<T, DocumentChunkFindUniqueArgs<ExtArgs>>): Prisma__DocumentChunkClient<$Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DocumentChunk that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentChunkFindUniqueOrThrowArgs} args - Arguments to find a DocumentChunk
     * @example
     * // Get one DocumentChunk
     * const documentChunk = await prisma.documentChunk.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentChunkFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentChunkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentChunkClient<$Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentChunk that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentChunkFindFirstArgs} args - Arguments to find a DocumentChunk
     * @example
     * // Get one DocumentChunk
     * const documentChunk = await prisma.documentChunk.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentChunkFindFirstArgs>(args?: SelectSubset<T, DocumentChunkFindFirstArgs<ExtArgs>>): Prisma__DocumentChunkClient<$Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentChunk that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentChunkFindFirstOrThrowArgs} args - Arguments to find a DocumentChunk
     * @example
     * // Get one DocumentChunk
     * const documentChunk = await prisma.documentChunk.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentChunkFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentChunkFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentChunkClient<$Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DocumentChunks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentChunkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentChunks
     * const documentChunks = await prisma.documentChunk.findMany()
     * 
     * // Get first 10 DocumentChunks
     * const documentChunks = await prisma.documentChunk.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentChunkWithIdOnly = await prisma.documentChunk.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentChunkFindManyArgs>(args?: SelectSubset<T, DocumentChunkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DocumentChunk.
     * @param {DocumentChunkCreateArgs} args - Arguments to create a DocumentChunk.
     * @example
     * // Create one DocumentChunk
     * const DocumentChunk = await prisma.documentChunk.create({
     *   data: {
     *     // ... data to create a DocumentChunk
     *   }
     * })
     * 
     */
    create<T extends DocumentChunkCreateArgs>(args: SelectSubset<T, DocumentChunkCreateArgs<ExtArgs>>): Prisma__DocumentChunkClient<$Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DocumentChunks.
     * @param {DocumentChunkCreateManyArgs} args - Arguments to create many DocumentChunks.
     * @example
     * // Create many DocumentChunks
     * const documentChunk = await prisma.documentChunk.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentChunkCreateManyArgs>(args?: SelectSubset<T, DocumentChunkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentChunks and returns the data saved in the database.
     * @param {DocumentChunkCreateManyAndReturnArgs} args - Arguments to create many DocumentChunks.
     * @example
     * // Create many DocumentChunks
     * const documentChunk = await prisma.documentChunk.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentChunks and only return the `id`
     * const documentChunkWithIdOnly = await prisma.documentChunk.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentChunkCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentChunkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DocumentChunk.
     * @param {DocumentChunkDeleteArgs} args - Arguments to delete one DocumentChunk.
     * @example
     * // Delete one DocumentChunk
     * const DocumentChunk = await prisma.documentChunk.delete({
     *   where: {
     *     // ... filter to delete one DocumentChunk
     *   }
     * })
     * 
     */
    delete<T extends DocumentChunkDeleteArgs>(args: SelectSubset<T, DocumentChunkDeleteArgs<ExtArgs>>): Prisma__DocumentChunkClient<$Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DocumentChunk.
     * @param {DocumentChunkUpdateArgs} args - Arguments to update one DocumentChunk.
     * @example
     * // Update one DocumentChunk
     * const documentChunk = await prisma.documentChunk.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentChunkUpdateArgs>(args: SelectSubset<T, DocumentChunkUpdateArgs<ExtArgs>>): Prisma__DocumentChunkClient<$Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DocumentChunks.
     * @param {DocumentChunkDeleteManyArgs} args - Arguments to filter DocumentChunks to delete.
     * @example
     * // Delete a few DocumentChunks
     * const { count } = await prisma.documentChunk.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentChunkDeleteManyArgs>(args?: SelectSubset<T, DocumentChunkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentChunks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentChunkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentChunks
     * const documentChunk = await prisma.documentChunk.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentChunkUpdateManyArgs>(args: SelectSubset<T, DocumentChunkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentChunks and returns the data updated in the database.
     * @param {DocumentChunkUpdateManyAndReturnArgs} args - Arguments to update many DocumentChunks.
     * @example
     * // Update many DocumentChunks
     * const documentChunk = await prisma.documentChunk.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DocumentChunks and only return the `id`
     * const documentChunkWithIdOnly = await prisma.documentChunk.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentChunkUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentChunkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DocumentChunk.
     * @param {DocumentChunkUpsertArgs} args - Arguments to update or create a DocumentChunk.
     * @example
     * // Update or create a DocumentChunk
     * const documentChunk = await prisma.documentChunk.upsert({
     *   create: {
     *     // ... data to create a DocumentChunk
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentChunk we want to update
     *   }
     * })
     */
    upsert<T extends DocumentChunkUpsertArgs>(args: SelectSubset<T, DocumentChunkUpsertArgs<ExtArgs>>): Prisma__DocumentChunkClient<$Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DocumentChunks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentChunkCountArgs} args - Arguments to filter DocumentChunks to count.
     * @example
     * // Count the number of DocumentChunks
     * const count = await prisma.documentChunk.count({
     *   where: {
     *     // ... the filter for the DocumentChunks we want to count
     *   }
     * })
    **/
    count<T extends DocumentChunkCountArgs>(
      args?: Subset<T, DocumentChunkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentChunkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentChunk.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentChunkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentChunkAggregateArgs>(args: Subset<T, DocumentChunkAggregateArgs>): Prisma.PrismaPromise<GetDocumentChunkAggregateType<T>>

    /**
     * Group by DocumentChunk.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentChunkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentChunkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentChunkGroupByArgs['orderBy'] }
        : { orderBy?: DocumentChunkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentChunkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentChunkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentChunk model
   */
  readonly fields: DocumentChunkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentChunk.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentChunkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    knowledgeBase<T extends KnowledgeBaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KnowledgeBaseDefaultArgs<ExtArgs>>): Prisma__KnowledgeBaseClient<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentChunk model
   */
  interface DocumentChunkFieldRefs {
    readonly id: FieldRef<"DocumentChunk", 'String'>
    readonly knowledgeBaseId: FieldRef<"DocumentChunk", 'String'>
    readonly content: FieldRef<"DocumentChunk", 'String'>
    readonly chunkIndex: FieldRef<"DocumentChunk", 'Int'>
    readonly embeddings: FieldRef<"DocumentChunk", 'Json'>
    readonly metadata: FieldRef<"DocumentChunk", 'Json'>
    readonly createdAt: FieldRef<"DocumentChunk", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DocumentChunk findUnique
   */
  export type DocumentChunkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentChunk
     */
    select?: DocumentChunkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentChunk
     */
    omit?: DocumentChunkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentChunkInclude<ExtArgs> | null
    /**
     * Filter, which DocumentChunk to fetch.
     */
    where: DocumentChunkWhereUniqueInput
  }

  /**
   * DocumentChunk findUniqueOrThrow
   */
  export type DocumentChunkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentChunk
     */
    select?: DocumentChunkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentChunk
     */
    omit?: DocumentChunkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentChunkInclude<ExtArgs> | null
    /**
     * Filter, which DocumentChunk to fetch.
     */
    where: DocumentChunkWhereUniqueInput
  }

  /**
   * DocumentChunk findFirst
   */
  export type DocumentChunkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentChunk
     */
    select?: DocumentChunkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentChunk
     */
    omit?: DocumentChunkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentChunkInclude<ExtArgs> | null
    /**
     * Filter, which DocumentChunk to fetch.
     */
    where?: DocumentChunkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentChunks to fetch.
     */
    orderBy?: DocumentChunkOrderByWithRelationInput | DocumentChunkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentChunks.
     */
    cursor?: DocumentChunkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentChunks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentChunks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentChunks.
     */
    distinct?: DocumentChunkScalarFieldEnum | DocumentChunkScalarFieldEnum[]
  }

  /**
   * DocumentChunk findFirstOrThrow
   */
  export type DocumentChunkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentChunk
     */
    select?: DocumentChunkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentChunk
     */
    omit?: DocumentChunkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentChunkInclude<ExtArgs> | null
    /**
     * Filter, which DocumentChunk to fetch.
     */
    where?: DocumentChunkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentChunks to fetch.
     */
    orderBy?: DocumentChunkOrderByWithRelationInput | DocumentChunkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentChunks.
     */
    cursor?: DocumentChunkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentChunks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentChunks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentChunks.
     */
    distinct?: DocumentChunkScalarFieldEnum | DocumentChunkScalarFieldEnum[]
  }

  /**
   * DocumentChunk findMany
   */
  export type DocumentChunkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentChunk
     */
    select?: DocumentChunkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentChunk
     */
    omit?: DocumentChunkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentChunkInclude<ExtArgs> | null
    /**
     * Filter, which DocumentChunks to fetch.
     */
    where?: DocumentChunkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentChunks to fetch.
     */
    orderBy?: DocumentChunkOrderByWithRelationInput | DocumentChunkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentChunks.
     */
    cursor?: DocumentChunkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentChunks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentChunks.
     */
    skip?: number
    distinct?: DocumentChunkScalarFieldEnum | DocumentChunkScalarFieldEnum[]
  }

  /**
   * DocumentChunk create
   */
  export type DocumentChunkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentChunk
     */
    select?: DocumentChunkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentChunk
     */
    omit?: DocumentChunkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentChunkInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentChunk.
     */
    data: XOR<DocumentChunkCreateInput, DocumentChunkUncheckedCreateInput>
  }

  /**
   * DocumentChunk createMany
   */
  export type DocumentChunkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentChunks.
     */
    data: DocumentChunkCreateManyInput | DocumentChunkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentChunk createManyAndReturn
   */
  export type DocumentChunkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentChunk
     */
    select?: DocumentChunkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentChunk
     */
    omit?: DocumentChunkOmit<ExtArgs> | null
    /**
     * The data used to create many DocumentChunks.
     */
    data: DocumentChunkCreateManyInput | DocumentChunkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentChunkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentChunk update
   */
  export type DocumentChunkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentChunk
     */
    select?: DocumentChunkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentChunk
     */
    omit?: DocumentChunkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentChunkInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentChunk.
     */
    data: XOR<DocumentChunkUpdateInput, DocumentChunkUncheckedUpdateInput>
    /**
     * Choose, which DocumentChunk to update.
     */
    where: DocumentChunkWhereUniqueInput
  }

  /**
   * DocumentChunk updateMany
   */
  export type DocumentChunkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentChunks.
     */
    data: XOR<DocumentChunkUpdateManyMutationInput, DocumentChunkUncheckedUpdateManyInput>
    /**
     * Filter which DocumentChunks to update
     */
    where?: DocumentChunkWhereInput
    /**
     * Limit how many DocumentChunks to update.
     */
    limit?: number
  }

  /**
   * DocumentChunk updateManyAndReturn
   */
  export type DocumentChunkUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentChunk
     */
    select?: DocumentChunkSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentChunk
     */
    omit?: DocumentChunkOmit<ExtArgs> | null
    /**
     * The data used to update DocumentChunks.
     */
    data: XOR<DocumentChunkUpdateManyMutationInput, DocumentChunkUncheckedUpdateManyInput>
    /**
     * Filter which DocumentChunks to update
     */
    where?: DocumentChunkWhereInput
    /**
     * Limit how many DocumentChunks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentChunkIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentChunk upsert
   */
  export type DocumentChunkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentChunk
     */
    select?: DocumentChunkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentChunk
     */
    omit?: DocumentChunkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentChunkInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentChunk to update in case it exists.
     */
    where: DocumentChunkWhereUniqueInput
    /**
     * In case the DocumentChunk found by the `where` argument doesn't exist, create a new DocumentChunk with this data.
     */
    create: XOR<DocumentChunkCreateInput, DocumentChunkUncheckedCreateInput>
    /**
     * In case the DocumentChunk was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentChunkUpdateInput, DocumentChunkUncheckedUpdateInput>
  }

  /**
   * DocumentChunk delete
   */
  export type DocumentChunkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentChunk
     */
    select?: DocumentChunkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentChunk
     */
    omit?: DocumentChunkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentChunkInclude<ExtArgs> | null
    /**
     * Filter which DocumentChunk to delete.
     */
    where: DocumentChunkWhereUniqueInput
  }

  /**
   * DocumentChunk deleteMany
   */
  export type DocumentChunkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentChunks to delete
     */
    where?: DocumentChunkWhereInput
    /**
     * Limit how many DocumentChunks to delete.
     */
    limit?: number
  }

  /**
   * DocumentChunk without action
   */
  export type DocumentChunkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentChunk
     */
    select?: DocumentChunkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentChunk
     */
    omit?: DocumentChunkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentChunkInclude<ExtArgs> | null
  }


  /**
   * Model CulturalStory
   */

  export type AggregateCulturalStory = {
    _count: CulturalStoryCountAggregateOutputType | null
    _min: CulturalStoryMinAggregateOutputType | null
    _max: CulturalStoryMaxAggregateOutputType | null
  }

  export type CulturalStoryMinAggregateOutputType = {
    id: string | null
    title: string | null
    source: $Enums.StorySource | null
    summary: string | null
    fullStory: string | null
    isActive: boolean | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CulturalStoryMaxAggregateOutputType = {
    id: string | null
    title: string | null
    source: $Enums.StorySource | null
    summary: string | null
    fullStory: string | null
    isActive: boolean | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CulturalStoryCountAggregateOutputType = {
    id: number
    title: number
    source: number
    summary: number
    fullStory: number
    themes: number
    applicableFor: number
    moralLessons: number
    tags: number
    isActive: number
    createdById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CulturalStoryMinAggregateInputType = {
    id?: true
    title?: true
    source?: true
    summary?: true
    fullStory?: true
    isActive?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CulturalStoryMaxAggregateInputType = {
    id?: true
    title?: true
    source?: true
    summary?: true
    fullStory?: true
    isActive?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CulturalStoryCountAggregateInputType = {
    id?: true
    title?: true
    source?: true
    summary?: true
    fullStory?: true
    themes?: true
    applicableFor?: true
    moralLessons?: true
    tags?: true
    isActive?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CulturalStoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CulturalStory to aggregate.
     */
    where?: CulturalStoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CulturalStories to fetch.
     */
    orderBy?: CulturalStoryOrderByWithRelationInput | CulturalStoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CulturalStoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CulturalStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CulturalStories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CulturalStories
    **/
    _count?: true | CulturalStoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CulturalStoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CulturalStoryMaxAggregateInputType
  }

  export type GetCulturalStoryAggregateType<T extends CulturalStoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCulturalStory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCulturalStory[P]>
      : GetScalarType<T[P], AggregateCulturalStory[P]>
  }




  export type CulturalStoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CulturalStoryWhereInput
    orderBy?: CulturalStoryOrderByWithAggregationInput | CulturalStoryOrderByWithAggregationInput[]
    by: CulturalStoryScalarFieldEnum[] | CulturalStoryScalarFieldEnum
    having?: CulturalStoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CulturalStoryCountAggregateInputType | true
    _min?: CulturalStoryMinAggregateInputType
    _max?: CulturalStoryMaxAggregateInputType
  }

  export type CulturalStoryGroupByOutputType = {
    id: string
    title: string
    source: $Enums.StorySource
    summary: string
    fullStory: string
    themes: string[]
    applicableFor: string[]
    moralLessons: string[]
    tags: string[]
    isActive: boolean
    createdById: string
    createdAt: Date
    updatedAt: Date
    _count: CulturalStoryCountAggregateOutputType | null
    _min: CulturalStoryMinAggregateOutputType | null
    _max: CulturalStoryMaxAggregateOutputType | null
  }

  type GetCulturalStoryGroupByPayload<T extends CulturalStoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CulturalStoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CulturalStoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CulturalStoryGroupByOutputType[P]>
            : GetScalarType<T[P], CulturalStoryGroupByOutputType[P]>
        }
      >
    >


  export type CulturalStorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    source?: boolean
    summary?: boolean
    fullStory?: boolean
    themes?: boolean
    applicableFor?: boolean
    moralLessons?: boolean
    tags?: boolean
    isActive?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["culturalStory"]>

  export type CulturalStorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    source?: boolean
    summary?: boolean
    fullStory?: boolean
    themes?: boolean
    applicableFor?: boolean
    moralLessons?: boolean
    tags?: boolean
    isActive?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["culturalStory"]>

  export type CulturalStorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    source?: boolean
    summary?: boolean
    fullStory?: boolean
    themes?: boolean
    applicableFor?: boolean
    moralLessons?: boolean
    tags?: boolean
    isActive?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["culturalStory"]>

  export type CulturalStorySelectScalar = {
    id?: boolean
    title?: boolean
    source?: boolean
    summary?: boolean
    fullStory?: boolean
    themes?: boolean
    applicableFor?: boolean
    moralLessons?: boolean
    tags?: boolean
    isActive?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CulturalStoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "source" | "summary" | "fullStory" | "themes" | "applicableFor" | "moralLessons" | "tags" | "isActive" | "createdById" | "createdAt" | "updatedAt", ExtArgs["result"]["culturalStory"]>
  export type CulturalStoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CulturalStoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CulturalStoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CulturalStoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CulturalStory"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      source: $Enums.StorySource
      summary: string
      fullStory: string
      themes: string[]
      applicableFor: string[]
      moralLessons: string[]
      tags: string[]
      isActive: boolean
      createdById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["culturalStory"]>
    composites: {}
  }

  type CulturalStoryGetPayload<S extends boolean | null | undefined | CulturalStoryDefaultArgs> = $Result.GetResult<Prisma.$CulturalStoryPayload, S>

  type CulturalStoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CulturalStoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CulturalStoryCountAggregateInputType | true
    }

  export interface CulturalStoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CulturalStory'], meta: { name: 'CulturalStory' } }
    /**
     * Find zero or one CulturalStory that matches the filter.
     * @param {CulturalStoryFindUniqueArgs} args - Arguments to find a CulturalStory
     * @example
     * // Get one CulturalStory
     * const culturalStory = await prisma.culturalStory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CulturalStoryFindUniqueArgs>(args: SelectSubset<T, CulturalStoryFindUniqueArgs<ExtArgs>>): Prisma__CulturalStoryClient<$Result.GetResult<Prisma.$CulturalStoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CulturalStory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CulturalStoryFindUniqueOrThrowArgs} args - Arguments to find a CulturalStory
     * @example
     * // Get one CulturalStory
     * const culturalStory = await prisma.culturalStory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CulturalStoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CulturalStoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CulturalStoryClient<$Result.GetResult<Prisma.$CulturalStoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CulturalStory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CulturalStoryFindFirstArgs} args - Arguments to find a CulturalStory
     * @example
     * // Get one CulturalStory
     * const culturalStory = await prisma.culturalStory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CulturalStoryFindFirstArgs>(args?: SelectSubset<T, CulturalStoryFindFirstArgs<ExtArgs>>): Prisma__CulturalStoryClient<$Result.GetResult<Prisma.$CulturalStoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CulturalStory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CulturalStoryFindFirstOrThrowArgs} args - Arguments to find a CulturalStory
     * @example
     * // Get one CulturalStory
     * const culturalStory = await prisma.culturalStory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CulturalStoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CulturalStoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CulturalStoryClient<$Result.GetResult<Prisma.$CulturalStoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CulturalStories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CulturalStoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CulturalStories
     * const culturalStories = await prisma.culturalStory.findMany()
     * 
     * // Get first 10 CulturalStories
     * const culturalStories = await prisma.culturalStory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const culturalStoryWithIdOnly = await prisma.culturalStory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CulturalStoryFindManyArgs>(args?: SelectSubset<T, CulturalStoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CulturalStoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CulturalStory.
     * @param {CulturalStoryCreateArgs} args - Arguments to create a CulturalStory.
     * @example
     * // Create one CulturalStory
     * const CulturalStory = await prisma.culturalStory.create({
     *   data: {
     *     // ... data to create a CulturalStory
     *   }
     * })
     * 
     */
    create<T extends CulturalStoryCreateArgs>(args: SelectSubset<T, CulturalStoryCreateArgs<ExtArgs>>): Prisma__CulturalStoryClient<$Result.GetResult<Prisma.$CulturalStoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CulturalStories.
     * @param {CulturalStoryCreateManyArgs} args - Arguments to create many CulturalStories.
     * @example
     * // Create many CulturalStories
     * const culturalStory = await prisma.culturalStory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CulturalStoryCreateManyArgs>(args?: SelectSubset<T, CulturalStoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CulturalStories and returns the data saved in the database.
     * @param {CulturalStoryCreateManyAndReturnArgs} args - Arguments to create many CulturalStories.
     * @example
     * // Create many CulturalStories
     * const culturalStory = await prisma.culturalStory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CulturalStories and only return the `id`
     * const culturalStoryWithIdOnly = await prisma.culturalStory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CulturalStoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CulturalStoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CulturalStoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CulturalStory.
     * @param {CulturalStoryDeleteArgs} args - Arguments to delete one CulturalStory.
     * @example
     * // Delete one CulturalStory
     * const CulturalStory = await prisma.culturalStory.delete({
     *   where: {
     *     // ... filter to delete one CulturalStory
     *   }
     * })
     * 
     */
    delete<T extends CulturalStoryDeleteArgs>(args: SelectSubset<T, CulturalStoryDeleteArgs<ExtArgs>>): Prisma__CulturalStoryClient<$Result.GetResult<Prisma.$CulturalStoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CulturalStory.
     * @param {CulturalStoryUpdateArgs} args - Arguments to update one CulturalStory.
     * @example
     * // Update one CulturalStory
     * const culturalStory = await prisma.culturalStory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CulturalStoryUpdateArgs>(args: SelectSubset<T, CulturalStoryUpdateArgs<ExtArgs>>): Prisma__CulturalStoryClient<$Result.GetResult<Prisma.$CulturalStoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CulturalStories.
     * @param {CulturalStoryDeleteManyArgs} args - Arguments to filter CulturalStories to delete.
     * @example
     * // Delete a few CulturalStories
     * const { count } = await prisma.culturalStory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CulturalStoryDeleteManyArgs>(args?: SelectSubset<T, CulturalStoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CulturalStories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CulturalStoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CulturalStories
     * const culturalStory = await prisma.culturalStory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CulturalStoryUpdateManyArgs>(args: SelectSubset<T, CulturalStoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CulturalStories and returns the data updated in the database.
     * @param {CulturalStoryUpdateManyAndReturnArgs} args - Arguments to update many CulturalStories.
     * @example
     * // Update many CulturalStories
     * const culturalStory = await prisma.culturalStory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CulturalStories and only return the `id`
     * const culturalStoryWithIdOnly = await prisma.culturalStory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CulturalStoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CulturalStoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CulturalStoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CulturalStory.
     * @param {CulturalStoryUpsertArgs} args - Arguments to update or create a CulturalStory.
     * @example
     * // Update or create a CulturalStory
     * const culturalStory = await prisma.culturalStory.upsert({
     *   create: {
     *     // ... data to create a CulturalStory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CulturalStory we want to update
     *   }
     * })
     */
    upsert<T extends CulturalStoryUpsertArgs>(args: SelectSubset<T, CulturalStoryUpsertArgs<ExtArgs>>): Prisma__CulturalStoryClient<$Result.GetResult<Prisma.$CulturalStoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CulturalStories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CulturalStoryCountArgs} args - Arguments to filter CulturalStories to count.
     * @example
     * // Count the number of CulturalStories
     * const count = await prisma.culturalStory.count({
     *   where: {
     *     // ... the filter for the CulturalStories we want to count
     *   }
     * })
    **/
    count<T extends CulturalStoryCountArgs>(
      args?: Subset<T, CulturalStoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CulturalStoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CulturalStory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CulturalStoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CulturalStoryAggregateArgs>(args: Subset<T, CulturalStoryAggregateArgs>): Prisma.PrismaPromise<GetCulturalStoryAggregateType<T>>

    /**
     * Group by CulturalStory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CulturalStoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CulturalStoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CulturalStoryGroupByArgs['orderBy'] }
        : { orderBy?: CulturalStoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CulturalStoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCulturalStoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CulturalStory model
   */
  readonly fields: CulturalStoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CulturalStory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CulturalStoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CulturalStory model
   */
  interface CulturalStoryFieldRefs {
    readonly id: FieldRef<"CulturalStory", 'String'>
    readonly title: FieldRef<"CulturalStory", 'String'>
    readonly source: FieldRef<"CulturalStory", 'StorySource'>
    readonly summary: FieldRef<"CulturalStory", 'String'>
    readonly fullStory: FieldRef<"CulturalStory", 'String'>
    readonly themes: FieldRef<"CulturalStory", 'String[]'>
    readonly applicableFor: FieldRef<"CulturalStory", 'String[]'>
    readonly moralLessons: FieldRef<"CulturalStory", 'String[]'>
    readonly tags: FieldRef<"CulturalStory", 'String[]'>
    readonly isActive: FieldRef<"CulturalStory", 'Boolean'>
    readonly createdById: FieldRef<"CulturalStory", 'String'>
    readonly createdAt: FieldRef<"CulturalStory", 'DateTime'>
    readonly updatedAt: FieldRef<"CulturalStory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CulturalStory findUnique
   */
  export type CulturalStoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalStory
     */
    select?: CulturalStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalStory
     */
    omit?: CulturalStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalStoryInclude<ExtArgs> | null
    /**
     * Filter, which CulturalStory to fetch.
     */
    where: CulturalStoryWhereUniqueInput
  }

  /**
   * CulturalStory findUniqueOrThrow
   */
  export type CulturalStoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalStory
     */
    select?: CulturalStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalStory
     */
    omit?: CulturalStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalStoryInclude<ExtArgs> | null
    /**
     * Filter, which CulturalStory to fetch.
     */
    where: CulturalStoryWhereUniqueInput
  }

  /**
   * CulturalStory findFirst
   */
  export type CulturalStoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalStory
     */
    select?: CulturalStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalStory
     */
    omit?: CulturalStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalStoryInclude<ExtArgs> | null
    /**
     * Filter, which CulturalStory to fetch.
     */
    where?: CulturalStoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CulturalStories to fetch.
     */
    orderBy?: CulturalStoryOrderByWithRelationInput | CulturalStoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CulturalStories.
     */
    cursor?: CulturalStoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CulturalStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CulturalStories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CulturalStories.
     */
    distinct?: CulturalStoryScalarFieldEnum | CulturalStoryScalarFieldEnum[]
  }

  /**
   * CulturalStory findFirstOrThrow
   */
  export type CulturalStoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalStory
     */
    select?: CulturalStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalStory
     */
    omit?: CulturalStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalStoryInclude<ExtArgs> | null
    /**
     * Filter, which CulturalStory to fetch.
     */
    where?: CulturalStoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CulturalStories to fetch.
     */
    orderBy?: CulturalStoryOrderByWithRelationInput | CulturalStoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CulturalStories.
     */
    cursor?: CulturalStoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CulturalStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CulturalStories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CulturalStories.
     */
    distinct?: CulturalStoryScalarFieldEnum | CulturalStoryScalarFieldEnum[]
  }

  /**
   * CulturalStory findMany
   */
  export type CulturalStoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalStory
     */
    select?: CulturalStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalStory
     */
    omit?: CulturalStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalStoryInclude<ExtArgs> | null
    /**
     * Filter, which CulturalStories to fetch.
     */
    where?: CulturalStoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CulturalStories to fetch.
     */
    orderBy?: CulturalStoryOrderByWithRelationInput | CulturalStoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CulturalStories.
     */
    cursor?: CulturalStoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CulturalStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CulturalStories.
     */
    skip?: number
    distinct?: CulturalStoryScalarFieldEnum | CulturalStoryScalarFieldEnum[]
  }

  /**
   * CulturalStory create
   */
  export type CulturalStoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalStory
     */
    select?: CulturalStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalStory
     */
    omit?: CulturalStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalStoryInclude<ExtArgs> | null
    /**
     * The data needed to create a CulturalStory.
     */
    data: XOR<CulturalStoryCreateInput, CulturalStoryUncheckedCreateInput>
  }

  /**
   * CulturalStory createMany
   */
  export type CulturalStoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CulturalStories.
     */
    data: CulturalStoryCreateManyInput | CulturalStoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CulturalStory createManyAndReturn
   */
  export type CulturalStoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalStory
     */
    select?: CulturalStorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalStory
     */
    omit?: CulturalStoryOmit<ExtArgs> | null
    /**
     * The data used to create many CulturalStories.
     */
    data: CulturalStoryCreateManyInput | CulturalStoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalStoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CulturalStory update
   */
  export type CulturalStoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalStory
     */
    select?: CulturalStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalStory
     */
    omit?: CulturalStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalStoryInclude<ExtArgs> | null
    /**
     * The data needed to update a CulturalStory.
     */
    data: XOR<CulturalStoryUpdateInput, CulturalStoryUncheckedUpdateInput>
    /**
     * Choose, which CulturalStory to update.
     */
    where: CulturalStoryWhereUniqueInput
  }

  /**
   * CulturalStory updateMany
   */
  export type CulturalStoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CulturalStories.
     */
    data: XOR<CulturalStoryUpdateManyMutationInput, CulturalStoryUncheckedUpdateManyInput>
    /**
     * Filter which CulturalStories to update
     */
    where?: CulturalStoryWhereInput
    /**
     * Limit how many CulturalStories to update.
     */
    limit?: number
  }

  /**
   * CulturalStory updateManyAndReturn
   */
  export type CulturalStoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalStory
     */
    select?: CulturalStorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalStory
     */
    omit?: CulturalStoryOmit<ExtArgs> | null
    /**
     * The data used to update CulturalStories.
     */
    data: XOR<CulturalStoryUpdateManyMutationInput, CulturalStoryUncheckedUpdateManyInput>
    /**
     * Filter which CulturalStories to update
     */
    where?: CulturalStoryWhereInput
    /**
     * Limit how many CulturalStories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalStoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CulturalStory upsert
   */
  export type CulturalStoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalStory
     */
    select?: CulturalStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalStory
     */
    omit?: CulturalStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalStoryInclude<ExtArgs> | null
    /**
     * The filter to search for the CulturalStory to update in case it exists.
     */
    where: CulturalStoryWhereUniqueInput
    /**
     * In case the CulturalStory found by the `where` argument doesn't exist, create a new CulturalStory with this data.
     */
    create: XOR<CulturalStoryCreateInput, CulturalStoryUncheckedCreateInput>
    /**
     * In case the CulturalStory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CulturalStoryUpdateInput, CulturalStoryUncheckedUpdateInput>
  }

  /**
   * CulturalStory delete
   */
  export type CulturalStoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalStory
     */
    select?: CulturalStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalStory
     */
    omit?: CulturalStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalStoryInclude<ExtArgs> | null
    /**
     * Filter which CulturalStory to delete.
     */
    where: CulturalStoryWhereUniqueInput
  }

  /**
   * CulturalStory deleteMany
   */
  export type CulturalStoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CulturalStories to delete
     */
    where?: CulturalStoryWhereInput
    /**
     * Limit how many CulturalStories to delete.
     */
    limit?: number
  }

  /**
   * CulturalStory without action
   */
  export type CulturalStoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalStory
     */
    select?: CulturalStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalStory
     */
    omit?: CulturalStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalStoryInclude<ExtArgs> | null
  }


  /**
   * Model Concern
   */

  export type AggregateConcern = {
    _count: ConcernCountAggregateOutputType | null
    _min: ConcernMinAggregateOutputType | null
    _max: ConcernMaxAggregateOutputType | null
  }

  export type ConcernMinAggregateOutputType = {
    id: string | null
    childId: string | null
    title: string | null
    description: string | null
    category: $Enums.ConcernCategory | null
    severity: $Enums.Severity | null
    status: $Enums.ConcernStatus | null
    identifiedAt: Date | null
    resolvedAt: Date | null
    resolution: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConcernMaxAggregateOutputType = {
    id: string | null
    childId: string | null
    title: string | null
    description: string | null
    category: $Enums.ConcernCategory | null
    severity: $Enums.Severity | null
    status: $Enums.ConcernStatus | null
    identifiedAt: Date | null
    resolvedAt: Date | null
    resolution: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConcernCountAggregateOutputType = {
    id: number
    childId: number
    title: number
    description: number
    category: number
    severity: number
    status: number
    identifiedAt: number
    resolvedAt: number
    resolution: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConcernMinAggregateInputType = {
    id?: true
    childId?: true
    title?: true
    description?: true
    category?: true
    severity?: true
    status?: true
    identifiedAt?: true
    resolvedAt?: true
    resolution?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConcernMaxAggregateInputType = {
    id?: true
    childId?: true
    title?: true
    description?: true
    category?: true
    severity?: true
    status?: true
    identifiedAt?: true
    resolvedAt?: true
    resolution?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConcernCountAggregateInputType = {
    id?: true
    childId?: true
    title?: true
    description?: true
    category?: true
    severity?: true
    status?: true
    identifiedAt?: true
    resolvedAt?: true
    resolution?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConcernAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Concern to aggregate.
     */
    where?: ConcernWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Concerns to fetch.
     */
    orderBy?: ConcernOrderByWithRelationInput | ConcernOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConcernWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Concerns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Concerns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Concerns
    **/
    _count?: true | ConcernCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConcernMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConcernMaxAggregateInputType
  }

  export type GetConcernAggregateType<T extends ConcernAggregateArgs> = {
        [P in keyof T & keyof AggregateConcern]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConcern[P]>
      : GetScalarType<T[P], AggregateConcern[P]>
  }




  export type ConcernGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConcernWhereInput
    orderBy?: ConcernOrderByWithAggregationInput | ConcernOrderByWithAggregationInput[]
    by: ConcernScalarFieldEnum[] | ConcernScalarFieldEnum
    having?: ConcernScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConcernCountAggregateInputType | true
    _min?: ConcernMinAggregateInputType
    _max?: ConcernMaxAggregateInputType
  }

  export type ConcernGroupByOutputType = {
    id: string
    childId: string
    title: string
    description: string
    category: $Enums.ConcernCategory
    severity: $Enums.Severity
    status: $Enums.ConcernStatus
    identifiedAt: Date
    resolvedAt: Date | null
    resolution: string | null
    createdAt: Date
    updatedAt: Date
    _count: ConcernCountAggregateOutputType | null
    _min: ConcernMinAggregateOutputType | null
    _max: ConcernMaxAggregateOutputType | null
  }

  type GetConcernGroupByPayload<T extends ConcernGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConcernGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConcernGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConcernGroupByOutputType[P]>
            : GetScalarType<T[P], ConcernGroupByOutputType[P]>
        }
      >
    >


  export type ConcernSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    childId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    severity?: boolean
    status?: boolean
    identifiedAt?: boolean
    resolvedAt?: boolean
    resolution?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["concern"]>

  export type ConcernSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    childId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    severity?: boolean
    status?: boolean
    identifiedAt?: boolean
    resolvedAt?: boolean
    resolution?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["concern"]>

  export type ConcernSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    childId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    severity?: boolean
    status?: boolean
    identifiedAt?: boolean
    resolvedAt?: boolean
    resolution?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["concern"]>

  export type ConcernSelectScalar = {
    id?: boolean
    childId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    severity?: boolean
    status?: boolean
    identifiedAt?: boolean
    resolvedAt?: boolean
    resolution?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ConcernOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "childId" | "title" | "description" | "category" | "severity" | "status" | "identifiedAt" | "resolvedAt" | "resolution" | "createdAt" | "updatedAt", ExtArgs["result"]["concern"]>
  export type ConcernInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }
  export type ConcernIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }
  export type ConcernIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }

  export type $ConcernPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Concern"
    objects: {
      child: Prisma.$ChildPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      childId: string
      title: string
      description: string
      category: $Enums.ConcernCategory
      severity: $Enums.Severity
      status: $Enums.ConcernStatus
      identifiedAt: Date
      resolvedAt: Date | null
      resolution: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["concern"]>
    composites: {}
  }

  type ConcernGetPayload<S extends boolean | null | undefined | ConcernDefaultArgs> = $Result.GetResult<Prisma.$ConcernPayload, S>

  type ConcernCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConcernFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConcernCountAggregateInputType | true
    }

  export interface ConcernDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Concern'], meta: { name: 'Concern' } }
    /**
     * Find zero or one Concern that matches the filter.
     * @param {ConcernFindUniqueArgs} args - Arguments to find a Concern
     * @example
     * // Get one Concern
     * const concern = await prisma.concern.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConcernFindUniqueArgs>(args: SelectSubset<T, ConcernFindUniqueArgs<ExtArgs>>): Prisma__ConcernClient<$Result.GetResult<Prisma.$ConcernPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Concern that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConcernFindUniqueOrThrowArgs} args - Arguments to find a Concern
     * @example
     * // Get one Concern
     * const concern = await prisma.concern.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConcernFindUniqueOrThrowArgs>(args: SelectSubset<T, ConcernFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConcernClient<$Result.GetResult<Prisma.$ConcernPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Concern that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcernFindFirstArgs} args - Arguments to find a Concern
     * @example
     * // Get one Concern
     * const concern = await prisma.concern.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConcernFindFirstArgs>(args?: SelectSubset<T, ConcernFindFirstArgs<ExtArgs>>): Prisma__ConcernClient<$Result.GetResult<Prisma.$ConcernPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Concern that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcernFindFirstOrThrowArgs} args - Arguments to find a Concern
     * @example
     * // Get one Concern
     * const concern = await prisma.concern.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConcernFindFirstOrThrowArgs>(args?: SelectSubset<T, ConcernFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConcernClient<$Result.GetResult<Prisma.$ConcernPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Concerns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcernFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Concerns
     * const concerns = await prisma.concern.findMany()
     * 
     * // Get first 10 Concerns
     * const concerns = await prisma.concern.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const concernWithIdOnly = await prisma.concern.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConcernFindManyArgs>(args?: SelectSubset<T, ConcernFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConcernPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Concern.
     * @param {ConcernCreateArgs} args - Arguments to create a Concern.
     * @example
     * // Create one Concern
     * const Concern = await prisma.concern.create({
     *   data: {
     *     // ... data to create a Concern
     *   }
     * })
     * 
     */
    create<T extends ConcernCreateArgs>(args: SelectSubset<T, ConcernCreateArgs<ExtArgs>>): Prisma__ConcernClient<$Result.GetResult<Prisma.$ConcernPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Concerns.
     * @param {ConcernCreateManyArgs} args - Arguments to create many Concerns.
     * @example
     * // Create many Concerns
     * const concern = await prisma.concern.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConcernCreateManyArgs>(args?: SelectSubset<T, ConcernCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Concerns and returns the data saved in the database.
     * @param {ConcernCreateManyAndReturnArgs} args - Arguments to create many Concerns.
     * @example
     * // Create many Concerns
     * const concern = await prisma.concern.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Concerns and only return the `id`
     * const concernWithIdOnly = await prisma.concern.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConcernCreateManyAndReturnArgs>(args?: SelectSubset<T, ConcernCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConcernPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Concern.
     * @param {ConcernDeleteArgs} args - Arguments to delete one Concern.
     * @example
     * // Delete one Concern
     * const Concern = await prisma.concern.delete({
     *   where: {
     *     // ... filter to delete one Concern
     *   }
     * })
     * 
     */
    delete<T extends ConcernDeleteArgs>(args: SelectSubset<T, ConcernDeleteArgs<ExtArgs>>): Prisma__ConcernClient<$Result.GetResult<Prisma.$ConcernPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Concern.
     * @param {ConcernUpdateArgs} args - Arguments to update one Concern.
     * @example
     * // Update one Concern
     * const concern = await prisma.concern.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConcernUpdateArgs>(args: SelectSubset<T, ConcernUpdateArgs<ExtArgs>>): Prisma__ConcernClient<$Result.GetResult<Prisma.$ConcernPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Concerns.
     * @param {ConcernDeleteManyArgs} args - Arguments to filter Concerns to delete.
     * @example
     * // Delete a few Concerns
     * const { count } = await prisma.concern.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConcernDeleteManyArgs>(args?: SelectSubset<T, ConcernDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Concerns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcernUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Concerns
     * const concern = await prisma.concern.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConcernUpdateManyArgs>(args: SelectSubset<T, ConcernUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Concerns and returns the data updated in the database.
     * @param {ConcernUpdateManyAndReturnArgs} args - Arguments to update many Concerns.
     * @example
     * // Update many Concerns
     * const concern = await prisma.concern.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Concerns and only return the `id`
     * const concernWithIdOnly = await prisma.concern.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConcernUpdateManyAndReturnArgs>(args: SelectSubset<T, ConcernUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConcernPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Concern.
     * @param {ConcernUpsertArgs} args - Arguments to update or create a Concern.
     * @example
     * // Update or create a Concern
     * const concern = await prisma.concern.upsert({
     *   create: {
     *     // ... data to create a Concern
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Concern we want to update
     *   }
     * })
     */
    upsert<T extends ConcernUpsertArgs>(args: SelectSubset<T, ConcernUpsertArgs<ExtArgs>>): Prisma__ConcernClient<$Result.GetResult<Prisma.$ConcernPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Concerns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcernCountArgs} args - Arguments to filter Concerns to count.
     * @example
     * // Count the number of Concerns
     * const count = await prisma.concern.count({
     *   where: {
     *     // ... the filter for the Concerns we want to count
     *   }
     * })
    **/
    count<T extends ConcernCountArgs>(
      args?: Subset<T, ConcernCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConcernCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Concern.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcernAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConcernAggregateArgs>(args: Subset<T, ConcernAggregateArgs>): Prisma.PrismaPromise<GetConcernAggregateType<T>>

    /**
     * Group by Concern.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcernGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConcernGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConcernGroupByArgs['orderBy'] }
        : { orderBy?: ConcernGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConcernGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConcernGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Concern model
   */
  readonly fields: ConcernFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Concern.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConcernClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    child<T extends ChildDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChildDefaultArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Concern model
   */
  interface ConcernFieldRefs {
    readonly id: FieldRef<"Concern", 'String'>
    readonly childId: FieldRef<"Concern", 'String'>
    readonly title: FieldRef<"Concern", 'String'>
    readonly description: FieldRef<"Concern", 'String'>
    readonly category: FieldRef<"Concern", 'ConcernCategory'>
    readonly severity: FieldRef<"Concern", 'Severity'>
    readonly status: FieldRef<"Concern", 'ConcernStatus'>
    readonly identifiedAt: FieldRef<"Concern", 'DateTime'>
    readonly resolvedAt: FieldRef<"Concern", 'DateTime'>
    readonly resolution: FieldRef<"Concern", 'String'>
    readonly createdAt: FieldRef<"Concern", 'DateTime'>
    readonly updatedAt: FieldRef<"Concern", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Concern findUnique
   */
  export type ConcernFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concern
     */
    select?: ConcernSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Concern
     */
    omit?: ConcernOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcernInclude<ExtArgs> | null
    /**
     * Filter, which Concern to fetch.
     */
    where: ConcernWhereUniqueInput
  }

  /**
   * Concern findUniqueOrThrow
   */
  export type ConcernFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concern
     */
    select?: ConcernSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Concern
     */
    omit?: ConcernOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcernInclude<ExtArgs> | null
    /**
     * Filter, which Concern to fetch.
     */
    where: ConcernWhereUniqueInput
  }

  /**
   * Concern findFirst
   */
  export type ConcernFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concern
     */
    select?: ConcernSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Concern
     */
    omit?: ConcernOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcernInclude<ExtArgs> | null
    /**
     * Filter, which Concern to fetch.
     */
    where?: ConcernWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Concerns to fetch.
     */
    orderBy?: ConcernOrderByWithRelationInput | ConcernOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Concerns.
     */
    cursor?: ConcernWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Concerns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Concerns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Concerns.
     */
    distinct?: ConcernScalarFieldEnum | ConcernScalarFieldEnum[]
  }

  /**
   * Concern findFirstOrThrow
   */
  export type ConcernFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concern
     */
    select?: ConcernSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Concern
     */
    omit?: ConcernOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcernInclude<ExtArgs> | null
    /**
     * Filter, which Concern to fetch.
     */
    where?: ConcernWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Concerns to fetch.
     */
    orderBy?: ConcernOrderByWithRelationInput | ConcernOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Concerns.
     */
    cursor?: ConcernWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Concerns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Concerns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Concerns.
     */
    distinct?: ConcernScalarFieldEnum | ConcernScalarFieldEnum[]
  }

  /**
   * Concern findMany
   */
  export type ConcernFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concern
     */
    select?: ConcernSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Concern
     */
    omit?: ConcernOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcernInclude<ExtArgs> | null
    /**
     * Filter, which Concerns to fetch.
     */
    where?: ConcernWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Concerns to fetch.
     */
    orderBy?: ConcernOrderByWithRelationInput | ConcernOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Concerns.
     */
    cursor?: ConcernWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Concerns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Concerns.
     */
    skip?: number
    distinct?: ConcernScalarFieldEnum | ConcernScalarFieldEnum[]
  }

  /**
   * Concern create
   */
  export type ConcernCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concern
     */
    select?: ConcernSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Concern
     */
    omit?: ConcernOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcernInclude<ExtArgs> | null
    /**
     * The data needed to create a Concern.
     */
    data: XOR<ConcernCreateInput, ConcernUncheckedCreateInput>
  }

  /**
   * Concern createMany
   */
  export type ConcernCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Concerns.
     */
    data: ConcernCreateManyInput | ConcernCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Concern createManyAndReturn
   */
  export type ConcernCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concern
     */
    select?: ConcernSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Concern
     */
    omit?: ConcernOmit<ExtArgs> | null
    /**
     * The data used to create many Concerns.
     */
    data: ConcernCreateManyInput | ConcernCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcernIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Concern update
   */
  export type ConcernUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concern
     */
    select?: ConcernSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Concern
     */
    omit?: ConcernOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcernInclude<ExtArgs> | null
    /**
     * The data needed to update a Concern.
     */
    data: XOR<ConcernUpdateInput, ConcernUncheckedUpdateInput>
    /**
     * Choose, which Concern to update.
     */
    where: ConcernWhereUniqueInput
  }

  /**
   * Concern updateMany
   */
  export type ConcernUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Concerns.
     */
    data: XOR<ConcernUpdateManyMutationInput, ConcernUncheckedUpdateManyInput>
    /**
     * Filter which Concerns to update
     */
    where?: ConcernWhereInput
    /**
     * Limit how many Concerns to update.
     */
    limit?: number
  }

  /**
   * Concern updateManyAndReturn
   */
  export type ConcernUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concern
     */
    select?: ConcernSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Concern
     */
    omit?: ConcernOmit<ExtArgs> | null
    /**
     * The data used to update Concerns.
     */
    data: XOR<ConcernUpdateManyMutationInput, ConcernUncheckedUpdateManyInput>
    /**
     * Filter which Concerns to update
     */
    where?: ConcernWhereInput
    /**
     * Limit how many Concerns to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcernIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Concern upsert
   */
  export type ConcernUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concern
     */
    select?: ConcernSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Concern
     */
    omit?: ConcernOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcernInclude<ExtArgs> | null
    /**
     * The filter to search for the Concern to update in case it exists.
     */
    where: ConcernWhereUniqueInput
    /**
     * In case the Concern found by the `where` argument doesn't exist, create a new Concern with this data.
     */
    create: XOR<ConcernCreateInput, ConcernUncheckedCreateInput>
    /**
     * In case the Concern was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConcernUpdateInput, ConcernUncheckedUpdateInput>
  }

  /**
   * Concern delete
   */
  export type ConcernDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concern
     */
    select?: ConcernSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Concern
     */
    omit?: ConcernOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcernInclude<ExtArgs> | null
    /**
     * Filter which Concern to delete.
     */
    where: ConcernWhereUniqueInput
  }

  /**
   * Concern deleteMany
   */
  export type ConcernDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Concerns to delete
     */
    where?: ConcernWhereInput
    /**
     * Limit how many Concerns to delete.
     */
    limit?: number
  }

  /**
   * Concern without action
   */
  export type ConcernDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concern
     */
    select?: ConcernSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Concern
     */
    omit?: ConcernOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcernInclude<ExtArgs> | null
  }


  /**
   * Model ChatMessage
   */

  export type AggregateChatMessage = {
    _count: ChatMessageCountAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  export type ChatMessageMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    userId: string | null
    message: string | null
    response: string | null
    context: string | null
    isSystemMsg: boolean | null
    createdAt: Date | null
  }

  export type ChatMessageMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    userId: string | null
    message: string | null
    response: string | null
    context: string | null
    isSystemMsg: boolean | null
    createdAt: Date | null
  }

  export type ChatMessageCountAggregateOutputType = {
    id: number
    sessionId: number
    userId: number
    message: number
    response: number
    context: number
    isSystemMsg: number
    createdAt: number
    _all: number
  }


  export type ChatMessageMinAggregateInputType = {
    id?: true
    sessionId?: true
    userId?: true
    message?: true
    response?: true
    context?: true
    isSystemMsg?: true
    createdAt?: true
  }

  export type ChatMessageMaxAggregateInputType = {
    id?: true
    sessionId?: true
    userId?: true
    message?: true
    response?: true
    context?: true
    isSystemMsg?: true
    createdAt?: true
  }

  export type ChatMessageCountAggregateInputType = {
    id?: true
    sessionId?: true
    userId?: true
    message?: true
    response?: true
    context?: true
    isSystemMsg?: true
    createdAt?: true
    _all?: true
  }

  export type ChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessage to aggregate.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatMessages
    **/
    _count?: true | ChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMessageMaxAggregateInputType
  }

  export type GetChatMessageAggregateType<T extends ChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatMessage[P]>
      : GetScalarType<T[P], AggregateChatMessage[P]>
  }




  export type ChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithAggregationInput | ChatMessageOrderByWithAggregationInput[]
    by: ChatMessageScalarFieldEnum[] | ChatMessageScalarFieldEnum
    having?: ChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatMessageCountAggregateInputType | true
    _min?: ChatMessageMinAggregateInputType
    _max?: ChatMessageMaxAggregateInputType
  }

  export type ChatMessageGroupByOutputType = {
    id: string
    sessionId: string | null
    userId: string
    message: string
    response: string | null
    context: string | null
    isSystemMsg: boolean
    createdAt: Date
    _count: ChatMessageCountAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  type GetChatMessageGroupByPayload<T extends ChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type ChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    message?: boolean
    response?: boolean
    context?: boolean
    isSystemMsg?: boolean
    createdAt?: boolean
    session?: boolean | ChatMessage$sessionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    message?: boolean
    response?: boolean
    context?: boolean
    isSystemMsg?: boolean
    createdAt?: boolean
    session?: boolean | ChatMessage$sessionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    message?: boolean
    response?: boolean
    context?: boolean
    isSystemMsg?: boolean
    createdAt?: boolean
    session?: boolean | ChatMessage$sessionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectScalar = {
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    message?: boolean
    response?: boolean
    context?: boolean
    isSystemMsg?: boolean
    createdAt?: boolean
  }

  export type ChatMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionId" | "userId" | "message" | "response" | "context" | "isSystemMsg" | "createdAt", ExtArgs["result"]["chatMessage"]>
  export type ChatMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ChatMessage$sessionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ChatMessage$sessionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ChatMessage$sessionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatMessage"
    objects: {
      session: Prisma.$SessionPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string | null
      userId: string
      message: string
      response: string | null
      context: string | null
      isSystemMsg: boolean
      createdAt: Date
    }, ExtArgs["result"]["chatMessage"]>
    composites: {}
  }

  type ChatMessageGetPayload<S extends boolean | null | undefined | ChatMessageDefaultArgs> = $Result.GetResult<Prisma.$ChatMessagePayload, S>

  type ChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatMessageCountAggregateInputType | true
    }

  export interface ChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessage'], meta: { name: 'ChatMessage' } }
    /**
     * Find zero or one ChatMessage that matches the filter.
     * @param {ChatMessageFindUniqueArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatMessageFindUniqueArgs>(args: SelectSubset<T, ChatMessageFindUniqueArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatMessageFindUniqueOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatMessageFindFirstArgs>(args?: SelectSubset<T, ChatMessageFindFirstArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany()
     * 
     * // Get first 10 ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatMessageFindManyArgs>(args?: SelectSubset<T, ChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatMessage.
     * @param {ChatMessageCreateArgs} args - Arguments to create a ChatMessage.
     * @example
     * // Create one ChatMessage
     * const ChatMessage = await prisma.chatMessage.create({
     *   data: {
     *     // ... data to create a ChatMessage
     *   }
     * })
     * 
     */
    create<T extends ChatMessageCreateArgs>(args: SelectSubset<T, ChatMessageCreateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatMessages.
     * @param {ChatMessageCreateManyArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatMessageCreateManyArgs>(args?: SelectSubset<T, ChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatMessages and returns the data saved in the database.
     * @param {ChatMessageCreateManyAndReturnArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatMessage.
     * @param {ChatMessageDeleteArgs} args - Arguments to delete one ChatMessage.
     * @example
     * // Delete one ChatMessage
     * const ChatMessage = await prisma.chatMessage.delete({
     *   where: {
     *     // ... filter to delete one ChatMessage
     *   }
     * })
     * 
     */
    delete<T extends ChatMessageDeleteArgs>(args: SelectSubset<T, ChatMessageDeleteArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatMessage.
     * @param {ChatMessageUpdateArgs} args - Arguments to update one ChatMessage.
     * @example
     * // Update one ChatMessage
     * const chatMessage = await prisma.chatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatMessageUpdateArgs>(args: SelectSubset<T, ChatMessageUpdateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatMessages.
     * @param {ChatMessageDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
     * @example
     * // Delete a few ChatMessages
     * const { count } = await prisma.chatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatMessageDeleteManyArgs>(args?: SelectSubset<T, ChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatMessageUpdateManyArgs>(args: SelectSubset<T, ChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages and returns the data updated in the database.
     * @param {ChatMessageUpdateManyAndReturnArgs} args - Arguments to update many ChatMessages.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatMessage.
     * @param {ChatMessageUpsertArgs} args - Arguments to update or create a ChatMessage.
     * @example
     * // Update or create a ChatMessage
     * const chatMessage = await prisma.chatMessage.upsert({
     *   create: {
     *     // ... data to create a ChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends ChatMessageUpsertArgs>(args: SelectSubset<T, ChatMessageUpsertArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageCountArgs} args - Arguments to filter ChatMessages to count.
     * @example
     * // Count the number of ChatMessages
     * const count = await prisma.chatMessage.count({
     *   where: {
     *     // ... the filter for the ChatMessages we want to count
     *   }
     * })
    **/
    count<T extends ChatMessageCountArgs>(
      args?: Subset<T, ChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatMessageAggregateArgs>(args: Subset<T, ChatMessageAggregateArgs>): Prisma.PrismaPromise<GetChatMessageAggregateType<T>>

    /**
     * Group by ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: ChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatMessage model
   */
  readonly fields: ChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends ChatMessage$sessionArgs<ExtArgs> = {}>(args?: Subset<T, ChatMessage$sessionArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatMessage model
   */
  interface ChatMessageFieldRefs {
    readonly id: FieldRef<"ChatMessage", 'String'>
    readonly sessionId: FieldRef<"ChatMessage", 'String'>
    readonly userId: FieldRef<"ChatMessage", 'String'>
    readonly message: FieldRef<"ChatMessage", 'String'>
    readonly response: FieldRef<"ChatMessage", 'String'>
    readonly context: FieldRef<"ChatMessage", 'String'>
    readonly isSystemMsg: FieldRef<"ChatMessage", 'Boolean'>
    readonly createdAt: FieldRef<"ChatMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatMessage findUnique
   */
  export type ChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findUniqueOrThrow
   */
  export type ChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findFirst
   */
  export type ChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findFirstOrThrow
   */
  export type ChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findMany
   */
  export type ChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage create
   */
  export type ChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatMessage.
     */
    data: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
  }

  /**
   * ChatMessage createMany
   */
  export type ChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatMessage createManyAndReturn
   */
  export type ChatMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage update
   */
  export type ChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatMessage.
     */
    data: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
    /**
     * Choose, which ChatMessage to update.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage updateMany
   */
  export type ChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
  }

  /**
   * ChatMessage updateManyAndReturn
   */
  export type ChatMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage upsert
   */
  export type ChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatMessage to update in case it exists.
     */
    where: ChatMessageWhereUniqueInput
    /**
     * In case the ChatMessage found by the `where` argument doesn't exist, create a new ChatMessage with this data.
     */
    create: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
    /**
     * In case the ChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
  }

  /**
   * ChatMessage delete
   */
  export type ChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter which ChatMessage to delete.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage deleteMany
   */
  export type ChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessages to delete
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to delete.
     */
    limit?: number
  }

  /**
   * ChatMessage.session
   */
  export type ChatMessage$sessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
  }

  /**
   * ChatMessage without action
   */
  export type ChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
  }


  /**
   * Model AiChatConversation
   */

  export type AggregateAiChatConversation = {
    _count: AiChatConversationCountAggregateOutputType | null
    _min: AiChatConversationMinAggregateOutputType | null
    _max: AiChatConversationMaxAggregateOutputType | null
  }

  export type AiChatConversationMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    childId: string | null
    volunteerId: string | null
    conversationName: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AiChatConversationMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    childId: string | null
    volunteerId: string | null
    conversationName: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AiChatConversationCountAggregateOutputType = {
    id: number
    sessionId: number
    childId: number
    volunteerId: number
    conversationName: number
    context: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AiChatConversationMinAggregateInputType = {
    id?: true
    sessionId?: true
    childId?: true
    volunteerId?: true
    conversationName?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AiChatConversationMaxAggregateInputType = {
    id?: true
    sessionId?: true
    childId?: true
    volunteerId?: true
    conversationName?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AiChatConversationCountAggregateInputType = {
    id?: true
    sessionId?: true
    childId?: true
    volunteerId?: true
    conversationName?: true
    context?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AiChatConversationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AiChatConversation to aggregate.
     */
    where?: AiChatConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatConversations to fetch.
     */
    orderBy?: AiChatConversationOrderByWithRelationInput | AiChatConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AiChatConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatConversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatConversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AiChatConversations
    **/
    _count?: true | AiChatConversationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AiChatConversationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AiChatConversationMaxAggregateInputType
  }

  export type GetAiChatConversationAggregateType<T extends AiChatConversationAggregateArgs> = {
        [P in keyof T & keyof AggregateAiChatConversation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAiChatConversation[P]>
      : GetScalarType<T[P], AggregateAiChatConversation[P]>
  }




  export type AiChatConversationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AiChatConversationWhereInput
    orderBy?: AiChatConversationOrderByWithAggregationInput | AiChatConversationOrderByWithAggregationInput[]
    by: AiChatConversationScalarFieldEnum[] | AiChatConversationScalarFieldEnum
    having?: AiChatConversationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AiChatConversationCountAggregateInputType | true
    _min?: AiChatConversationMinAggregateInputType
    _max?: AiChatConversationMaxAggregateInputType
  }

  export type AiChatConversationGroupByOutputType = {
    id: string
    sessionId: string
    childId: string
    volunteerId: string
    conversationName: string | null
    context: JsonValue | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: AiChatConversationCountAggregateOutputType | null
    _min: AiChatConversationMinAggregateOutputType | null
    _max: AiChatConversationMaxAggregateOutputType | null
  }

  type GetAiChatConversationGroupByPayload<T extends AiChatConversationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AiChatConversationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AiChatConversationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AiChatConversationGroupByOutputType[P]>
            : GetScalarType<T[P], AiChatConversationGroupByOutputType[P]>
        }
      >
    >


  export type AiChatConversationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    childId?: boolean
    volunteerId?: boolean
    conversationName?: boolean
    context?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
    messages?: boolean | AiChatConversation$messagesArgs<ExtArgs>
    _count?: boolean | AiChatConversationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aiChatConversation"]>

  export type AiChatConversationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    childId?: boolean
    volunteerId?: boolean
    conversationName?: boolean
    context?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aiChatConversation"]>

  export type AiChatConversationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    childId?: boolean
    volunteerId?: boolean
    conversationName?: boolean
    context?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aiChatConversation"]>

  export type AiChatConversationSelectScalar = {
    id?: boolean
    sessionId?: boolean
    childId?: boolean
    volunteerId?: boolean
    conversationName?: boolean
    context?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AiChatConversationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionId" | "childId" | "volunteerId" | "conversationName" | "context" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["aiChatConversation"]>
  export type AiChatConversationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
    messages?: boolean | AiChatConversation$messagesArgs<ExtArgs>
    _count?: boolean | AiChatConversationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AiChatConversationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AiChatConversationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AiChatConversationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AiChatConversation"
    objects: {
      session: Prisma.$SessionPayload<ExtArgs>
      child: Prisma.$ChildPayload<ExtArgs>
      volunteer: Prisma.$UserPayload<ExtArgs>
      messages: Prisma.$AiChatMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      childId: string
      volunteerId: string
      conversationName: string | null
      context: Prisma.JsonValue | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["aiChatConversation"]>
    composites: {}
  }

  type AiChatConversationGetPayload<S extends boolean | null | undefined | AiChatConversationDefaultArgs> = $Result.GetResult<Prisma.$AiChatConversationPayload, S>

  type AiChatConversationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AiChatConversationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AiChatConversationCountAggregateInputType | true
    }

  export interface AiChatConversationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AiChatConversation'], meta: { name: 'AiChatConversation' } }
    /**
     * Find zero or one AiChatConversation that matches the filter.
     * @param {AiChatConversationFindUniqueArgs} args - Arguments to find a AiChatConversation
     * @example
     * // Get one AiChatConversation
     * const aiChatConversation = await prisma.aiChatConversation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AiChatConversationFindUniqueArgs>(args: SelectSubset<T, AiChatConversationFindUniqueArgs<ExtArgs>>): Prisma__AiChatConversationClient<$Result.GetResult<Prisma.$AiChatConversationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AiChatConversation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AiChatConversationFindUniqueOrThrowArgs} args - Arguments to find a AiChatConversation
     * @example
     * // Get one AiChatConversation
     * const aiChatConversation = await prisma.aiChatConversation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AiChatConversationFindUniqueOrThrowArgs>(args: SelectSubset<T, AiChatConversationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AiChatConversationClient<$Result.GetResult<Prisma.$AiChatConversationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AiChatConversation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatConversationFindFirstArgs} args - Arguments to find a AiChatConversation
     * @example
     * // Get one AiChatConversation
     * const aiChatConversation = await prisma.aiChatConversation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AiChatConversationFindFirstArgs>(args?: SelectSubset<T, AiChatConversationFindFirstArgs<ExtArgs>>): Prisma__AiChatConversationClient<$Result.GetResult<Prisma.$AiChatConversationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AiChatConversation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatConversationFindFirstOrThrowArgs} args - Arguments to find a AiChatConversation
     * @example
     * // Get one AiChatConversation
     * const aiChatConversation = await prisma.aiChatConversation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AiChatConversationFindFirstOrThrowArgs>(args?: SelectSubset<T, AiChatConversationFindFirstOrThrowArgs<ExtArgs>>): Prisma__AiChatConversationClient<$Result.GetResult<Prisma.$AiChatConversationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AiChatConversations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatConversationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AiChatConversations
     * const aiChatConversations = await prisma.aiChatConversation.findMany()
     * 
     * // Get first 10 AiChatConversations
     * const aiChatConversations = await prisma.aiChatConversation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aiChatConversationWithIdOnly = await prisma.aiChatConversation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AiChatConversationFindManyArgs>(args?: SelectSubset<T, AiChatConversationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatConversationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AiChatConversation.
     * @param {AiChatConversationCreateArgs} args - Arguments to create a AiChatConversation.
     * @example
     * // Create one AiChatConversation
     * const AiChatConversation = await prisma.aiChatConversation.create({
     *   data: {
     *     // ... data to create a AiChatConversation
     *   }
     * })
     * 
     */
    create<T extends AiChatConversationCreateArgs>(args: SelectSubset<T, AiChatConversationCreateArgs<ExtArgs>>): Prisma__AiChatConversationClient<$Result.GetResult<Prisma.$AiChatConversationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AiChatConversations.
     * @param {AiChatConversationCreateManyArgs} args - Arguments to create many AiChatConversations.
     * @example
     * // Create many AiChatConversations
     * const aiChatConversation = await prisma.aiChatConversation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AiChatConversationCreateManyArgs>(args?: SelectSubset<T, AiChatConversationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AiChatConversations and returns the data saved in the database.
     * @param {AiChatConversationCreateManyAndReturnArgs} args - Arguments to create many AiChatConversations.
     * @example
     * // Create many AiChatConversations
     * const aiChatConversation = await prisma.aiChatConversation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AiChatConversations and only return the `id`
     * const aiChatConversationWithIdOnly = await prisma.aiChatConversation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AiChatConversationCreateManyAndReturnArgs>(args?: SelectSubset<T, AiChatConversationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatConversationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AiChatConversation.
     * @param {AiChatConversationDeleteArgs} args - Arguments to delete one AiChatConversation.
     * @example
     * // Delete one AiChatConversation
     * const AiChatConversation = await prisma.aiChatConversation.delete({
     *   where: {
     *     // ... filter to delete one AiChatConversation
     *   }
     * })
     * 
     */
    delete<T extends AiChatConversationDeleteArgs>(args: SelectSubset<T, AiChatConversationDeleteArgs<ExtArgs>>): Prisma__AiChatConversationClient<$Result.GetResult<Prisma.$AiChatConversationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AiChatConversation.
     * @param {AiChatConversationUpdateArgs} args - Arguments to update one AiChatConversation.
     * @example
     * // Update one AiChatConversation
     * const aiChatConversation = await prisma.aiChatConversation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AiChatConversationUpdateArgs>(args: SelectSubset<T, AiChatConversationUpdateArgs<ExtArgs>>): Prisma__AiChatConversationClient<$Result.GetResult<Prisma.$AiChatConversationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AiChatConversations.
     * @param {AiChatConversationDeleteManyArgs} args - Arguments to filter AiChatConversations to delete.
     * @example
     * // Delete a few AiChatConversations
     * const { count } = await prisma.aiChatConversation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AiChatConversationDeleteManyArgs>(args?: SelectSubset<T, AiChatConversationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AiChatConversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatConversationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AiChatConversations
     * const aiChatConversation = await prisma.aiChatConversation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AiChatConversationUpdateManyArgs>(args: SelectSubset<T, AiChatConversationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AiChatConversations and returns the data updated in the database.
     * @param {AiChatConversationUpdateManyAndReturnArgs} args - Arguments to update many AiChatConversations.
     * @example
     * // Update many AiChatConversations
     * const aiChatConversation = await prisma.aiChatConversation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AiChatConversations and only return the `id`
     * const aiChatConversationWithIdOnly = await prisma.aiChatConversation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AiChatConversationUpdateManyAndReturnArgs>(args: SelectSubset<T, AiChatConversationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatConversationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AiChatConversation.
     * @param {AiChatConversationUpsertArgs} args - Arguments to update or create a AiChatConversation.
     * @example
     * // Update or create a AiChatConversation
     * const aiChatConversation = await prisma.aiChatConversation.upsert({
     *   create: {
     *     // ... data to create a AiChatConversation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AiChatConversation we want to update
     *   }
     * })
     */
    upsert<T extends AiChatConversationUpsertArgs>(args: SelectSubset<T, AiChatConversationUpsertArgs<ExtArgs>>): Prisma__AiChatConversationClient<$Result.GetResult<Prisma.$AiChatConversationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AiChatConversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatConversationCountArgs} args - Arguments to filter AiChatConversations to count.
     * @example
     * // Count the number of AiChatConversations
     * const count = await prisma.aiChatConversation.count({
     *   where: {
     *     // ... the filter for the AiChatConversations we want to count
     *   }
     * })
    **/
    count<T extends AiChatConversationCountArgs>(
      args?: Subset<T, AiChatConversationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AiChatConversationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AiChatConversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatConversationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AiChatConversationAggregateArgs>(args: Subset<T, AiChatConversationAggregateArgs>): Prisma.PrismaPromise<GetAiChatConversationAggregateType<T>>

    /**
     * Group by AiChatConversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatConversationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AiChatConversationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AiChatConversationGroupByArgs['orderBy'] }
        : { orderBy?: AiChatConversationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AiChatConversationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAiChatConversationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AiChatConversation model
   */
  readonly fields: AiChatConversationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AiChatConversation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AiChatConversationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends SessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SessionDefaultArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    child<T extends ChildDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChildDefaultArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    volunteer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    messages<T extends AiChatConversation$messagesArgs<ExtArgs> = {}>(args?: Subset<T, AiChatConversation$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AiChatConversation model
   */
  interface AiChatConversationFieldRefs {
    readonly id: FieldRef<"AiChatConversation", 'String'>
    readonly sessionId: FieldRef<"AiChatConversation", 'String'>
    readonly childId: FieldRef<"AiChatConversation", 'String'>
    readonly volunteerId: FieldRef<"AiChatConversation", 'String'>
    readonly conversationName: FieldRef<"AiChatConversation", 'String'>
    readonly context: FieldRef<"AiChatConversation", 'Json'>
    readonly isActive: FieldRef<"AiChatConversation", 'Boolean'>
    readonly createdAt: FieldRef<"AiChatConversation", 'DateTime'>
    readonly updatedAt: FieldRef<"AiChatConversation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AiChatConversation findUnique
   */
  export type AiChatConversationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatConversation
     */
    select?: AiChatConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatConversation
     */
    omit?: AiChatConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatConversationInclude<ExtArgs> | null
    /**
     * Filter, which AiChatConversation to fetch.
     */
    where: AiChatConversationWhereUniqueInput
  }

  /**
   * AiChatConversation findUniqueOrThrow
   */
  export type AiChatConversationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatConversation
     */
    select?: AiChatConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatConversation
     */
    omit?: AiChatConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatConversationInclude<ExtArgs> | null
    /**
     * Filter, which AiChatConversation to fetch.
     */
    where: AiChatConversationWhereUniqueInput
  }

  /**
   * AiChatConversation findFirst
   */
  export type AiChatConversationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatConversation
     */
    select?: AiChatConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatConversation
     */
    omit?: AiChatConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatConversationInclude<ExtArgs> | null
    /**
     * Filter, which AiChatConversation to fetch.
     */
    where?: AiChatConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatConversations to fetch.
     */
    orderBy?: AiChatConversationOrderByWithRelationInput | AiChatConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AiChatConversations.
     */
    cursor?: AiChatConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatConversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatConversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AiChatConversations.
     */
    distinct?: AiChatConversationScalarFieldEnum | AiChatConversationScalarFieldEnum[]
  }

  /**
   * AiChatConversation findFirstOrThrow
   */
  export type AiChatConversationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatConversation
     */
    select?: AiChatConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatConversation
     */
    omit?: AiChatConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatConversationInclude<ExtArgs> | null
    /**
     * Filter, which AiChatConversation to fetch.
     */
    where?: AiChatConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatConversations to fetch.
     */
    orderBy?: AiChatConversationOrderByWithRelationInput | AiChatConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AiChatConversations.
     */
    cursor?: AiChatConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatConversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatConversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AiChatConversations.
     */
    distinct?: AiChatConversationScalarFieldEnum | AiChatConversationScalarFieldEnum[]
  }

  /**
   * AiChatConversation findMany
   */
  export type AiChatConversationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatConversation
     */
    select?: AiChatConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatConversation
     */
    omit?: AiChatConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatConversationInclude<ExtArgs> | null
    /**
     * Filter, which AiChatConversations to fetch.
     */
    where?: AiChatConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatConversations to fetch.
     */
    orderBy?: AiChatConversationOrderByWithRelationInput | AiChatConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AiChatConversations.
     */
    cursor?: AiChatConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatConversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatConversations.
     */
    skip?: number
    distinct?: AiChatConversationScalarFieldEnum | AiChatConversationScalarFieldEnum[]
  }

  /**
   * AiChatConversation create
   */
  export type AiChatConversationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatConversation
     */
    select?: AiChatConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatConversation
     */
    omit?: AiChatConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatConversationInclude<ExtArgs> | null
    /**
     * The data needed to create a AiChatConversation.
     */
    data: XOR<AiChatConversationCreateInput, AiChatConversationUncheckedCreateInput>
  }

  /**
   * AiChatConversation createMany
   */
  export type AiChatConversationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AiChatConversations.
     */
    data: AiChatConversationCreateManyInput | AiChatConversationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AiChatConversation createManyAndReturn
   */
  export type AiChatConversationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatConversation
     */
    select?: AiChatConversationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatConversation
     */
    omit?: AiChatConversationOmit<ExtArgs> | null
    /**
     * The data used to create many AiChatConversations.
     */
    data: AiChatConversationCreateManyInput | AiChatConversationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatConversationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AiChatConversation update
   */
  export type AiChatConversationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatConversation
     */
    select?: AiChatConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatConversation
     */
    omit?: AiChatConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatConversationInclude<ExtArgs> | null
    /**
     * The data needed to update a AiChatConversation.
     */
    data: XOR<AiChatConversationUpdateInput, AiChatConversationUncheckedUpdateInput>
    /**
     * Choose, which AiChatConversation to update.
     */
    where: AiChatConversationWhereUniqueInput
  }

  /**
   * AiChatConversation updateMany
   */
  export type AiChatConversationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AiChatConversations.
     */
    data: XOR<AiChatConversationUpdateManyMutationInput, AiChatConversationUncheckedUpdateManyInput>
    /**
     * Filter which AiChatConversations to update
     */
    where?: AiChatConversationWhereInput
    /**
     * Limit how many AiChatConversations to update.
     */
    limit?: number
  }

  /**
   * AiChatConversation updateManyAndReturn
   */
  export type AiChatConversationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatConversation
     */
    select?: AiChatConversationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatConversation
     */
    omit?: AiChatConversationOmit<ExtArgs> | null
    /**
     * The data used to update AiChatConversations.
     */
    data: XOR<AiChatConversationUpdateManyMutationInput, AiChatConversationUncheckedUpdateManyInput>
    /**
     * Filter which AiChatConversations to update
     */
    where?: AiChatConversationWhereInput
    /**
     * Limit how many AiChatConversations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatConversationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AiChatConversation upsert
   */
  export type AiChatConversationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatConversation
     */
    select?: AiChatConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatConversation
     */
    omit?: AiChatConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatConversationInclude<ExtArgs> | null
    /**
     * The filter to search for the AiChatConversation to update in case it exists.
     */
    where: AiChatConversationWhereUniqueInput
    /**
     * In case the AiChatConversation found by the `where` argument doesn't exist, create a new AiChatConversation with this data.
     */
    create: XOR<AiChatConversationCreateInput, AiChatConversationUncheckedCreateInput>
    /**
     * In case the AiChatConversation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AiChatConversationUpdateInput, AiChatConversationUncheckedUpdateInput>
  }

  /**
   * AiChatConversation delete
   */
  export type AiChatConversationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatConversation
     */
    select?: AiChatConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatConversation
     */
    omit?: AiChatConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatConversationInclude<ExtArgs> | null
    /**
     * Filter which AiChatConversation to delete.
     */
    where: AiChatConversationWhereUniqueInput
  }

  /**
   * AiChatConversation deleteMany
   */
  export type AiChatConversationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AiChatConversations to delete
     */
    where?: AiChatConversationWhereInput
    /**
     * Limit how many AiChatConversations to delete.
     */
    limit?: number
  }

  /**
   * AiChatConversation.messages
   */
  export type AiChatConversation$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    where?: AiChatMessageWhereInput
    orderBy?: AiChatMessageOrderByWithRelationInput | AiChatMessageOrderByWithRelationInput[]
    cursor?: AiChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AiChatMessageScalarFieldEnum | AiChatMessageScalarFieldEnum[]
  }

  /**
   * AiChatConversation without action
   */
  export type AiChatConversationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatConversation
     */
    select?: AiChatConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatConversation
     */
    omit?: AiChatConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatConversationInclude<ExtArgs> | null
  }


  /**
   * Model AiChatMessage
   */

  export type AggregateAiChatMessage = {
    _count: AiChatMessageCountAggregateOutputType | null
    _min: AiChatMessageMinAggregateOutputType | null
    _max: AiChatMessageMaxAggregateOutputType | null
  }

  export type AiChatMessageMinAggregateOutputType = {
    id: string | null
    conversationId: string | null
    role: $Enums.AiChatRole | null
    content: string | null
    timestamp: Date | null
  }

  export type AiChatMessageMaxAggregateOutputType = {
    id: string | null
    conversationId: string | null
    role: $Enums.AiChatRole | null
    content: string | null
    timestamp: Date | null
  }

  export type AiChatMessageCountAggregateOutputType = {
    id: number
    conversationId: number
    role: number
    content: number
    ragContext: number
    timestamp: number
    metadata: number
    _all: number
  }


  export type AiChatMessageMinAggregateInputType = {
    id?: true
    conversationId?: true
    role?: true
    content?: true
    timestamp?: true
  }

  export type AiChatMessageMaxAggregateInputType = {
    id?: true
    conversationId?: true
    role?: true
    content?: true
    timestamp?: true
  }

  export type AiChatMessageCountAggregateInputType = {
    id?: true
    conversationId?: true
    role?: true
    content?: true
    ragContext?: true
    timestamp?: true
    metadata?: true
    _all?: true
  }

  export type AiChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AiChatMessage to aggregate.
     */
    where?: AiChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatMessages to fetch.
     */
    orderBy?: AiChatMessageOrderByWithRelationInput | AiChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AiChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AiChatMessages
    **/
    _count?: true | AiChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AiChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AiChatMessageMaxAggregateInputType
  }

  export type GetAiChatMessageAggregateType<T extends AiChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateAiChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAiChatMessage[P]>
      : GetScalarType<T[P], AggregateAiChatMessage[P]>
  }




  export type AiChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AiChatMessageWhereInput
    orderBy?: AiChatMessageOrderByWithAggregationInput | AiChatMessageOrderByWithAggregationInput[]
    by: AiChatMessageScalarFieldEnum[] | AiChatMessageScalarFieldEnum
    having?: AiChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AiChatMessageCountAggregateInputType | true
    _min?: AiChatMessageMinAggregateInputType
    _max?: AiChatMessageMaxAggregateInputType
  }

  export type AiChatMessageGroupByOutputType = {
    id: string
    conversationId: string
    role: $Enums.AiChatRole
    content: string
    ragContext: JsonValue | null
    timestamp: Date
    metadata: JsonValue | null
    _count: AiChatMessageCountAggregateOutputType | null
    _min: AiChatMessageMinAggregateOutputType | null
    _max: AiChatMessageMaxAggregateOutputType | null
  }

  type GetAiChatMessageGroupByPayload<T extends AiChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AiChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AiChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AiChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], AiChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type AiChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conversationId?: boolean
    role?: boolean
    content?: boolean
    ragContext?: boolean
    timestamp?: boolean
    metadata?: boolean
    conversation?: boolean | AiChatConversationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aiChatMessage"]>

  export type AiChatMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conversationId?: boolean
    role?: boolean
    content?: boolean
    ragContext?: boolean
    timestamp?: boolean
    metadata?: boolean
    conversation?: boolean | AiChatConversationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aiChatMessage"]>

  export type AiChatMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conversationId?: boolean
    role?: boolean
    content?: boolean
    ragContext?: boolean
    timestamp?: boolean
    metadata?: boolean
    conversation?: boolean | AiChatConversationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aiChatMessage"]>

  export type AiChatMessageSelectScalar = {
    id?: boolean
    conversationId?: boolean
    role?: boolean
    content?: boolean
    ragContext?: boolean
    timestamp?: boolean
    metadata?: boolean
  }

  export type AiChatMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "conversationId" | "role" | "content" | "ragContext" | "timestamp" | "metadata", ExtArgs["result"]["aiChatMessage"]>
  export type AiChatMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conversation?: boolean | AiChatConversationDefaultArgs<ExtArgs>
  }
  export type AiChatMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conversation?: boolean | AiChatConversationDefaultArgs<ExtArgs>
  }
  export type AiChatMessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conversation?: boolean | AiChatConversationDefaultArgs<ExtArgs>
  }

  export type $AiChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AiChatMessage"
    objects: {
      conversation: Prisma.$AiChatConversationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      conversationId: string
      role: $Enums.AiChatRole
      content: string
      ragContext: Prisma.JsonValue | null
      timestamp: Date
      metadata: Prisma.JsonValue | null
    }, ExtArgs["result"]["aiChatMessage"]>
    composites: {}
  }

  type AiChatMessageGetPayload<S extends boolean | null | undefined | AiChatMessageDefaultArgs> = $Result.GetResult<Prisma.$AiChatMessagePayload, S>

  type AiChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AiChatMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AiChatMessageCountAggregateInputType | true
    }

  export interface AiChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AiChatMessage'], meta: { name: 'AiChatMessage' } }
    /**
     * Find zero or one AiChatMessage that matches the filter.
     * @param {AiChatMessageFindUniqueArgs} args - Arguments to find a AiChatMessage
     * @example
     * // Get one AiChatMessage
     * const aiChatMessage = await prisma.aiChatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AiChatMessageFindUniqueArgs>(args: SelectSubset<T, AiChatMessageFindUniqueArgs<ExtArgs>>): Prisma__AiChatMessageClient<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AiChatMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AiChatMessageFindUniqueOrThrowArgs} args - Arguments to find a AiChatMessage
     * @example
     * // Get one AiChatMessage
     * const aiChatMessage = await prisma.aiChatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AiChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, AiChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AiChatMessageClient<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AiChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatMessageFindFirstArgs} args - Arguments to find a AiChatMessage
     * @example
     * // Get one AiChatMessage
     * const aiChatMessage = await prisma.aiChatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AiChatMessageFindFirstArgs>(args?: SelectSubset<T, AiChatMessageFindFirstArgs<ExtArgs>>): Prisma__AiChatMessageClient<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AiChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatMessageFindFirstOrThrowArgs} args - Arguments to find a AiChatMessage
     * @example
     * // Get one AiChatMessage
     * const aiChatMessage = await prisma.aiChatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AiChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, AiChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__AiChatMessageClient<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AiChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AiChatMessages
     * const aiChatMessages = await prisma.aiChatMessage.findMany()
     * 
     * // Get first 10 AiChatMessages
     * const aiChatMessages = await prisma.aiChatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aiChatMessageWithIdOnly = await prisma.aiChatMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AiChatMessageFindManyArgs>(args?: SelectSubset<T, AiChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AiChatMessage.
     * @param {AiChatMessageCreateArgs} args - Arguments to create a AiChatMessage.
     * @example
     * // Create one AiChatMessage
     * const AiChatMessage = await prisma.aiChatMessage.create({
     *   data: {
     *     // ... data to create a AiChatMessage
     *   }
     * })
     * 
     */
    create<T extends AiChatMessageCreateArgs>(args: SelectSubset<T, AiChatMessageCreateArgs<ExtArgs>>): Prisma__AiChatMessageClient<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AiChatMessages.
     * @param {AiChatMessageCreateManyArgs} args - Arguments to create many AiChatMessages.
     * @example
     * // Create many AiChatMessages
     * const aiChatMessage = await prisma.aiChatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AiChatMessageCreateManyArgs>(args?: SelectSubset<T, AiChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AiChatMessages and returns the data saved in the database.
     * @param {AiChatMessageCreateManyAndReturnArgs} args - Arguments to create many AiChatMessages.
     * @example
     * // Create many AiChatMessages
     * const aiChatMessage = await prisma.aiChatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AiChatMessages and only return the `id`
     * const aiChatMessageWithIdOnly = await prisma.aiChatMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AiChatMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, AiChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AiChatMessage.
     * @param {AiChatMessageDeleteArgs} args - Arguments to delete one AiChatMessage.
     * @example
     * // Delete one AiChatMessage
     * const AiChatMessage = await prisma.aiChatMessage.delete({
     *   where: {
     *     // ... filter to delete one AiChatMessage
     *   }
     * })
     * 
     */
    delete<T extends AiChatMessageDeleteArgs>(args: SelectSubset<T, AiChatMessageDeleteArgs<ExtArgs>>): Prisma__AiChatMessageClient<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AiChatMessage.
     * @param {AiChatMessageUpdateArgs} args - Arguments to update one AiChatMessage.
     * @example
     * // Update one AiChatMessage
     * const aiChatMessage = await prisma.aiChatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AiChatMessageUpdateArgs>(args: SelectSubset<T, AiChatMessageUpdateArgs<ExtArgs>>): Prisma__AiChatMessageClient<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AiChatMessages.
     * @param {AiChatMessageDeleteManyArgs} args - Arguments to filter AiChatMessages to delete.
     * @example
     * // Delete a few AiChatMessages
     * const { count } = await prisma.aiChatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AiChatMessageDeleteManyArgs>(args?: SelectSubset<T, AiChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AiChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AiChatMessages
     * const aiChatMessage = await prisma.aiChatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AiChatMessageUpdateManyArgs>(args: SelectSubset<T, AiChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AiChatMessages and returns the data updated in the database.
     * @param {AiChatMessageUpdateManyAndReturnArgs} args - Arguments to update many AiChatMessages.
     * @example
     * // Update many AiChatMessages
     * const aiChatMessage = await prisma.aiChatMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AiChatMessages and only return the `id`
     * const aiChatMessageWithIdOnly = await prisma.aiChatMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AiChatMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, AiChatMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AiChatMessage.
     * @param {AiChatMessageUpsertArgs} args - Arguments to update or create a AiChatMessage.
     * @example
     * // Update or create a AiChatMessage
     * const aiChatMessage = await prisma.aiChatMessage.upsert({
     *   create: {
     *     // ... data to create a AiChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AiChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends AiChatMessageUpsertArgs>(args: SelectSubset<T, AiChatMessageUpsertArgs<ExtArgs>>): Prisma__AiChatMessageClient<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AiChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatMessageCountArgs} args - Arguments to filter AiChatMessages to count.
     * @example
     * // Count the number of AiChatMessages
     * const count = await prisma.aiChatMessage.count({
     *   where: {
     *     // ... the filter for the AiChatMessages we want to count
     *   }
     * })
    **/
    count<T extends AiChatMessageCountArgs>(
      args?: Subset<T, AiChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AiChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AiChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AiChatMessageAggregateArgs>(args: Subset<T, AiChatMessageAggregateArgs>): Prisma.PrismaPromise<GetAiChatMessageAggregateType<T>>

    /**
     * Group by AiChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AiChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AiChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: AiChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AiChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAiChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AiChatMessage model
   */
  readonly fields: AiChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AiChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AiChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    conversation<T extends AiChatConversationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AiChatConversationDefaultArgs<ExtArgs>>): Prisma__AiChatConversationClient<$Result.GetResult<Prisma.$AiChatConversationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AiChatMessage model
   */
  interface AiChatMessageFieldRefs {
    readonly id: FieldRef<"AiChatMessage", 'String'>
    readonly conversationId: FieldRef<"AiChatMessage", 'String'>
    readonly role: FieldRef<"AiChatMessage", 'AiChatRole'>
    readonly content: FieldRef<"AiChatMessage", 'String'>
    readonly ragContext: FieldRef<"AiChatMessage", 'Json'>
    readonly timestamp: FieldRef<"AiChatMessage", 'DateTime'>
    readonly metadata: FieldRef<"AiChatMessage", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * AiChatMessage findUnique
   */
  export type AiChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which AiChatMessage to fetch.
     */
    where: AiChatMessageWhereUniqueInput
  }

  /**
   * AiChatMessage findUniqueOrThrow
   */
  export type AiChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which AiChatMessage to fetch.
     */
    where: AiChatMessageWhereUniqueInput
  }

  /**
   * AiChatMessage findFirst
   */
  export type AiChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which AiChatMessage to fetch.
     */
    where?: AiChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatMessages to fetch.
     */
    orderBy?: AiChatMessageOrderByWithRelationInput | AiChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AiChatMessages.
     */
    cursor?: AiChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AiChatMessages.
     */
    distinct?: AiChatMessageScalarFieldEnum | AiChatMessageScalarFieldEnum[]
  }

  /**
   * AiChatMessage findFirstOrThrow
   */
  export type AiChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which AiChatMessage to fetch.
     */
    where?: AiChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatMessages to fetch.
     */
    orderBy?: AiChatMessageOrderByWithRelationInput | AiChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AiChatMessages.
     */
    cursor?: AiChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AiChatMessages.
     */
    distinct?: AiChatMessageScalarFieldEnum | AiChatMessageScalarFieldEnum[]
  }

  /**
   * AiChatMessage findMany
   */
  export type AiChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which AiChatMessages to fetch.
     */
    where?: AiChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatMessages to fetch.
     */
    orderBy?: AiChatMessageOrderByWithRelationInput | AiChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AiChatMessages.
     */
    cursor?: AiChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatMessages.
     */
    skip?: number
    distinct?: AiChatMessageScalarFieldEnum | AiChatMessageScalarFieldEnum[]
  }

  /**
   * AiChatMessage create
   */
  export type AiChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a AiChatMessage.
     */
    data: XOR<AiChatMessageCreateInput, AiChatMessageUncheckedCreateInput>
  }

  /**
   * AiChatMessage createMany
   */
  export type AiChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AiChatMessages.
     */
    data: AiChatMessageCreateManyInput | AiChatMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AiChatMessage createManyAndReturn
   */
  export type AiChatMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * The data used to create many AiChatMessages.
     */
    data: AiChatMessageCreateManyInput | AiChatMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AiChatMessage update
   */
  export type AiChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a AiChatMessage.
     */
    data: XOR<AiChatMessageUpdateInput, AiChatMessageUncheckedUpdateInput>
    /**
     * Choose, which AiChatMessage to update.
     */
    where: AiChatMessageWhereUniqueInput
  }

  /**
   * AiChatMessage updateMany
   */
  export type AiChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AiChatMessages.
     */
    data: XOR<AiChatMessageUpdateManyMutationInput, AiChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which AiChatMessages to update
     */
    where?: AiChatMessageWhereInput
    /**
     * Limit how many AiChatMessages to update.
     */
    limit?: number
  }

  /**
   * AiChatMessage updateManyAndReturn
   */
  export type AiChatMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * The data used to update AiChatMessages.
     */
    data: XOR<AiChatMessageUpdateManyMutationInput, AiChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which AiChatMessages to update
     */
    where?: AiChatMessageWhereInput
    /**
     * Limit how many AiChatMessages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AiChatMessage upsert
   */
  export type AiChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the AiChatMessage to update in case it exists.
     */
    where: AiChatMessageWhereUniqueInput
    /**
     * In case the AiChatMessage found by the `where` argument doesn't exist, create a new AiChatMessage with this data.
     */
    create: XOR<AiChatMessageCreateInput, AiChatMessageUncheckedCreateInput>
    /**
     * In case the AiChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AiChatMessageUpdateInput, AiChatMessageUncheckedUpdateInput>
  }

  /**
   * AiChatMessage delete
   */
  export type AiChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * Filter which AiChatMessage to delete.
     */
    where: AiChatMessageWhereUniqueInput
  }

  /**
   * AiChatMessage deleteMany
   */
  export type AiChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AiChatMessages to delete
     */
    where?: AiChatMessageWhereInput
    /**
     * Limit how many AiChatMessages to delete.
     */
    limit?: number
  }

  /**
   * AiChatMessage without action
   */
  export type AiChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
  }


  /**
   * Model ConversationMemory
   */

  export type AggregateConversationMemory = {
    _count: ConversationMemoryCountAggregateOutputType | null
    _avg: ConversationMemoryAvgAggregateOutputType | null
    _sum: ConversationMemorySumAggregateOutputType | null
    _min: ConversationMemoryMinAggregateOutputType | null
    _max: ConversationMemoryMaxAggregateOutputType | null
  }

  export type ConversationMemoryAvgAggregateOutputType = {
    importance: number | null
  }

  export type ConversationMemorySumAggregateOutputType = {
    importance: number | null
  }

  export type ConversationMemoryMinAggregateOutputType = {
    id: string | null
    childId: string | null
    volunteerId: string | null
    sessionId: string | null
    memoryType: $Enums.MemoryType | null
    content: string | null
    importance: number | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConversationMemoryMaxAggregateOutputType = {
    id: string | null
    childId: string | null
    volunteerId: string | null
    sessionId: string | null
    memoryType: $Enums.MemoryType | null
    content: string | null
    importance: number | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConversationMemoryCountAggregateOutputType = {
    id: number
    childId: number
    volunteerId: number
    sessionId: number
    memoryType: number
    content: number
    importance: number
    associatedTags: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConversationMemoryAvgAggregateInputType = {
    importance?: true
  }

  export type ConversationMemorySumAggregateInputType = {
    importance?: true
  }

  export type ConversationMemoryMinAggregateInputType = {
    id?: true
    childId?: true
    volunteerId?: true
    sessionId?: true
    memoryType?: true
    content?: true
    importance?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConversationMemoryMaxAggregateInputType = {
    id?: true
    childId?: true
    volunteerId?: true
    sessionId?: true
    memoryType?: true
    content?: true
    importance?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConversationMemoryCountAggregateInputType = {
    id?: true
    childId?: true
    volunteerId?: true
    sessionId?: true
    memoryType?: true
    content?: true
    importance?: true
    associatedTags?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConversationMemoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConversationMemory to aggregate.
     */
    where?: ConversationMemoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationMemories to fetch.
     */
    orderBy?: ConversationMemoryOrderByWithRelationInput | ConversationMemoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConversationMemoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationMemories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationMemories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConversationMemories
    **/
    _count?: true | ConversationMemoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConversationMemoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConversationMemorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConversationMemoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConversationMemoryMaxAggregateInputType
  }

  export type GetConversationMemoryAggregateType<T extends ConversationMemoryAggregateArgs> = {
        [P in keyof T & keyof AggregateConversationMemory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConversationMemory[P]>
      : GetScalarType<T[P], AggregateConversationMemory[P]>
  }




  export type ConversationMemoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationMemoryWhereInput
    orderBy?: ConversationMemoryOrderByWithAggregationInput | ConversationMemoryOrderByWithAggregationInput[]
    by: ConversationMemoryScalarFieldEnum[] | ConversationMemoryScalarFieldEnum
    having?: ConversationMemoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConversationMemoryCountAggregateInputType | true
    _avg?: ConversationMemoryAvgAggregateInputType
    _sum?: ConversationMemorySumAggregateInputType
    _min?: ConversationMemoryMinAggregateInputType
    _max?: ConversationMemoryMaxAggregateInputType
  }

  export type ConversationMemoryGroupByOutputType = {
    id: string
    childId: string
    volunteerId: string
    sessionId: string | null
    memoryType: $Enums.MemoryType
    content: string
    importance: number
    associatedTags: string[]
    expiresAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ConversationMemoryCountAggregateOutputType | null
    _avg: ConversationMemoryAvgAggregateOutputType | null
    _sum: ConversationMemorySumAggregateOutputType | null
    _min: ConversationMemoryMinAggregateOutputType | null
    _max: ConversationMemoryMaxAggregateOutputType | null
  }

  type GetConversationMemoryGroupByPayload<T extends ConversationMemoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConversationMemoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConversationMemoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConversationMemoryGroupByOutputType[P]>
            : GetScalarType<T[P], ConversationMemoryGroupByOutputType[P]>
        }
      >
    >


  export type ConversationMemorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    childId?: boolean
    volunteerId?: boolean
    sessionId?: boolean
    memoryType?: boolean
    content?: boolean
    importance?: boolean
    associatedTags?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | ConversationMemory$sessionArgs<ExtArgs>
  }, ExtArgs["result"]["conversationMemory"]>

  export type ConversationMemorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    childId?: boolean
    volunteerId?: boolean
    sessionId?: boolean
    memoryType?: boolean
    content?: boolean
    importance?: boolean
    associatedTags?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | ConversationMemory$sessionArgs<ExtArgs>
  }, ExtArgs["result"]["conversationMemory"]>

  export type ConversationMemorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    childId?: boolean
    volunteerId?: boolean
    sessionId?: boolean
    memoryType?: boolean
    content?: boolean
    importance?: boolean
    associatedTags?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | ConversationMemory$sessionArgs<ExtArgs>
  }, ExtArgs["result"]["conversationMemory"]>

  export type ConversationMemorySelectScalar = {
    id?: boolean
    childId?: boolean
    volunteerId?: boolean
    sessionId?: boolean
    memoryType?: boolean
    content?: boolean
    importance?: boolean
    associatedTags?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ConversationMemoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "childId" | "volunteerId" | "sessionId" | "memoryType" | "content" | "importance" | "associatedTags" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["conversationMemory"]>
  export type ConversationMemoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | ConversationMemory$sessionArgs<ExtArgs>
  }
  export type ConversationMemoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | ConversationMemory$sessionArgs<ExtArgs>
  }
  export type ConversationMemoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    child?: boolean | ChildDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | ConversationMemory$sessionArgs<ExtArgs>
  }

  export type $ConversationMemoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConversationMemory"
    objects: {
      child: Prisma.$ChildPayload<ExtArgs>
      volunteer: Prisma.$UserPayload<ExtArgs>
      session: Prisma.$SessionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      childId: string
      volunteerId: string
      sessionId: string | null
      memoryType: $Enums.MemoryType
      content: string
      importance: number
      associatedTags: string[]
      expiresAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["conversationMemory"]>
    composites: {}
  }

  type ConversationMemoryGetPayload<S extends boolean | null | undefined | ConversationMemoryDefaultArgs> = $Result.GetResult<Prisma.$ConversationMemoryPayload, S>

  type ConversationMemoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConversationMemoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConversationMemoryCountAggregateInputType | true
    }

  export interface ConversationMemoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConversationMemory'], meta: { name: 'ConversationMemory' } }
    /**
     * Find zero or one ConversationMemory that matches the filter.
     * @param {ConversationMemoryFindUniqueArgs} args - Arguments to find a ConversationMemory
     * @example
     * // Get one ConversationMemory
     * const conversationMemory = await prisma.conversationMemory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConversationMemoryFindUniqueArgs>(args: SelectSubset<T, ConversationMemoryFindUniqueArgs<ExtArgs>>): Prisma__ConversationMemoryClient<$Result.GetResult<Prisma.$ConversationMemoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ConversationMemory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConversationMemoryFindUniqueOrThrowArgs} args - Arguments to find a ConversationMemory
     * @example
     * // Get one ConversationMemory
     * const conversationMemory = await prisma.conversationMemory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConversationMemoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ConversationMemoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConversationMemoryClient<$Result.GetResult<Prisma.$ConversationMemoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConversationMemory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationMemoryFindFirstArgs} args - Arguments to find a ConversationMemory
     * @example
     * // Get one ConversationMemory
     * const conversationMemory = await prisma.conversationMemory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConversationMemoryFindFirstArgs>(args?: SelectSubset<T, ConversationMemoryFindFirstArgs<ExtArgs>>): Prisma__ConversationMemoryClient<$Result.GetResult<Prisma.$ConversationMemoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConversationMemory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationMemoryFindFirstOrThrowArgs} args - Arguments to find a ConversationMemory
     * @example
     * // Get one ConversationMemory
     * const conversationMemory = await prisma.conversationMemory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConversationMemoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ConversationMemoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConversationMemoryClient<$Result.GetResult<Prisma.$ConversationMemoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ConversationMemories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationMemoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConversationMemories
     * const conversationMemories = await prisma.conversationMemory.findMany()
     * 
     * // Get first 10 ConversationMemories
     * const conversationMemories = await prisma.conversationMemory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conversationMemoryWithIdOnly = await prisma.conversationMemory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConversationMemoryFindManyArgs>(args?: SelectSubset<T, ConversationMemoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationMemoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ConversationMemory.
     * @param {ConversationMemoryCreateArgs} args - Arguments to create a ConversationMemory.
     * @example
     * // Create one ConversationMemory
     * const ConversationMemory = await prisma.conversationMemory.create({
     *   data: {
     *     // ... data to create a ConversationMemory
     *   }
     * })
     * 
     */
    create<T extends ConversationMemoryCreateArgs>(args: SelectSubset<T, ConversationMemoryCreateArgs<ExtArgs>>): Prisma__ConversationMemoryClient<$Result.GetResult<Prisma.$ConversationMemoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ConversationMemories.
     * @param {ConversationMemoryCreateManyArgs} args - Arguments to create many ConversationMemories.
     * @example
     * // Create many ConversationMemories
     * const conversationMemory = await prisma.conversationMemory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConversationMemoryCreateManyArgs>(args?: SelectSubset<T, ConversationMemoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConversationMemories and returns the data saved in the database.
     * @param {ConversationMemoryCreateManyAndReturnArgs} args - Arguments to create many ConversationMemories.
     * @example
     * // Create many ConversationMemories
     * const conversationMemory = await prisma.conversationMemory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConversationMemories and only return the `id`
     * const conversationMemoryWithIdOnly = await prisma.conversationMemory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConversationMemoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ConversationMemoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationMemoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ConversationMemory.
     * @param {ConversationMemoryDeleteArgs} args - Arguments to delete one ConversationMemory.
     * @example
     * // Delete one ConversationMemory
     * const ConversationMemory = await prisma.conversationMemory.delete({
     *   where: {
     *     // ... filter to delete one ConversationMemory
     *   }
     * })
     * 
     */
    delete<T extends ConversationMemoryDeleteArgs>(args: SelectSubset<T, ConversationMemoryDeleteArgs<ExtArgs>>): Prisma__ConversationMemoryClient<$Result.GetResult<Prisma.$ConversationMemoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ConversationMemory.
     * @param {ConversationMemoryUpdateArgs} args - Arguments to update one ConversationMemory.
     * @example
     * // Update one ConversationMemory
     * const conversationMemory = await prisma.conversationMemory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConversationMemoryUpdateArgs>(args: SelectSubset<T, ConversationMemoryUpdateArgs<ExtArgs>>): Prisma__ConversationMemoryClient<$Result.GetResult<Prisma.$ConversationMemoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ConversationMemories.
     * @param {ConversationMemoryDeleteManyArgs} args - Arguments to filter ConversationMemories to delete.
     * @example
     * // Delete a few ConversationMemories
     * const { count } = await prisma.conversationMemory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConversationMemoryDeleteManyArgs>(args?: SelectSubset<T, ConversationMemoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConversationMemories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationMemoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConversationMemories
     * const conversationMemory = await prisma.conversationMemory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConversationMemoryUpdateManyArgs>(args: SelectSubset<T, ConversationMemoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConversationMemories and returns the data updated in the database.
     * @param {ConversationMemoryUpdateManyAndReturnArgs} args - Arguments to update many ConversationMemories.
     * @example
     * // Update many ConversationMemories
     * const conversationMemory = await prisma.conversationMemory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ConversationMemories and only return the `id`
     * const conversationMemoryWithIdOnly = await prisma.conversationMemory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConversationMemoryUpdateManyAndReturnArgs>(args: SelectSubset<T, ConversationMemoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationMemoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ConversationMemory.
     * @param {ConversationMemoryUpsertArgs} args - Arguments to update or create a ConversationMemory.
     * @example
     * // Update or create a ConversationMemory
     * const conversationMemory = await prisma.conversationMemory.upsert({
     *   create: {
     *     // ... data to create a ConversationMemory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConversationMemory we want to update
     *   }
     * })
     */
    upsert<T extends ConversationMemoryUpsertArgs>(args: SelectSubset<T, ConversationMemoryUpsertArgs<ExtArgs>>): Prisma__ConversationMemoryClient<$Result.GetResult<Prisma.$ConversationMemoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ConversationMemories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationMemoryCountArgs} args - Arguments to filter ConversationMemories to count.
     * @example
     * // Count the number of ConversationMemories
     * const count = await prisma.conversationMemory.count({
     *   where: {
     *     // ... the filter for the ConversationMemories we want to count
     *   }
     * })
    **/
    count<T extends ConversationMemoryCountArgs>(
      args?: Subset<T, ConversationMemoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConversationMemoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConversationMemory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationMemoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConversationMemoryAggregateArgs>(args: Subset<T, ConversationMemoryAggregateArgs>): Prisma.PrismaPromise<GetConversationMemoryAggregateType<T>>

    /**
     * Group by ConversationMemory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationMemoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConversationMemoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConversationMemoryGroupByArgs['orderBy'] }
        : { orderBy?: ConversationMemoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConversationMemoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversationMemoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConversationMemory model
   */
  readonly fields: ConversationMemoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConversationMemory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConversationMemoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    child<T extends ChildDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChildDefaultArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    volunteer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    session<T extends ConversationMemory$sessionArgs<ExtArgs> = {}>(args?: Subset<T, ConversationMemory$sessionArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConversationMemory model
   */
  interface ConversationMemoryFieldRefs {
    readonly id: FieldRef<"ConversationMemory", 'String'>
    readonly childId: FieldRef<"ConversationMemory", 'String'>
    readonly volunteerId: FieldRef<"ConversationMemory", 'String'>
    readonly sessionId: FieldRef<"ConversationMemory", 'String'>
    readonly memoryType: FieldRef<"ConversationMemory", 'MemoryType'>
    readonly content: FieldRef<"ConversationMemory", 'String'>
    readonly importance: FieldRef<"ConversationMemory", 'Int'>
    readonly associatedTags: FieldRef<"ConversationMemory", 'String[]'>
    readonly expiresAt: FieldRef<"ConversationMemory", 'DateTime'>
    readonly createdAt: FieldRef<"ConversationMemory", 'DateTime'>
    readonly updatedAt: FieldRef<"ConversationMemory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ConversationMemory findUnique
   */
  export type ConversationMemoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMemory
     */
    select?: ConversationMemorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConversationMemory
     */
    omit?: ConversationMemoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemoryInclude<ExtArgs> | null
    /**
     * Filter, which ConversationMemory to fetch.
     */
    where: ConversationMemoryWhereUniqueInput
  }

  /**
   * ConversationMemory findUniqueOrThrow
   */
  export type ConversationMemoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMemory
     */
    select?: ConversationMemorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConversationMemory
     */
    omit?: ConversationMemoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemoryInclude<ExtArgs> | null
    /**
     * Filter, which ConversationMemory to fetch.
     */
    where: ConversationMemoryWhereUniqueInput
  }

  /**
   * ConversationMemory findFirst
   */
  export type ConversationMemoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMemory
     */
    select?: ConversationMemorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConversationMemory
     */
    omit?: ConversationMemoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemoryInclude<ExtArgs> | null
    /**
     * Filter, which ConversationMemory to fetch.
     */
    where?: ConversationMemoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationMemories to fetch.
     */
    orderBy?: ConversationMemoryOrderByWithRelationInput | ConversationMemoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConversationMemories.
     */
    cursor?: ConversationMemoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationMemories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationMemories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConversationMemories.
     */
    distinct?: ConversationMemoryScalarFieldEnum | ConversationMemoryScalarFieldEnum[]
  }

  /**
   * ConversationMemory findFirstOrThrow
   */
  export type ConversationMemoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMemory
     */
    select?: ConversationMemorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConversationMemory
     */
    omit?: ConversationMemoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemoryInclude<ExtArgs> | null
    /**
     * Filter, which ConversationMemory to fetch.
     */
    where?: ConversationMemoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationMemories to fetch.
     */
    orderBy?: ConversationMemoryOrderByWithRelationInput | ConversationMemoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConversationMemories.
     */
    cursor?: ConversationMemoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationMemories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationMemories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConversationMemories.
     */
    distinct?: ConversationMemoryScalarFieldEnum | ConversationMemoryScalarFieldEnum[]
  }

  /**
   * ConversationMemory findMany
   */
  export type ConversationMemoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMemory
     */
    select?: ConversationMemorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConversationMemory
     */
    omit?: ConversationMemoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemoryInclude<ExtArgs> | null
    /**
     * Filter, which ConversationMemories to fetch.
     */
    where?: ConversationMemoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationMemories to fetch.
     */
    orderBy?: ConversationMemoryOrderByWithRelationInput | ConversationMemoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConversationMemories.
     */
    cursor?: ConversationMemoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationMemories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationMemories.
     */
    skip?: number
    distinct?: ConversationMemoryScalarFieldEnum | ConversationMemoryScalarFieldEnum[]
  }

  /**
   * ConversationMemory create
   */
  export type ConversationMemoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMemory
     */
    select?: ConversationMemorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConversationMemory
     */
    omit?: ConversationMemoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ConversationMemory.
     */
    data: XOR<ConversationMemoryCreateInput, ConversationMemoryUncheckedCreateInput>
  }

  /**
   * ConversationMemory createMany
   */
  export type ConversationMemoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConversationMemories.
     */
    data: ConversationMemoryCreateManyInput | ConversationMemoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConversationMemory createManyAndReturn
   */
  export type ConversationMemoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMemory
     */
    select?: ConversationMemorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConversationMemory
     */
    omit?: ConversationMemoryOmit<ExtArgs> | null
    /**
     * The data used to create many ConversationMemories.
     */
    data: ConversationMemoryCreateManyInput | ConversationMemoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConversationMemory update
   */
  export type ConversationMemoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMemory
     */
    select?: ConversationMemorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConversationMemory
     */
    omit?: ConversationMemoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ConversationMemory.
     */
    data: XOR<ConversationMemoryUpdateInput, ConversationMemoryUncheckedUpdateInput>
    /**
     * Choose, which ConversationMemory to update.
     */
    where: ConversationMemoryWhereUniqueInput
  }

  /**
   * ConversationMemory updateMany
   */
  export type ConversationMemoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConversationMemories.
     */
    data: XOR<ConversationMemoryUpdateManyMutationInput, ConversationMemoryUncheckedUpdateManyInput>
    /**
     * Filter which ConversationMemories to update
     */
    where?: ConversationMemoryWhereInput
    /**
     * Limit how many ConversationMemories to update.
     */
    limit?: number
  }

  /**
   * ConversationMemory updateManyAndReturn
   */
  export type ConversationMemoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMemory
     */
    select?: ConversationMemorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConversationMemory
     */
    omit?: ConversationMemoryOmit<ExtArgs> | null
    /**
     * The data used to update ConversationMemories.
     */
    data: XOR<ConversationMemoryUpdateManyMutationInput, ConversationMemoryUncheckedUpdateManyInput>
    /**
     * Filter which ConversationMemories to update
     */
    where?: ConversationMemoryWhereInput
    /**
     * Limit how many ConversationMemories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConversationMemory upsert
   */
  export type ConversationMemoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMemory
     */
    select?: ConversationMemorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConversationMemory
     */
    omit?: ConversationMemoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ConversationMemory to update in case it exists.
     */
    where: ConversationMemoryWhereUniqueInput
    /**
     * In case the ConversationMemory found by the `where` argument doesn't exist, create a new ConversationMemory with this data.
     */
    create: XOR<ConversationMemoryCreateInput, ConversationMemoryUncheckedCreateInput>
    /**
     * In case the ConversationMemory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConversationMemoryUpdateInput, ConversationMemoryUncheckedUpdateInput>
  }

  /**
   * ConversationMemory delete
   */
  export type ConversationMemoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMemory
     */
    select?: ConversationMemorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConversationMemory
     */
    omit?: ConversationMemoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemoryInclude<ExtArgs> | null
    /**
     * Filter which ConversationMemory to delete.
     */
    where: ConversationMemoryWhereUniqueInput
  }

  /**
   * ConversationMemory deleteMany
   */
  export type ConversationMemoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConversationMemories to delete
     */
    where?: ConversationMemoryWhereInput
    /**
     * Limit how many ConversationMemories to delete.
     */
    limit?: number
  }

  /**
   * ConversationMemory.session
   */
  export type ConversationMemory$sessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
  }

  /**
   * ConversationMemory without action
   */
  export type ConversationMemoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMemory
     */
    select?: ConversationMemorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConversationMemory
     */
    omit?: ConversationMemoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemoryInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    name: string | null
    category: $Enums.TagCategory | null
    description: string | null
    color: string | null
    createdAt: Date | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    name: string | null
    category: $Enums.TagCategory | null
    description: string | null
    color: string | null
    createdAt: Date | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number
    category: number
    description: number
    color: number
    createdAt: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    color?: true
    createdAt?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    color?: true
    createdAt?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    color?: true
    createdAt?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: string
    name: string
    category: $Enums.TagCategory
    description: string | null
    color: string | null
    createdAt: Date
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    children?: boolean | Tag$childrenArgs<ExtArgs>
    knowledgeBase?: boolean | Tag$knowledgeBaseArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    id?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
  }

  export type TagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "category" | "description" | "color" | "createdAt", ExtArgs["result"]["tag"]>
  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | Tag$childrenArgs<ExtArgs>
    knowledgeBase?: boolean | Tag$knowledgeBaseArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      children: Prisma.$ChildPayload<ExtArgs>[]
      knowledgeBase: Prisma.$KnowledgeBasePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      category: $Enums.TagCategory
      description: string | null
      color: string | null
      createdAt: Date
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tags and returns the data saved in the database.
     * @param {TagCreateManyAndReturnArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagCreateManyAndReturnArgs>(args?: SelectSubset<T, TagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags and returns the data updated in the database.
     * @param {TagUpdateManyAndReturnArgs} args - Arguments to update many Tags.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TagUpdateManyAndReturnArgs>(args: SelectSubset<T, TagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    children<T extends Tag$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Tag$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    knowledgeBase<T extends Tag$knowledgeBaseArgs<ExtArgs> = {}>(args?: Subset<T, Tag$knowledgeBaseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'String'>
    readonly name: FieldRef<"Tag", 'String'>
    readonly category: FieldRef<"Tag", 'TagCategory'>
    readonly description: FieldRef<"Tag", 'String'>
    readonly color: FieldRef<"Tag", 'String'>
    readonly createdAt: FieldRef<"Tag", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag createManyAndReturn
   */
  export type TagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag updateManyAndReturn
   */
  export type TagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to delete.
     */
    limit?: number
  }

  /**
   * Tag.children
   */
  export type Tag$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    where?: ChildWhereInput
    orderBy?: ChildOrderByWithRelationInput | ChildOrderByWithRelationInput[]
    cursor?: ChildWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChildScalarFieldEnum | ChildScalarFieldEnum[]
  }

  /**
   * Tag.knowledgeBase
   */
  export type Tag$knowledgeBaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeBaseInclude<ExtArgs> | null
    where?: KnowledgeBaseWhereInput
    orderBy?: KnowledgeBaseOrderByWithRelationInput | KnowledgeBaseOrderByWithRelationInput[]
    cursor?: KnowledgeBaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KnowledgeBaseScalarFieldEnum | KnowledgeBaseScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    role: 'role',
    state: 'state',
    phone: 'phone',
    specialization: 'specialization',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    approvalStatus: 'approvalStatus',
    approvedAt: 'approvedAt',
    approvedBy: 'approvedBy',
    experience: 'experience',
    motivation: 'motivation',
    rejectionReason: 'rejectionReason'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ChildScalarFieldEnum: {
    id: 'id',
    name: 'name',
    age: 'age',
    gender: 'gender',
    state: 'state',
    district: 'district',
    background: 'background',
    schoolLevel: 'schoolLevel',
    interests: 'interests',
    challenges: 'challenges',
    language: 'language',
    profileImage: 'profileImage',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChildScalarFieldEnum = (typeof ChildScalarFieldEnum)[keyof typeof ChildScalarFieldEnum]


  export const AssignmentScalarFieldEnum: {
    id: 'id',
    volunteerId: 'volunteerId',
    childId: 'childId',
    assignedAt: 'assignedAt',
    isActive: 'isActive',
    notes: 'notes'
  };

  export type AssignmentScalarFieldEnum = (typeof AssignmentScalarFieldEnum)[keyof typeof AssignmentScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    childId: 'childId',
    volunteerId: 'volunteerId',
    scheduledAt: 'scheduledAt',
    startedAt: 'startedAt',
    endedAt: 'endedAt',
    status: 'status',
    sessionType: 'sessionType',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SessionSummaryScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    summary: 'summary',
    sessionDuration: 'sessionDuration',
    sessionType: 'sessionType',
    initialMood: 'initialMood',
    finalMood: 'finalMood',
    moodChanges: 'moodChanges',
    concernsDiscussed: 'concernsDiscussed',
    topicsDiscussed: 'topicsDiscussed',
    culturalStoriesUsed: 'culturalStoriesUsed',
    techniquesUsed: 'techniquesUsed',
    techniqueEffectiveness: 'techniqueEffectiveness',
    storyResponse: 'storyResponse',
    breakthroughs: 'breakthroughs',
    keyInsights: 'keyInsights',
    challengesFaced: 'challengesFaced',
    challengeHandling: 'challengeHandling',
    engagementLevel: 'engagementLevel',
    participationNotes: 'participationNotes',
    progressMade: 'progressMade',
    nextSteps: 'nextSteps',
    actionItems: 'actionItems',
    recommendations: 'recommendations',
    sessionEffectiveness: 'sessionEffectiveness',
    volunteerConfidence: 'volunteerConfidence',
    nextSessionFocus: 'nextSessionFocus',
    nextSessionTiming: 'nextSessionTiming',
    additionalNotes: 'additionalNotes',
    resolutionStatus: 'resolutionStatus',
    followUpNeeded: 'followUpNeeded',
    followUpDate: 'followUpDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionSummaryScalarFieldEnum = (typeof SessionSummaryScalarFieldEnum)[keyof typeof SessionSummaryScalarFieldEnum]


  export const KnowledgeBaseScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    summary: 'summary',
    category: 'category',
    subCategory: 'subCategory',
    fileType: 'fileType',
    fileUrl: 'fileUrl',
    isActive: 'isActive',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    downloadCount: 'downloadCount',
    embeddings: 'embeddings',
    fileSize: 'fileSize',
    isProcessed: 'isProcessed',
    views: 'views'
  };

  export type KnowledgeBaseScalarFieldEnum = (typeof KnowledgeBaseScalarFieldEnum)[keyof typeof KnowledgeBaseScalarFieldEnum]


  export const DocumentChunkScalarFieldEnum: {
    id: 'id',
    knowledgeBaseId: 'knowledgeBaseId',
    content: 'content',
    chunkIndex: 'chunkIndex',
    embeddings: 'embeddings',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type DocumentChunkScalarFieldEnum = (typeof DocumentChunkScalarFieldEnum)[keyof typeof DocumentChunkScalarFieldEnum]


  export const CulturalStoryScalarFieldEnum: {
    id: 'id',
    title: 'title',
    source: 'source',
    summary: 'summary',
    fullStory: 'fullStory',
    themes: 'themes',
    applicableFor: 'applicableFor',
    moralLessons: 'moralLessons',
    tags: 'tags',
    isActive: 'isActive',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CulturalStoryScalarFieldEnum = (typeof CulturalStoryScalarFieldEnum)[keyof typeof CulturalStoryScalarFieldEnum]


  export const ConcernScalarFieldEnum: {
    id: 'id',
    childId: 'childId',
    title: 'title',
    description: 'description',
    category: 'category',
    severity: 'severity',
    status: 'status',
    identifiedAt: 'identifiedAt',
    resolvedAt: 'resolvedAt',
    resolution: 'resolution',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConcernScalarFieldEnum = (typeof ConcernScalarFieldEnum)[keyof typeof ConcernScalarFieldEnum]


  export const ChatMessageScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    userId: 'userId',
    message: 'message',
    response: 'response',
    context: 'context',
    isSystemMsg: 'isSystemMsg',
    createdAt: 'createdAt'
  };

  export type ChatMessageScalarFieldEnum = (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum]


  export const AiChatConversationScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    childId: 'childId',
    volunteerId: 'volunteerId',
    conversationName: 'conversationName',
    context: 'context',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AiChatConversationScalarFieldEnum = (typeof AiChatConversationScalarFieldEnum)[keyof typeof AiChatConversationScalarFieldEnum]


  export const AiChatMessageScalarFieldEnum: {
    id: 'id',
    conversationId: 'conversationId',
    role: 'role',
    content: 'content',
    ragContext: 'ragContext',
    timestamp: 'timestamp',
    metadata: 'metadata'
  };

  export type AiChatMessageScalarFieldEnum = (typeof AiChatMessageScalarFieldEnum)[keyof typeof AiChatMessageScalarFieldEnum]


  export const ConversationMemoryScalarFieldEnum: {
    id: 'id',
    childId: 'childId',
    volunteerId: 'volunteerId',
    sessionId: 'sessionId',
    memoryType: 'memoryType',
    content: 'content',
    importance: 'importance',
    associatedTags: 'associatedTags',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConversationMemoryScalarFieldEnum = (typeof ConversationMemoryScalarFieldEnum)[keyof typeof ConversationMemoryScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category: 'category',
    description: 'description',
    color: 'color',
    createdAt: 'createdAt'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'ApprovalStatus'
   */
  export type EnumApprovalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalStatus'>
    


  /**
   * Reference to a field of type 'ApprovalStatus[]'
   */
  export type ListEnumApprovalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'SessionStatus'
   */
  export type EnumSessionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SessionStatus'>
    


  /**
   * Reference to a field of type 'SessionStatus[]'
   */
  export type ListEnumSessionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SessionStatus[]'>
    


  /**
   * Reference to a field of type 'SessionType'
   */
  export type EnumSessionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SessionType'>
    


  /**
   * Reference to a field of type 'SessionType[]'
   */
  export type ListEnumSessionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SessionType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'ResolutionStatus'
   */
  export type EnumResolutionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ResolutionStatus'>
    


  /**
   * Reference to a field of type 'ResolutionStatus[]'
   */
  export type ListEnumResolutionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ResolutionStatus[]'>
    


  /**
   * Reference to a field of type 'KnowledgeCategory'
   */
  export type EnumKnowledgeCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'KnowledgeCategory'>
    


  /**
   * Reference to a field of type 'KnowledgeCategory[]'
   */
  export type ListEnumKnowledgeCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'KnowledgeCategory[]'>
    


  /**
   * Reference to a field of type 'StorySource'
   */
  export type EnumStorySourceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StorySource'>
    


  /**
   * Reference to a field of type 'StorySource[]'
   */
  export type ListEnumStorySourceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StorySource[]'>
    


  /**
   * Reference to a field of type 'ConcernCategory'
   */
  export type EnumConcernCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConcernCategory'>
    


  /**
   * Reference to a field of type 'ConcernCategory[]'
   */
  export type ListEnumConcernCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConcernCategory[]'>
    


  /**
   * Reference to a field of type 'Severity'
   */
  export type EnumSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Severity'>
    


  /**
   * Reference to a field of type 'Severity[]'
   */
  export type ListEnumSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Severity[]'>
    


  /**
   * Reference to a field of type 'ConcernStatus'
   */
  export type EnumConcernStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConcernStatus'>
    


  /**
   * Reference to a field of type 'ConcernStatus[]'
   */
  export type ListEnumConcernStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConcernStatus[]'>
    


  /**
   * Reference to a field of type 'AiChatRole'
   */
  export type EnumAiChatRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AiChatRole'>
    


  /**
   * Reference to a field of type 'AiChatRole[]'
   */
  export type ListEnumAiChatRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AiChatRole[]'>
    


  /**
   * Reference to a field of type 'MemoryType'
   */
  export type EnumMemoryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MemoryType'>
    


  /**
   * Reference to a field of type 'MemoryType[]'
   */
  export type ListEnumMemoryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MemoryType[]'>
    


  /**
   * Reference to a field of type 'TagCategory'
   */
  export type EnumTagCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TagCategory'>
    


  /**
   * Reference to a field of type 'TagCategory[]'
   */
  export type ListEnumTagCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TagCategory[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    state?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    specialization?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    approvalStatus?: EnumApprovalStatusFilter<"User"> | $Enums.ApprovalStatus
    approvedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    approvedBy?: StringNullableFilter<"User"> | string | null
    experience?: StringNullableFilter<"User"> | string | null
    motivation?: StringNullableFilter<"User"> | string | null
    rejectionReason?: StringNullableFilter<"User"> | string | null
    assignments?: AssignmentListRelationFilter
    chatMessages?: ChatMessageListRelationFilter
    culturalStories?: CulturalStoryListRelationFilter
    knowledgeBase?: KnowledgeBaseListRelationFilter
    sessions?: SessionListRelationFilter
    aiChatConversations?: AiChatConversationListRelationFilter
    conversationMemories?: ConversationMemoryListRelationFilter
    approver?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    approvedUsers?: UserListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    state?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    specialization?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    approvalStatus?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    experience?: SortOrderInput | SortOrder
    motivation?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    assignments?: AssignmentOrderByRelationAggregateInput
    chatMessages?: ChatMessageOrderByRelationAggregateInput
    culturalStories?: CulturalStoryOrderByRelationAggregateInput
    knowledgeBase?: KnowledgeBaseOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    aiChatConversations?: AiChatConversationOrderByRelationAggregateInput
    conversationMemories?: ConversationMemoryOrderByRelationAggregateInput
    approver?: UserOrderByWithRelationInput
    approvedUsers?: UserOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    state?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    specialization?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    approvalStatus?: EnumApprovalStatusFilter<"User"> | $Enums.ApprovalStatus
    approvedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    approvedBy?: StringNullableFilter<"User"> | string | null
    experience?: StringNullableFilter<"User"> | string | null
    motivation?: StringNullableFilter<"User"> | string | null
    rejectionReason?: StringNullableFilter<"User"> | string | null
    assignments?: AssignmentListRelationFilter
    chatMessages?: ChatMessageListRelationFilter
    culturalStories?: CulturalStoryListRelationFilter
    knowledgeBase?: KnowledgeBaseListRelationFilter
    sessions?: SessionListRelationFilter
    aiChatConversations?: AiChatConversationListRelationFilter
    conversationMemories?: ConversationMemoryListRelationFilter
    approver?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    approvedUsers?: UserListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    state?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    specialization?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    approvalStatus?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    experience?: SortOrderInput | SortOrder
    motivation?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    state?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    specialization?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    approvalStatus?: EnumApprovalStatusWithAggregatesFilter<"User"> | $Enums.ApprovalStatus
    approvedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    approvedBy?: StringNullableWithAggregatesFilter<"User"> | string | null
    experience?: StringNullableWithAggregatesFilter<"User"> | string | null
    motivation?: StringNullableWithAggregatesFilter<"User"> | string | null
    rejectionReason?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type ChildWhereInput = {
    AND?: ChildWhereInput | ChildWhereInput[]
    OR?: ChildWhereInput[]
    NOT?: ChildWhereInput | ChildWhereInput[]
    id?: StringFilter<"Child"> | string
    name?: StringFilter<"Child"> | string
    age?: IntFilter<"Child"> | number
    gender?: EnumGenderFilter<"Child"> | $Enums.Gender
    state?: StringFilter<"Child"> | string
    district?: StringNullableFilter<"Child"> | string | null
    background?: StringNullableFilter<"Child"> | string | null
    schoolLevel?: StringNullableFilter<"Child"> | string | null
    interests?: StringNullableListFilter<"Child">
    challenges?: StringNullableListFilter<"Child">
    language?: StringFilter<"Child"> | string
    profileImage?: StringNullableFilter<"Child"> | string | null
    isActive?: BoolFilter<"Child"> | boolean
    createdAt?: DateTimeFilter<"Child"> | Date | string
    updatedAt?: DateTimeFilter<"Child"> | Date | string
    assignments?: AssignmentListRelationFilter
    concerns?: ConcernListRelationFilter
    sessions?: SessionListRelationFilter
    aiChatConversations?: AiChatConversationListRelationFilter
    conversationMemories?: ConversationMemoryListRelationFilter
    tags?: TagListRelationFilter
  }

  export type ChildOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    state?: SortOrder
    district?: SortOrderInput | SortOrder
    background?: SortOrderInput | SortOrder
    schoolLevel?: SortOrderInput | SortOrder
    interests?: SortOrder
    challenges?: SortOrder
    language?: SortOrder
    profileImage?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    assignments?: AssignmentOrderByRelationAggregateInput
    concerns?: ConcernOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    aiChatConversations?: AiChatConversationOrderByRelationAggregateInput
    conversationMemories?: ConversationMemoryOrderByRelationAggregateInput
    tags?: TagOrderByRelationAggregateInput
  }

  export type ChildWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChildWhereInput | ChildWhereInput[]
    OR?: ChildWhereInput[]
    NOT?: ChildWhereInput | ChildWhereInput[]
    name?: StringFilter<"Child"> | string
    age?: IntFilter<"Child"> | number
    gender?: EnumGenderFilter<"Child"> | $Enums.Gender
    state?: StringFilter<"Child"> | string
    district?: StringNullableFilter<"Child"> | string | null
    background?: StringNullableFilter<"Child"> | string | null
    schoolLevel?: StringNullableFilter<"Child"> | string | null
    interests?: StringNullableListFilter<"Child">
    challenges?: StringNullableListFilter<"Child">
    language?: StringFilter<"Child"> | string
    profileImage?: StringNullableFilter<"Child"> | string | null
    isActive?: BoolFilter<"Child"> | boolean
    createdAt?: DateTimeFilter<"Child"> | Date | string
    updatedAt?: DateTimeFilter<"Child"> | Date | string
    assignments?: AssignmentListRelationFilter
    concerns?: ConcernListRelationFilter
    sessions?: SessionListRelationFilter
    aiChatConversations?: AiChatConversationListRelationFilter
    conversationMemories?: ConversationMemoryListRelationFilter
    tags?: TagListRelationFilter
  }, "id">

  export type ChildOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    state?: SortOrder
    district?: SortOrderInput | SortOrder
    background?: SortOrderInput | SortOrder
    schoolLevel?: SortOrderInput | SortOrder
    interests?: SortOrder
    challenges?: SortOrder
    language?: SortOrder
    profileImage?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChildCountOrderByAggregateInput
    _avg?: ChildAvgOrderByAggregateInput
    _max?: ChildMaxOrderByAggregateInput
    _min?: ChildMinOrderByAggregateInput
    _sum?: ChildSumOrderByAggregateInput
  }

  export type ChildScalarWhereWithAggregatesInput = {
    AND?: ChildScalarWhereWithAggregatesInput | ChildScalarWhereWithAggregatesInput[]
    OR?: ChildScalarWhereWithAggregatesInput[]
    NOT?: ChildScalarWhereWithAggregatesInput | ChildScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Child"> | string
    name?: StringWithAggregatesFilter<"Child"> | string
    age?: IntWithAggregatesFilter<"Child"> | number
    gender?: EnumGenderWithAggregatesFilter<"Child"> | $Enums.Gender
    state?: StringWithAggregatesFilter<"Child"> | string
    district?: StringNullableWithAggregatesFilter<"Child"> | string | null
    background?: StringNullableWithAggregatesFilter<"Child"> | string | null
    schoolLevel?: StringNullableWithAggregatesFilter<"Child"> | string | null
    interests?: StringNullableListFilter<"Child">
    challenges?: StringNullableListFilter<"Child">
    language?: StringWithAggregatesFilter<"Child"> | string
    profileImage?: StringNullableWithAggregatesFilter<"Child"> | string | null
    isActive?: BoolWithAggregatesFilter<"Child"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Child"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Child"> | Date | string
  }

  export type AssignmentWhereInput = {
    AND?: AssignmentWhereInput | AssignmentWhereInput[]
    OR?: AssignmentWhereInput[]
    NOT?: AssignmentWhereInput | AssignmentWhereInput[]
    id?: StringFilter<"Assignment"> | string
    volunteerId?: StringFilter<"Assignment"> | string
    childId?: StringFilter<"Assignment"> | string
    assignedAt?: DateTimeFilter<"Assignment"> | Date | string
    isActive?: BoolFilter<"Assignment"> | boolean
    notes?: StringNullableFilter<"Assignment"> | string | null
    child?: XOR<ChildScalarRelationFilter, ChildWhereInput>
    volunteer?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AssignmentOrderByWithRelationInput = {
    id?: SortOrder
    volunteerId?: SortOrder
    childId?: SortOrder
    assignedAt?: SortOrder
    isActive?: SortOrder
    notes?: SortOrderInput | SortOrder
    child?: ChildOrderByWithRelationInput
    volunteer?: UserOrderByWithRelationInput
  }

  export type AssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    volunteerId_childId?: AssignmentVolunteerIdChildIdCompoundUniqueInput
    AND?: AssignmentWhereInput | AssignmentWhereInput[]
    OR?: AssignmentWhereInput[]
    NOT?: AssignmentWhereInput | AssignmentWhereInput[]
    volunteerId?: StringFilter<"Assignment"> | string
    childId?: StringFilter<"Assignment"> | string
    assignedAt?: DateTimeFilter<"Assignment"> | Date | string
    isActive?: BoolFilter<"Assignment"> | boolean
    notes?: StringNullableFilter<"Assignment"> | string | null
    child?: XOR<ChildScalarRelationFilter, ChildWhereInput>
    volunteer?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "volunteerId_childId">

  export type AssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    volunteerId?: SortOrder
    childId?: SortOrder
    assignedAt?: SortOrder
    isActive?: SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: AssignmentCountOrderByAggregateInput
    _max?: AssignmentMaxOrderByAggregateInput
    _min?: AssignmentMinOrderByAggregateInput
  }

  export type AssignmentScalarWhereWithAggregatesInput = {
    AND?: AssignmentScalarWhereWithAggregatesInput | AssignmentScalarWhereWithAggregatesInput[]
    OR?: AssignmentScalarWhereWithAggregatesInput[]
    NOT?: AssignmentScalarWhereWithAggregatesInput | AssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Assignment"> | string
    volunteerId?: StringWithAggregatesFilter<"Assignment"> | string
    childId?: StringWithAggregatesFilter<"Assignment"> | string
    assignedAt?: DateTimeWithAggregatesFilter<"Assignment"> | Date | string
    isActive?: BoolWithAggregatesFilter<"Assignment"> | boolean
    notes?: StringNullableWithAggregatesFilter<"Assignment"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    childId?: StringFilter<"Session"> | string
    volunteerId?: StringFilter<"Session"> | string
    scheduledAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    startedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    endedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    status?: EnumSessionStatusFilter<"Session"> | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFilter<"Session"> | $Enums.SessionType
    notes?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    chatMessages?: ChatMessageListRelationFilter
    aiChatConversations?: AiChatConversationListRelationFilter
    conversationMemories?: ConversationMemoryListRelationFilter
    summary?: XOR<SessionSummaryNullableScalarRelationFilter, SessionSummaryWhereInput> | null
    child?: XOR<ChildScalarRelationFilter, ChildWhereInput>
    volunteer?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    childId?: SortOrder
    volunteerId?: SortOrder
    scheduledAt?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    endedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    sessionType?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatMessages?: ChatMessageOrderByRelationAggregateInput
    aiChatConversations?: AiChatConversationOrderByRelationAggregateInput
    conversationMemories?: ConversationMemoryOrderByRelationAggregateInput
    summary?: SessionSummaryOrderByWithRelationInput
    child?: ChildOrderByWithRelationInput
    volunteer?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    childId?: StringFilter<"Session"> | string
    volunteerId?: StringFilter<"Session"> | string
    scheduledAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    startedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    endedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    status?: EnumSessionStatusFilter<"Session"> | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFilter<"Session"> | $Enums.SessionType
    notes?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    chatMessages?: ChatMessageListRelationFilter
    aiChatConversations?: AiChatConversationListRelationFilter
    conversationMemories?: ConversationMemoryListRelationFilter
    summary?: XOR<SessionSummaryNullableScalarRelationFilter, SessionSummaryWhereInput> | null
    child?: XOR<ChildScalarRelationFilter, ChildWhereInput>
    volunteer?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    childId?: SortOrder
    volunteerId?: SortOrder
    scheduledAt?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    endedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    sessionType?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    childId?: StringWithAggregatesFilter<"Session"> | string
    volunteerId?: StringWithAggregatesFilter<"Session"> | string
    scheduledAt?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    startedAt?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    endedAt?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    status?: EnumSessionStatusWithAggregatesFilter<"Session"> | $Enums.SessionStatus
    sessionType?: EnumSessionTypeWithAggregatesFilter<"Session"> | $Enums.SessionType
    notes?: StringNullableWithAggregatesFilter<"Session"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type SessionSummaryWhereInput = {
    AND?: SessionSummaryWhereInput | SessionSummaryWhereInput[]
    OR?: SessionSummaryWhereInput[]
    NOT?: SessionSummaryWhereInput | SessionSummaryWhereInput[]
    id?: StringFilter<"SessionSummary"> | string
    sessionId?: StringFilter<"SessionSummary"> | string
    summary?: StringFilter<"SessionSummary"> | string
    sessionDuration?: StringNullableFilter<"SessionSummary"> | string | null
    sessionType?: StringNullableFilter<"SessionSummary"> | string | null
    initialMood?: StringNullableFilter<"SessionSummary"> | string | null
    finalMood?: StringNullableFilter<"SessionSummary"> | string | null
    moodChanges?: StringNullableFilter<"SessionSummary"> | string | null
    concernsDiscussed?: StringNullableListFilter<"SessionSummary">
    topicsDiscussed?: StringNullableListFilter<"SessionSummary">
    culturalStoriesUsed?: StringNullableListFilter<"SessionSummary">
    techniquesUsed?: StringNullableListFilter<"SessionSummary">
    techniqueEffectiveness?: JsonNullableFilter<"SessionSummary">
    storyResponse?: StringNullableFilter<"SessionSummary"> | string | null
    breakthroughs?: StringNullableFilter<"SessionSummary"> | string | null
    keyInsights?: StringNullableFilter<"SessionSummary"> | string | null
    challengesFaced?: StringNullableFilter<"SessionSummary"> | string | null
    challengeHandling?: StringNullableFilter<"SessionSummary"> | string | null
    engagementLevel?: StringNullableFilter<"SessionSummary"> | string | null
    participationNotes?: StringNullableFilter<"SessionSummary"> | string | null
    progressMade?: StringNullableFilter<"SessionSummary"> | string | null
    nextSteps?: StringNullableListFilter<"SessionSummary">
    actionItems?: StringNullableListFilter<"SessionSummary">
    recommendations?: StringNullableFilter<"SessionSummary"> | string | null
    sessionEffectiveness?: StringNullableFilter<"SessionSummary"> | string | null
    volunteerConfidence?: StringNullableFilter<"SessionSummary"> | string | null
    nextSessionFocus?: StringNullableFilter<"SessionSummary"> | string | null
    nextSessionTiming?: StringNullableFilter<"SessionSummary"> | string | null
    additionalNotes?: StringNullableFilter<"SessionSummary"> | string | null
    resolutionStatus?: EnumResolutionStatusFilter<"SessionSummary"> | $Enums.ResolutionStatus
    followUpNeeded?: BoolFilter<"SessionSummary"> | boolean
    followUpDate?: DateTimeNullableFilter<"SessionSummary"> | Date | string | null
    createdAt?: DateTimeFilter<"SessionSummary"> | Date | string
    updatedAt?: DateTimeFilter<"SessionSummary"> | Date | string
    session?: XOR<SessionScalarRelationFilter, SessionWhereInput>
  }

  export type SessionSummaryOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    summary?: SortOrder
    sessionDuration?: SortOrderInput | SortOrder
    sessionType?: SortOrderInput | SortOrder
    initialMood?: SortOrderInput | SortOrder
    finalMood?: SortOrderInput | SortOrder
    moodChanges?: SortOrderInput | SortOrder
    concernsDiscussed?: SortOrder
    topicsDiscussed?: SortOrder
    culturalStoriesUsed?: SortOrder
    techniquesUsed?: SortOrder
    techniqueEffectiveness?: SortOrderInput | SortOrder
    storyResponse?: SortOrderInput | SortOrder
    breakthroughs?: SortOrderInput | SortOrder
    keyInsights?: SortOrderInput | SortOrder
    challengesFaced?: SortOrderInput | SortOrder
    challengeHandling?: SortOrderInput | SortOrder
    engagementLevel?: SortOrderInput | SortOrder
    participationNotes?: SortOrderInput | SortOrder
    progressMade?: SortOrderInput | SortOrder
    nextSteps?: SortOrder
    actionItems?: SortOrder
    recommendations?: SortOrderInput | SortOrder
    sessionEffectiveness?: SortOrderInput | SortOrder
    volunteerConfidence?: SortOrderInput | SortOrder
    nextSessionFocus?: SortOrderInput | SortOrder
    nextSessionTiming?: SortOrderInput | SortOrder
    additionalNotes?: SortOrderInput | SortOrder
    resolutionStatus?: SortOrder
    followUpNeeded?: SortOrder
    followUpDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    session?: SessionOrderByWithRelationInput
  }

  export type SessionSummaryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionId?: string
    AND?: SessionSummaryWhereInput | SessionSummaryWhereInput[]
    OR?: SessionSummaryWhereInput[]
    NOT?: SessionSummaryWhereInput | SessionSummaryWhereInput[]
    summary?: StringFilter<"SessionSummary"> | string
    sessionDuration?: StringNullableFilter<"SessionSummary"> | string | null
    sessionType?: StringNullableFilter<"SessionSummary"> | string | null
    initialMood?: StringNullableFilter<"SessionSummary"> | string | null
    finalMood?: StringNullableFilter<"SessionSummary"> | string | null
    moodChanges?: StringNullableFilter<"SessionSummary"> | string | null
    concernsDiscussed?: StringNullableListFilter<"SessionSummary">
    topicsDiscussed?: StringNullableListFilter<"SessionSummary">
    culturalStoriesUsed?: StringNullableListFilter<"SessionSummary">
    techniquesUsed?: StringNullableListFilter<"SessionSummary">
    techniqueEffectiveness?: JsonNullableFilter<"SessionSummary">
    storyResponse?: StringNullableFilter<"SessionSummary"> | string | null
    breakthroughs?: StringNullableFilter<"SessionSummary"> | string | null
    keyInsights?: StringNullableFilter<"SessionSummary"> | string | null
    challengesFaced?: StringNullableFilter<"SessionSummary"> | string | null
    challengeHandling?: StringNullableFilter<"SessionSummary"> | string | null
    engagementLevel?: StringNullableFilter<"SessionSummary"> | string | null
    participationNotes?: StringNullableFilter<"SessionSummary"> | string | null
    progressMade?: StringNullableFilter<"SessionSummary"> | string | null
    nextSteps?: StringNullableListFilter<"SessionSummary">
    actionItems?: StringNullableListFilter<"SessionSummary">
    recommendations?: StringNullableFilter<"SessionSummary"> | string | null
    sessionEffectiveness?: StringNullableFilter<"SessionSummary"> | string | null
    volunteerConfidence?: StringNullableFilter<"SessionSummary"> | string | null
    nextSessionFocus?: StringNullableFilter<"SessionSummary"> | string | null
    nextSessionTiming?: StringNullableFilter<"SessionSummary"> | string | null
    additionalNotes?: StringNullableFilter<"SessionSummary"> | string | null
    resolutionStatus?: EnumResolutionStatusFilter<"SessionSummary"> | $Enums.ResolutionStatus
    followUpNeeded?: BoolFilter<"SessionSummary"> | boolean
    followUpDate?: DateTimeNullableFilter<"SessionSummary"> | Date | string | null
    createdAt?: DateTimeFilter<"SessionSummary"> | Date | string
    updatedAt?: DateTimeFilter<"SessionSummary"> | Date | string
    session?: XOR<SessionScalarRelationFilter, SessionWhereInput>
  }, "id" | "sessionId">

  export type SessionSummaryOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    summary?: SortOrder
    sessionDuration?: SortOrderInput | SortOrder
    sessionType?: SortOrderInput | SortOrder
    initialMood?: SortOrderInput | SortOrder
    finalMood?: SortOrderInput | SortOrder
    moodChanges?: SortOrderInput | SortOrder
    concernsDiscussed?: SortOrder
    topicsDiscussed?: SortOrder
    culturalStoriesUsed?: SortOrder
    techniquesUsed?: SortOrder
    techniqueEffectiveness?: SortOrderInput | SortOrder
    storyResponse?: SortOrderInput | SortOrder
    breakthroughs?: SortOrderInput | SortOrder
    keyInsights?: SortOrderInput | SortOrder
    challengesFaced?: SortOrderInput | SortOrder
    challengeHandling?: SortOrderInput | SortOrder
    engagementLevel?: SortOrderInput | SortOrder
    participationNotes?: SortOrderInput | SortOrder
    progressMade?: SortOrderInput | SortOrder
    nextSteps?: SortOrder
    actionItems?: SortOrder
    recommendations?: SortOrderInput | SortOrder
    sessionEffectiveness?: SortOrderInput | SortOrder
    volunteerConfidence?: SortOrderInput | SortOrder
    nextSessionFocus?: SortOrderInput | SortOrder
    nextSessionTiming?: SortOrderInput | SortOrder
    additionalNotes?: SortOrderInput | SortOrder
    resolutionStatus?: SortOrder
    followUpNeeded?: SortOrder
    followUpDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionSummaryCountOrderByAggregateInput
    _max?: SessionSummaryMaxOrderByAggregateInput
    _min?: SessionSummaryMinOrderByAggregateInput
  }

  export type SessionSummaryScalarWhereWithAggregatesInput = {
    AND?: SessionSummaryScalarWhereWithAggregatesInput | SessionSummaryScalarWhereWithAggregatesInput[]
    OR?: SessionSummaryScalarWhereWithAggregatesInput[]
    NOT?: SessionSummaryScalarWhereWithAggregatesInput | SessionSummaryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SessionSummary"> | string
    sessionId?: StringWithAggregatesFilter<"SessionSummary"> | string
    summary?: StringWithAggregatesFilter<"SessionSummary"> | string
    sessionDuration?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    sessionType?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    initialMood?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    finalMood?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    moodChanges?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    concernsDiscussed?: StringNullableListFilter<"SessionSummary">
    topicsDiscussed?: StringNullableListFilter<"SessionSummary">
    culturalStoriesUsed?: StringNullableListFilter<"SessionSummary">
    techniquesUsed?: StringNullableListFilter<"SessionSummary">
    techniqueEffectiveness?: JsonNullableWithAggregatesFilter<"SessionSummary">
    storyResponse?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    breakthroughs?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    keyInsights?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    challengesFaced?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    challengeHandling?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    engagementLevel?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    participationNotes?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    progressMade?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    nextSteps?: StringNullableListFilter<"SessionSummary">
    actionItems?: StringNullableListFilter<"SessionSummary">
    recommendations?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    sessionEffectiveness?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    volunteerConfidence?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    nextSessionFocus?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    nextSessionTiming?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    additionalNotes?: StringNullableWithAggregatesFilter<"SessionSummary"> | string | null
    resolutionStatus?: EnumResolutionStatusWithAggregatesFilter<"SessionSummary"> | $Enums.ResolutionStatus
    followUpNeeded?: BoolWithAggregatesFilter<"SessionSummary"> | boolean
    followUpDate?: DateTimeNullableWithAggregatesFilter<"SessionSummary"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SessionSummary"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SessionSummary"> | Date | string
  }

  export type KnowledgeBaseWhereInput = {
    AND?: KnowledgeBaseWhereInput | KnowledgeBaseWhereInput[]
    OR?: KnowledgeBaseWhereInput[]
    NOT?: KnowledgeBaseWhereInput | KnowledgeBaseWhereInput[]
    id?: StringFilter<"KnowledgeBase"> | string
    title?: StringFilter<"KnowledgeBase"> | string
    content?: StringFilter<"KnowledgeBase"> | string
    summary?: StringNullableFilter<"KnowledgeBase"> | string | null
    category?: EnumKnowledgeCategoryFilter<"KnowledgeBase"> | $Enums.KnowledgeCategory
    subCategory?: StringNullableFilter<"KnowledgeBase"> | string | null
    fileType?: StringNullableFilter<"KnowledgeBase"> | string | null
    fileUrl?: StringNullableFilter<"KnowledgeBase"> | string | null
    isActive?: BoolFilter<"KnowledgeBase"> | boolean
    createdById?: StringFilter<"KnowledgeBase"> | string
    createdAt?: DateTimeFilter<"KnowledgeBase"> | Date | string
    updatedAt?: DateTimeFilter<"KnowledgeBase"> | Date | string
    downloadCount?: IntFilter<"KnowledgeBase"> | number
    embeddings?: JsonNullableFilter<"KnowledgeBase">
    fileSize?: IntNullableFilter<"KnowledgeBase"> | number | null
    isProcessed?: BoolFilter<"KnowledgeBase"> | boolean
    views?: IntFilter<"KnowledgeBase"> | number
    chunks?: DocumentChunkListRelationFilter
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    tags?: TagListRelationFilter
  }

  export type KnowledgeBaseOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    summary?: SortOrderInput | SortOrder
    category?: SortOrder
    subCategory?: SortOrderInput | SortOrder
    fileType?: SortOrderInput | SortOrder
    fileUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    downloadCount?: SortOrder
    embeddings?: SortOrderInput | SortOrder
    fileSize?: SortOrderInput | SortOrder
    isProcessed?: SortOrder
    views?: SortOrder
    chunks?: DocumentChunkOrderByRelationAggregateInput
    createdBy?: UserOrderByWithRelationInput
    tags?: TagOrderByRelationAggregateInput
  }

  export type KnowledgeBaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: KnowledgeBaseWhereInput | KnowledgeBaseWhereInput[]
    OR?: KnowledgeBaseWhereInput[]
    NOT?: KnowledgeBaseWhereInput | KnowledgeBaseWhereInput[]
    title?: StringFilter<"KnowledgeBase"> | string
    content?: StringFilter<"KnowledgeBase"> | string
    summary?: StringNullableFilter<"KnowledgeBase"> | string | null
    category?: EnumKnowledgeCategoryFilter<"KnowledgeBase"> | $Enums.KnowledgeCategory
    subCategory?: StringNullableFilter<"KnowledgeBase"> | string | null
    fileType?: StringNullableFilter<"KnowledgeBase"> | string | null
    fileUrl?: StringNullableFilter<"KnowledgeBase"> | string | null
    isActive?: BoolFilter<"KnowledgeBase"> | boolean
    createdById?: StringFilter<"KnowledgeBase"> | string
    createdAt?: DateTimeFilter<"KnowledgeBase"> | Date | string
    updatedAt?: DateTimeFilter<"KnowledgeBase"> | Date | string
    downloadCount?: IntFilter<"KnowledgeBase"> | number
    embeddings?: JsonNullableFilter<"KnowledgeBase">
    fileSize?: IntNullableFilter<"KnowledgeBase"> | number | null
    isProcessed?: BoolFilter<"KnowledgeBase"> | boolean
    views?: IntFilter<"KnowledgeBase"> | number
    chunks?: DocumentChunkListRelationFilter
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    tags?: TagListRelationFilter
  }, "id">

  export type KnowledgeBaseOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    summary?: SortOrderInput | SortOrder
    category?: SortOrder
    subCategory?: SortOrderInput | SortOrder
    fileType?: SortOrderInput | SortOrder
    fileUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    downloadCount?: SortOrder
    embeddings?: SortOrderInput | SortOrder
    fileSize?: SortOrderInput | SortOrder
    isProcessed?: SortOrder
    views?: SortOrder
    _count?: KnowledgeBaseCountOrderByAggregateInput
    _avg?: KnowledgeBaseAvgOrderByAggregateInput
    _max?: KnowledgeBaseMaxOrderByAggregateInput
    _min?: KnowledgeBaseMinOrderByAggregateInput
    _sum?: KnowledgeBaseSumOrderByAggregateInput
  }

  export type KnowledgeBaseScalarWhereWithAggregatesInput = {
    AND?: KnowledgeBaseScalarWhereWithAggregatesInput | KnowledgeBaseScalarWhereWithAggregatesInput[]
    OR?: KnowledgeBaseScalarWhereWithAggregatesInput[]
    NOT?: KnowledgeBaseScalarWhereWithAggregatesInput | KnowledgeBaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"KnowledgeBase"> | string
    title?: StringWithAggregatesFilter<"KnowledgeBase"> | string
    content?: StringWithAggregatesFilter<"KnowledgeBase"> | string
    summary?: StringNullableWithAggregatesFilter<"KnowledgeBase"> | string | null
    category?: EnumKnowledgeCategoryWithAggregatesFilter<"KnowledgeBase"> | $Enums.KnowledgeCategory
    subCategory?: StringNullableWithAggregatesFilter<"KnowledgeBase"> | string | null
    fileType?: StringNullableWithAggregatesFilter<"KnowledgeBase"> | string | null
    fileUrl?: StringNullableWithAggregatesFilter<"KnowledgeBase"> | string | null
    isActive?: BoolWithAggregatesFilter<"KnowledgeBase"> | boolean
    createdById?: StringWithAggregatesFilter<"KnowledgeBase"> | string
    createdAt?: DateTimeWithAggregatesFilter<"KnowledgeBase"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KnowledgeBase"> | Date | string
    downloadCount?: IntWithAggregatesFilter<"KnowledgeBase"> | number
    embeddings?: JsonNullableWithAggregatesFilter<"KnowledgeBase">
    fileSize?: IntNullableWithAggregatesFilter<"KnowledgeBase"> | number | null
    isProcessed?: BoolWithAggregatesFilter<"KnowledgeBase"> | boolean
    views?: IntWithAggregatesFilter<"KnowledgeBase"> | number
  }

  export type DocumentChunkWhereInput = {
    AND?: DocumentChunkWhereInput | DocumentChunkWhereInput[]
    OR?: DocumentChunkWhereInput[]
    NOT?: DocumentChunkWhereInput | DocumentChunkWhereInput[]
    id?: StringFilter<"DocumentChunk"> | string
    knowledgeBaseId?: StringFilter<"DocumentChunk"> | string
    content?: StringFilter<"DocumentChunk"> | string
    chunkIndex?: IntFilter<"DocumentChunk"> | number
    embeddings?: JsonNullableFilter<"DocumentChunk">
    metadata?: JsonNullableFilter<"DocumentChunk">
    createdAt?: DateTimeFilter<"DocumentChunk"> | Date | string
    knowledgeBase?: XOR<KnowledgeBaseScalarRelationFilter, KnowledgeBaseWhereInput>
  }

  export type DocumentChunkOrderByWithRelationInput = {
    id?: SortOrder
    knowledgeBaseId?: SortOrder
    content?: SortOrder
    chunkIndex?: SortOrder
    embeddings?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    knowledgeBase?: KnowledgeBaseOrderByWithRelationInput
  }

  export type DocumentChunkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentChunkWhereInput | DocumentChunkWhereInput[]
    OR?: DocumentChunkWhereInput[]
    NOT?: DocumentChunkWhereInput | DocumentChunkWhereInput[]
    knowledgeBaseId?: StringFilter<"DocumentChunk"> | string
    content?: StringFilter<"DocumentChunk"> | string
    chunkIndex?: IntFilter<"DocumentChunk"> | number
    embeddings?: JsonNullableFilter<"DocumentChunk">
    metadata?: JsonNullableFilter<"DocumentChunk">
    createdAt?: DateTimeFilter<"DocumentChunk"> | Date | string
    knowledgeBase?: XOR<KnowledgeBaseScalarRelationFilter, KnowledgeBaseWhereInput>
  }, "id">

  export type DocumentChunkOrderByWithAggregationInput = {
    id?: SortOrder
    knowledgeBaseId?: SortOrder
    content?: SortOrder
    chunkIndex?: SortOrder
    embeddings?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: DocumentChunkCountOrderByAggregateInput
    _avg?: DocumentChunkAvgOrderByAggregateInput
    _max?: DocumentChunkMaxOrderByAggregateInput
    _min?: DocumentChunkMinOrderByAggregateInput
    _sum?: DocumentChunkSumOrderByAggregateInput
  }

  export type DocumentChunkScalarWhereWithAggregatesInput = {
    AND?: DocumentChunkScalarWhereWithAggregatesInput | DocumentChunkScalarWhereWithAggregatesInput[]
    OR?: DocumentChunkScalarWhereWithAggregatesInput[]
    NOT?: DocumentChunkScalarWhereWithAggregatesInput | DocumentChunkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DocumentChunk"> | string
    knowledgeBaseId?: StringWithAggregatesFilter<"DocumentChunk"> | string
    content?: StringWithAggregatesFilter<"DocumentChunk"> | string
    chunkIndex?: IntWithAggregatesFilter<"DocumentChunk"> | number
    embeddings?: JsonNullableWithAggregatesFilter<"DocumentChunk">
    metadata?: JsonNullableWithAggregatesFilter<"DocumentChunk">
    createdAt?: DateTimeWithAggregatesFilter<"DocumentChunk"> | Date | string
  }

  export type CulturalStoryWhereInput = {
    AND?: CulturalStoryWhereInput | CulturalStoryWhereInput[]
    OR?: CulturalStoryWhereInput[]
    NOT?: CulturalStoryWhereInput | CulturalStoryWhereInput[]
    id?: StringFilter<"CulturalStory"> | string
    title?: StringFilter<"CulturalStory"> | string
    source?: EnumStorySourceFilter<"CulturalStory"> | $Enums.StorySource
    summary?: StringFilter<"CulturalStory"> | string
    fullStory?: StringFilter<"CulturalStory"> | string
    themes?: StringNullableListFilter<"CulturalStory">
    applicableFor?: StringNullableListFilter<"CulturalStory">
    moralLessons?: StringNullableListFilter<"CulturalStory">
    tags?: StringNullableListFilter<"CulturalStory">
    isActive?: BoolFilter<"CulturalStory"> | boolean
    createdById?: StringFilter<"CulturalStory"> | string
    createdAt?: DateTimeFilter<"CulturalStory"> | Date | string
    updatedAt?: DateTimeFilter<"CulturalStory"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CulturalStoryOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    source?: SortOrder
    summary?: SortOrder
    fullStory?: SortOrder
    themes?: SortOrder
    applicableFor?: SortOrder
    moralLessons?: SortOrder
    tags?: SortOrder
    isActive?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: UserOrderByWithRelationInput
  }

  export type CulturalStoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CulturalStoryWhereInput | CulturalStoryWhereInput[]
    OR?: CulturalStoryWhereInput[]
    NOT?: CulturalStoryWhereInput | CulturalStoryWhereInput[]
    title?: StringFilter<"CulturalStory"> | string
    source?: EnumStorySourceFilter<"CulturalStory"> | $Enums.StorySource
    summary?: StringFilter<"CulturalStory"> | string
    fullStory?: StringFilter<"CulturalStory"> | string
    themes?: StringNullableListFilter<"CulturalStory">
    applicableFor?: StringNullableListFilter<"CulturalStory">
    moralLessons?: StringNullableListFilter<"CulturalStory">
    tags?: StringNullableListFilter<"CulturalStory">
    isActive?: BoolFilter<"CulturalStory"> | boolean
    createdById?: StringFilter<"CulturalStory"> | string
    createdAt?: DateTimeFilter<"CulturalStory"> | Date | string
    updatedAt?: DateTimeFilter<"CulturalStory"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type CulturalStoryOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    source?: SortOrder
    summary?: SortOrder
    fullStory?: SortOrder
    themes?: SortOrder
    applicableFor?: SortOrder
    moralLessons?: SortOrder
    tags?: SortOrder
    isActive?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CulturalStoryCountOrderByAggregateInput
    _max?: CulturalStoryMaxOrderByAggregateInput
    _min?: CulturalStoryMinOrderByAggregateInput
  }

  export type CulturalStoryScalarWhereWithAggregatesInput = {
    AND?: CulturalStoryScalarWhereWithAggregatesInput | CulturalStoryScalarWhereWithAggregatesInput[]
    OR?: CulturalStoryScalarWhereWithAggregatesInput[]
    NOT?: CulturalStoryScalarWhereWithAggregatesInput | CulturalStoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CulturalStory"> | string
    title?: StringWithAggregatesFilter<"CulturalStory"> | string
    source?: EnumStorySourceWithAggregatesFilter<"CulturalStory"> | $Enums.StorySource
    summary?: StringWithAggregatesFilter<"CulturalStory"> | string
    fullStory?: StringWithAggregatesFilter<"CulturalStory"> | string
    themes?: StringNullableListFilter<"CulturalStory">
    applicableFor?: StringNullableListFilter<"CulturalStory">
    moralLessons?: StringNullableListFilter<"CulturalStory">
    tags?: StringNullableListFilter<"CulturalStory">
    isActive?: BoolWithAggregatesFilter<"CulturalStory"> | boolean
    createdById?: StringWithAggregatesFilter<"CulturalStory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CulturalStory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CulturalStory"> | Date | string
  }

  export type ConcernWhereInput = {
    AND?: ConcernWhereInput | ConcernWhereInput[]
    OR?: ConcernWhereInput[]
    NOT?: ConcernWhereInput | ConcernWhereInput[]
    id?: StringFilter<"Concern"> | string
    childId?: StringFilter<"Concern"> | string
    title?: StringFilter<"Concern"> | string
    description?: StringFilter<"Concern"> | string
    category?: EnumConcernCategoryFilter<"Concern"> | $Enums.ConcernCategory
    severity?: EnumSeverityFilter<"Concern"> | $Enums.Severity
    status?: EnumConcernStatusFilter<"Concern"> | $Enums.ConcernStatus
    identifiedAt?: DateTimeFilter<"Concern"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Concern"> | Date | string | null
    resolution?: StringNullableFilter<"Concern"> | string | null
    createdAt?: DateTimeFilter<"Concern"> | Date | string
    updatedAt?: DateTimeFilter<"Concern"> | Date | string
    child?: XOR<ChildScalarRelationFilter, ChildWhereInput>
  }

  export type ConcernOrderByWithRelationInput = {
    id?: SortOrder
    childId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    identifiedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    resolution?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    child?: ChildOrderByWithRelationInput
  }

  export type ConcernWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConcernWhereInput | ConcernWhereInput[]
    OR?: ConcernWhereInput[]
    NOT?: ConcernWhereInput | ConcernWhereInput[]
    childId?: StringFilter<"Concern"> | string
    title?: StringFilter<"Concern"> | string
    description?: StringFilter<"Concern"> | string
    category?: EnumConcernCategoryFilter<"Concern"> | $Enums.ConcernCategory
    severity?: EnumSeverityFilter<"Concern"> | $Enums.Severity
    status?: EnumConcernStatusFilter<"Concern"> | $Enums.ConcernStatus
    identifiedAt?: DateTimeFilter<"Concern"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Concern"> | Date | string | null
    resolution?: StringNullableFilter<"Concern"> | string | null
    createdAt?: DateTimeFilter<"Concern"> | Date | string
    updatedAt?: DateTimeFilter<"Concern"> | Date | string
    child?: XOR<ChildScalarRelationFilter, ChildWhereInput>
  }, "id">

  export type ConcernOrderByWithAggregationInput = {
    id?: SortOrder
    childId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    identifiedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    resolution?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ConcernCountOrderByAggregateInput
    _max?: ConcernMaxOrderByAggregateInput
    _min?: ConcernMinOrderByAggregateInput
  }

  export type ConcernScalarWhereWithAggregatesInput = {
    AND?: ConcernScalarWhereWithAggregatesInput | ConcernScalarWhereWithAggregatesInput[]
    OR?: ConcernScalarWhereWithAggregatesInput[]
    NOT?: ConcernScalarWhereWithAggregatesInput | ConcernScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Concern"> | string
    childId?: StringWithAggregatesFilter<"Concern"> | string
    title?: StringWithAggregatesFilter<"Concern"> | string
    description?: StringWithAggregatesFilter<"Concern"> | string
    category?: EnumConcernCategoryWithAggregatesFilter<"Concern"> | $Enums.ConcernCategory
    severity?: EnumSeverityWithAggregatesFilter<"Concern"> | $Enums.Severity
    status?: EnumConcernStatusWithAggregatesFilter<"Concern"> | $Enums.ConcernStatus
    identifiedAt?: DateTimeWithAggregatesFilter<"Concern"> | Date | string
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"Concern"> | Date | string | null
    resolution?: StringNullableWithAggregatesFilter<"Concern"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Concern"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Concern"> | Date | string
  }

  export type ChatMessageWhereInput = {
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    id?: StringFilter<"ChatMessage"> | string
    sessionId?: StringNullableFilter<"ChatMessage"> | string | null
    userId?: StringFilter<"ChatMessage"> | string
    message?: StringFilter<"ChatMessage"> | string
    response?: StringNullableFilter<"ChatMessage"> | string | null
    context?: StringNullableFilter<"ChatMessage"> | string | null
    isSystemMsg?: BoolFilter<"ChatMessage"> | boolean
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    session?: XOR<SessionNullableScalarRelationFilter, SessionWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrderInput | SortOrder
    userId?: SortOrder
    message?: SortOrder
    response?: SortOrderInput | SortOrder
    context?: SortOrderInput | SortOrder
    isSystemMsg?: SortOrder
    createdAt?: SortOrder
    session?: SessionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    sessionId?: StringNullableFilter<"ChatMessage"> | string | null
    userId?: StringFilter<"ChatMessage"> | string
    message?: StringFilter<"ChatMessage"> | string
    response?: StringNullableFilter<"ChatMessage"> | string | null
    context?: StringNullableFilter<"ChatMessage"> | string | null
    isSystemMsg?: BoolFilter<"ChatMessage"> | boolean
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    session?: XOR<SessionNullableScalarRelationFilter, SessionWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrderInput | SortOrder
    userId?: SortOrder
    message?: SortOrder
    response?: SortOrderInput | SortOrder
    context?: SortOrderInput | SortOrder
    isSystemMsg?: SortOrder
    createdAt?: SortOrder
    _count?: ChatMessageCountOrderByAggregateInput
    _max?: ChatMessageMaxOrderByAggregateInput
    _min?: ChatMessageMinOrderByAggregateInput
  }

  export type ChatMessageScalarWhereWithAggregatesInput = {
    AND?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    OR?: ChatMessageScalarWhereWithAggregatesInput[]
    NOT?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatMessage"> | string
    sessionId?: StringNullableWithAggregatesFilter<"ChatMessage"> | string | null
    userId?: StringWithAggregatesFilter<"ChatMessage"> | string
    message?: StringWithAggregatesFilter<"ChatMessage"> | string
    response?: StringNullableWithAggregatesFilter<"ChatMessage"> | string | null
    context?: StringNullableWithAggregatesFilter<"ChatMessage"> | string | null
    isSystemMsg?: BoolWithAggregatesFilter<"ChatMessage"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
  }

  export type AiChatConversationWhereInput = {
    AND?: AiChatConversationWhereInput | AiChatConversationWhereInput[]
    OR?: AiChatConversationWhereInput[]
    NOT?: AiChatConversationWhereInput | AiChatConversationWhereInput[]
    id?: StringFilter<"AiChatConversation"> | string
    sessionId?: StringFilter<"AiChatConversation"> | string
    childId?: StringFilter<"AiChatConversation"> | string
    volunteerId?: StringFilter<"AiChatConversation"> | string
    conversationName?: StringNullableFilter<"AiChatConversation"> | string | null
    context?: JsonNullableFilter<"AiChatConversation">
    isActive?: BoolFilter<"AiChatConversation"> | boolean
    createdAt?: DateTimeFilter<"AiChatConversation"> | Date | string
    updatedAt?: DateTimeFilter<"AiChatConversation"> | Date | string
    session?: XOR<SessionScalarRelationFilter, SessionWhereInput>
    child?: XOR<ChildScalarRelationFilter, ChildWhereInput>
    volunteer?: XOR<UserScalarRelationFilter, UserWhereInput>
    messages?: AiChatMessageListRelationFilter
  }

  export type AiChatConversationOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    childId?: SortOrder
    volunteerId?: SortOrder
    conversationName?: SortOrderInput | SortOrder
    context?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    session?: SessionOrderByWithRelationInput
    child?: ChildOrderByWithRelationInput
    volunteer?: UserOrderByWithRelationInput
    messages?: AiChatMessageOrderByRelationAggregateInput
  }

  export type AiChatConversationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AiChatConversationWhereInput | AiChatConversationWhereInput[]
    OR?: AiChatConversationWhereInput[]
    NOT?: AiChatConversationWhereInput | AiChatConversationWhereInput[]
    sessionId?: StringFilter<"AiChatConversation"> | string
    childId?: StringFilter<"AiChatConversation"> | string
    volunteerId?: StringFilter<"AiChatConversation"> | string
    conversationName?: StringNullableFilter<"AiChatConversation"> | string | null
    context?: JsonNullableFilter<"AiChatConversation">
    isActive?: BoolFilter<"AiChatConversation"> | boolean
    createdAt?: DateTimeFilter<"AiChatConversation"> | Date | string
    updatedAt?: DateTimeFilter<"AiChatConversation"> | Date | string
    session?: XOR<SessionScalarRelationFilter, SessionWhereInput>
    child?: XOR<ChildScalarRelationFilter, ChildWhereInput>
    volunteer?: XOR<UserScalarRelationFilter, UserWhereInput>
    messages?: AiChatMessageListRelationFilter
  }, "id">

  export type AiChatConversationOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    childId?: SortOrder
    volunteerId?: SortOrder
    conversationName?: SortOrderInput | SortOrder
    context?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AiChatConversationCountOrderByAggregateInput
    _max?: AiChatConversationMaxOrderByAggregateInput
    _min?: AiChatConversationMinOrderByAggregateInput
  }

  export type AiChatConversationScalarWhereWithAggregatesInput = {
    AND?: AiChatConversationScalarWhereWithAggregatesInput | AiChatConversationScalarWhereWithAggregatesInput[]
    OR?: AiChatConversationScalarWhereWithAggregatesInput[]
    NOT?: AiChatConversationScalarWhereWithAggregatesInput | AiChatConversationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AiChatConversation"> | string
    sessionId?: StringWithAggregatesFilter<"AiChatConversation"> | string
    childId?: StringWithAggregatesFilter<"AiChatConversation"> | string
    volunteerId?: StringWithAggregatesFilter<"AiChatConversation"> | string
    conversationName?: StringNullableWithAggregatesFilter<"AiChatConversation"> | string | null
    context?: JsonNullableWithAggregatesFilter<"AiChatConversation">
    isActive?: BoolWithAggregatesFilter<"AiChatConversation"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"AiChatConversation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AiChatConversation"> | Date | string
  }

  export type AiChatMessageWhereInput = {
    AND?: AiChatMessageWhereInput | AiChatMessageWhereInput[]
    OR?: AiChatMessageWhereInput[]
    NOT?: AiChatMessageWhereInput | AiChatMessageWhereInput[]
    id?: StringFilter<"AiChatMessage"> | string
    conversationId?: StringFilter<"AiChatMessage"> | string
    role?: EnumAiChatRoleFilter<"AiChatMessage"> | $Enums.AiChatRole
    content?: StringFilter<"AiChatMessage"> | string
    ragContext?: JsonNullableFilter<"AiChatMessage">
    timestamp?: DateTimeFilter<"AiChatMessage"> | Date | string
    metadata?: JsonNullableFilter<"AiChatMessage">
    conversation?: XOR<AiChatConversationScalarRelationFilter, AiChatConversationWhereInput>
  }

  export type AiChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    conversationId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    ragContext?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    metadata?: SortOrderInput | SortOrder
    conversation?: AiChatConversationOrderByWithRelationInput
  }

  export type AiChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AiChatMessageWhereInput | AiChatMessageWhereInput[]
    OR?: AiChatMessageWhereInput[]
    NOT?: AiChatMessageWhereInput | AiChatMessageWhereInput[]
    conversationId?: StringFilter<"AiChatMessage"> | string
    role?: EnumAiChatRoleFilter<"AiChatMessage"> | $Enums.AiChatRole
    content?: StringFilter<"AiChatMessage"> | string
    ragContext?: JsonNullableFilter<"AiChatMessage">
    timestamp?: DateTimeFilter<"AiChatMessage"> | Date | string
    metadata?: JsonNullableFilter<"AiChatMessage">
    conversation?: XOR<AiChatConversationScalarRelationFilter, AiChatConversationWhereInput>
  }, "id">

  export type AiChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    conversationId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    ragContext?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    metadata?: SortOrderInput | SortOrder
    _count?: AiChatMessageCountOrderByAggregateInput
    _max?: AiChatMessageMaxOrderByAggregateInput
    _min?: AiChatMessageMinOrderByAggregateInput
  }

  export type AiChatMessageScalarWhereWithAggregatesInput = {
    AND?: AiChatMessageScalarWhereWithAggregatesInput | AiChatMessageScalarWhereWithAggregatesInput[]
    OR?: AiChatMessageScalarWhereWithAggregatesInput[]
    NOT?: AiChatMessageScalarWhereWithAggregatesInput | AiChatMessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AiChatMessage"> | string
    conversationId?: StringWithAggregatesFilter<"AiChatMessage"> | string
    role?: EnumAiChatRoleWithAggregatesFilter<"AiChatMessage"> | $Enums.AiChatRole
    content?: StringWithAggregatesFilter<"AiChatMessage"> | string
    ragContext?: JsonNullableWithAggregatesFilter<"AiChatMessage">
    timestamp?: DateTimeWithAggregatesFilter<"AiChatMessage"> | Date | string
    metadata?: JsonNullableWithAggregatesFilter<"AiChatMessage">
  }

  export type ConversationMemoryWhereInput = {
    AND?: ConversationMemoryWhereInput | ConversationMemoryWhereInput[]
    OR?: ConversationMemoryWhereInput[]
    NOT?: ConversationMemoryWhereInput | ConversationMemoryWhereInput[]
    id?: StringFilter<"ConversationMemory"> | string
    childId?: StringFilter<"ConversationMemory"> | string
    volunteerId?: StringFilter<"ConversationMemory"> | string
    sessionId?: StringNullableFilter<"ConversationMemory"> | string | null
    memoryType?: EnumMemoryTypeFilter<"ConversationMemory"> | $Enums.MemoryType
    content?: StringFilter<"ConversationMemory"> | string
    importance?: IntFilter<"ConversationMemory"> | number
    associatedTags?: StringNullableListFilter<"ConversationMemory">
    expiresAt?: DateTimeNullableFilter<"ConversationMemory"> | Date | string | null
    createdAt?: DateTimeFilter<"ConversationMemory"> | Date | string
    updatedAt?: DateTimeFilter<"ConversationMemory"> | Date | string
    child?: XOR<ChildScalarRelationFilter, ChildWhereInput>
    volunteer?: XOR<UserScalarRelationFilter, UserWhereInput>
    session?: XOR<SessionNullableScalarRelationFilter, SessionWhereInput> | null
  }

  export type ConversationMemoryOrderByWithRelationInput = {
    id?: SortOrder
    childId?: SortOrder
    volunteerId?: SortOrder
    sessionId?: SortOrderInput | SortOrder
    memoryType?: SortOrder
    content?: SortOrder
    importance?: SortOrder
    associatedTags?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    child?: ChildOrderByWithRelationInput
    volunteer?: UserOrderByWithRelationInput
    session?: SessionOrderByWithRelationInput
  }

  export type ConversationMemoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConversationMemoryWhereInput | ConversationMemoryWhereInput[]
    OR?: ConversationMemoryWhereInput[]
    NOT?: ConversationMemoryWhereInput | ConversationMemoryWhereInput[]
    childId?: StringFilter<"ConversationMemory"> | string
    volunteerId?: StringFilter<"ConversationMemory"> | string
    sessionId?: StringNullableFilter<"ConversationMemory"> | string | null
    memoryType?: EnumMemoryTypeFilter<"ConversationMemory"> | $Enums.MemoryType
    content?: StringFilter<"ConversationMemory"> | string
    importance?: IntFilter<"ConversationMemory"> | number
    associatedTags?: StringNullableListFilter<"ConversationMemory">
    expiresAt?: DateTimeNullableFilter<"ConversationMemory"> | Date | string | null
    createdAt?: DateTimeFilter<"ConversationMemory"> | Date | string
    updatedAt?: DateTimeFilter<"ConversationMemory"> | Date | string
    child?: XOR<ChildScalarRelationFilter, ChildWhereInput>
    volunteer?: XOR<UserScalarRelationFilter, UserWhereInput>
    session?: XOR<SessionNullableScalarRelationFilter, SessionWhereInput> | null
  }, "id">

  export type ConversationMemoryOrderByWithAggregationInput = {
    id?: SortOrder
    childId?: SortOrder
    volunteerId?: SortOrder
    sessionId?: SortOrderInput | SortOrder
    memoryType?: SortOrder
    content?: SortOrder
    importance?: SortOrder
    associatedTags?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ConversationMemoryCountOrderByAggregateInput
    _avg?: ConversationMemoryAvgOrderByAggregateInput
    _max?: ConversationMemoryMaxOrderByAggregateInput
    _min?: ConversationMemoryMinOrderByAggregateInput
    _sum?: ConversationMemorySumOrderByAggregateInput
  }

  export type ConversationMemoryScalarWhereWithAggregatesInput = {
    AND?: ConversationMemoryScalarWhereWithAggregatesInput | ConversationMemoryScalarWhereWithAggregatesInput[]
    OR?: ConversationMemoryScalarWhereWithAggregatesInput[]
    NOT?: ConversationMemoryScalarWhereWithAggregatesInput | ConversationMemoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ConversationMemory"> | string
    childId?: StringWithAggregatesFilter<"ConversationMemory"> | string
    volunteerId?: StringWithAggregatesFilter<"ConversationMemory"> | string
    sessionId?: StringNullableWithAggregatesFilter<"ConversationMemory"> | string | null
    memoryType?: EnumMemoryTypeWithAggregatesFilter<"ConversationMemory"> | $Enums.MemoryType
    content?: StringWithAggregatesFilter<"ConversationMemory"> | string
    importance?: IntWithAggregatesFilter<"ConversationMemory"> | number
    associatedTags?: StringNullableListFilter<"ConversationMemory">
    expiresAt?: DateTimeNullableWithAggregatesFilter<"ConversationMemory"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ConversationMemory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ConversationMemory"> | Date | string
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: StringFilter<"Tag"> | string
    name?: StringFilter<"Tag"> | string
    category?: EnumTagCategoryFilter<"Tag"> | $Enums.TagCategory
    description?: StringNullableFilter<"Tag"> | string | null
    color?: StringNullableFilter<"Tag"> | string | null
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    children?: ChildListRelationFilter
    knowledgeBase?: KnowledgeBaseListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    children?: ChildOrderByRelationAggregateInput
    knowledgeBase?: KnowledgeBaseOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    category?: EnumTagCategoryFilter<"Tag"> | $Enums.TagCategory
    description?: StringNullableFilter<"Tag"> | string | null
    color?: StringNullableFilter<"Tag"> | string | null
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    children?: ChildListRelationFilter
    knowledgeBase?: KnowledgeBaseListRelationFilter
  }, "id" | "name">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tag"> | string
    name?: StringWithAggregatesFilter<"Tag"> | string
    category?: EnumTagCategoryWithAggregatesFilter<"Tag"> | $Enums.TagCategory
    description?: StringNullableWithAggregatesFilter<"Tag"> | string | null
    color?: StringNullableWithAggregatesFilter<"Tag"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentCreateNestedManyWithoutVolunteerInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    culturalStories?: CulturalStoryCreateNestedManyWithoutCreatedByInput
    knowledgeBase?: KnowledgeBaseCreateNestedManyWithoutCreatedByInput
    sessions?: SessionCreateNestedManyWithoutVolunteerInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutVolunteerInput
    approver?: UserCreateNestedOneWithoutApprovedUsersInput
    approvedUsers?: UserCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    approvedBy?: string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentUncheckedCreateNestedManyWithoutVolunteerInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    culturalStories?: CulturalStoryUncheckedCreateNestedManyWithoutCreatedByInput
    knowledgeBase?: KnowledgeBaseUncheckedCreateNestedManyWithoutCreatedByInput
    sessions?: SessionUncheckedCreateNestedManyWithoutVolunteerInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutVolunteerInput
    approvedUsers?: UserUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUpdateManyWithoutVolunteerNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    culturalStories?: CulturalStoryUpdateManyWithoutCreatedByNestedInput
    knowledgeBase?: KnowledgeBaseUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUpdateManyWithoutVolunteerNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutVolunteerNestedInput
    approver?: UserUpdateOneWithoutApprovedUsersNestedInput
    approvedUsers?: UserUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUncheckedUpdateManyWithoutVolunteerNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    culturalStories?: CulturalStoryUncheckedUpdateManyWithoutCreatedByNestedInput
    knowledgeBase?: KnowledgeBaseUncheckedUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutVolunteerNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutVolunteerNestedInput
    approvedUsers?: UserUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    approvedBy?: string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChildCreateInput = {
    id?: string
    name: string
    age: number
    gender: $Enums.Gender
    state: string
    district?: string | null
    background?: string | null
    schoolLevel?: string | null
    interests?: ChildCreateinterestsInput | string[]
    challenges?: ChildCreatechallengesInput | string[]
    language?: string
    profileImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: AssignmentCreateNestedManyWithoutChildInput
    concerns?: ConcernCreateNestedManyWithoutChildInput
    sessions?: SessionCreateNestedManyWithoutChildInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutChildInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutChildInput
    tags?: TagCreateNestedManyWithoutChildrenInput
  }

  export type ChildUncheckedCreateInput = {
    id?: string
    name: string
    age: number
    gender: $Enums.Gender
    state: string
    district?: string | null
    background?: string | null
    schoolLevel?: string | null
    interests?: ChildCreateinterestsInput | string[]
    challenges?: ChildCreatechallengesInput | string[]
    language?: string
    profileImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutChildInput
    concerns?: ConcernUncheckedCreateNestedManyWithoutChildInput
    sessions?: SessionUncheckedCreateNestedManyWithoutChildInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutChildInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutChildInput
    tags?: TagUncheckedCreateNestedManyWithoutChildrenInput
  }

  export type ChildUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    state?: StringFieldUpdateOperationsInput | string
    district?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    schoolLevel?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    challenges?: ChildUpdatechallengesInput | string[]
    language?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: AssignmentUpdateManyWithoutChildNestedInput
    concerns?: ConcernUpdateManyWithoutChildNestedInput
    sessions?: SessionUpdateManyWithoutChildNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutChildNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutChildNestedInput
    tags?: TagUpdateManyWithoutChildrenNestedInput
  }

  export type ChildUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    state?: StringFieldUpdateOperationsInput | string
    district?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    schoolLevel?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    challenges?: ChildUpdatechallengesInput | string[]
    language?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: AssignmentUncheckedUpdateManyWithoutChildNestedInput
    concerns?: ConcernUncheckedUpdateManyWithoutChildNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutChildNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutChildNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutChildNestedInput
    tags?: TagUncheckedUpdateManyWithoutChildrenNestedInput
  }

  export type ChildCreateManyInput = {
    id?: string
    name: string
    age: number
    gender: $Enums.Gender
    state: string
    district?: string | null
    background?: string | null
    schoolLevel?: string | null
    interests?: ChildCreateinterestsInput | string[]
    challenges?: ChildCreatechallengesInput | string[]
    language?: string
    profileImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChildUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    state?: StringFieldUpdateOperationsInput | string
    district?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    schoolLevel?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    challenges?: ChildUpdatechallengesInput | string[]
    language?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChildUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    state?: StringFieldUpdateOperationsInput | string
    district?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    schoolLevel?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    challenges?: ChildUpdatechallengesInput | string[]
    language?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentCreateInput = {
    id?: string
    assignedAt?: Date | string
    isActive?: boolean
    notes?: string | null
    child: ChildCreateNestedOneWithoutAssignmentsInput
    volunteer: UserCreateNestedOneWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateInput = {
    id?: string
    volunteerId: string
    childId: string
    assignedAt?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type AssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    child?: ChildUpdateOneRequiredWithoutAssignmentsNestedInput
    volunteer?: UserUpdateOneRequiredWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssignmentCreateManyInput = {
    id?: string
    volunteerId: string
    childId: string
    assignedAt?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type AssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    status?: $Enums.SessionStatus
    sessionType?: $Enums.SessionType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageCreateNestedManyWithoutSessionInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutSessionInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutSessionInput
    summary?: SessionSummaryCreateNestedOneWithoutSessionInput
    child: ChildCreateNestedOneWithoutSessionsInput
    volunteer: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    childId: string
    volunteerId: string
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    status?: $Enums.SessionStatus
    sessionType?: $Enums.SessionType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSessionInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutSessionInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutSessionInput
    summary?: SessionSummaryUncheckedCreateNestedOneWithoutSessionInput
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUpdateManyWithoutSessionNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutSessionNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutSessionNestedInput
    summary?: SessionSummaryUpdateOneWithoutSessionNestedInput
    child?: ChildUpdateOneRequiredWithoutSessionsNestedInput
    volunteer?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSessionNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutSessionNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutSessionNestedInput
    summary?: SessionSummaryUncheckedUpdateOneWithoutSessionNestedInput
  }

  export type SessionCreateManyInput = {
    id?: string
    childId: string
    volunteerId: string
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    status?: $Enums.SessionStatus
    sessionType?: $Enums.SessionType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionSummaryCreateInput = {
    id?: string
    summary: string
    sessionDuration?: string | null
    sessionType?: string | null
    initialMood?: string | null
    finalMood?: string | null
    moodChanges?: string | null
    concernsDiscussed?: SessionSummaryCreateconcernsDiscussedInput | string[]
    topicsDiscussed?: SessionSummaryCreatetopicsDiscussedInput | string[]
    culturalStoriesUsed?: SessionSummaryCreateculturalStoriesUsedInput | string[]
    techniquesUsed?: SessionSummaryCreatetechniquesUsedInput | string[]
    techniqueEffectiveness?: NullableJsonNullValueInput | InputJsonValue
    storyResponse?: string | null
    breakthroughs?: string | null
    keyInsights?: string | null
    challengesFaced?: string | null
    challengeHandling?: string | null
    engagementLevel?: string | null
    participationNotes?: string | null
    progressMade?: string | null
    nextSteps?: SessionSummaryCreatenextStepsInput | string[]
    actionItems?: SessionSummaryCreateactionItemsInput | string[]
    recommendations?: string | null
    sessionEffectiveness?: string | null
    volunteerConfidence?: string | null
    nextSessionFocus?: string | null
    nextSessionTiming?: string | null
    additionalNotes?: string | null
    resolutionStatus?: $Enums.ResolutionStatus
    followUpNeeded?: boolean
    followUpDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    session: SessionCreateNestedOneWithoutSummaryInput
  }

  export type SessionSummaryUncheckedCreateInput = {
    id?: string
    sessionId: string
    summary: string
    sessionDuration?: string | null
    sessionType?: string | null
    initialMood?: string | null
    finalMood?: string | null
    moodChanges?: string | null
    concernsDiscussed?: SessionSummaryCreateconcernsDiscussedInput | string[]
    topicsDiscussed?: SessionSummaryCreatetopicsDiscussedInput | string[]
    culturalStoriesUsed?: SessionSummaryCreateculturalStoriesUsedInput | string[]
    techniquesUsed?: SessionSummaryCreatetechniquesUsedInput | string[]
    techniqueEffectiveness?: NullableJsonNullValueInput | InputJsonValue
    storyResponse?: string | null
    breakthroughs?: string | null
    keyInsights?: string | null
    challengesFaced?: string | null
    challengeHandling?: string | null
    engagementLevel?: string | null
    participationNotes?: string | null
    progressMade?: string | null
    nextSteps?: SessionSummaryCreatenextStepsInput | string[]
    actionItems?: SessionSummaryCreateactionItemsInput | string[]
    recommendations?: string | null
    sessionEffectiveness?: string | null
    volunteerConfidence?: string | null
    nextSessionFocus?: string | null
    nextSessionTiming?: string | null
    additionalNotes?: string | null
    resolutionStatus?: $Enums.ResolutionStatus
    followUpNeeded?: boolean
    followUpDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionSummaryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    sessionDuration?: NullableStringFieldUpdateOperationsInput | string | null
    sessionType?: NullableStringFieldUpdateOperationsInput | string | null
    initialMood?: NullableStringFieldUpdateOperationsInput | string | null
    finalMood?: NullableStringFieldUpdateOperationsInput | string | null
    moodChanges?: NullableStringFieldUpdateOperationsInput | string | null
    concernsDiscussed?: SessionSummaryUpdateconcernsDiscussedInput | string[]
    topicsDiscussed?: SessionSummaryUpdatetopicsDiscussedInput | string[]
    culturalStoriesUsed?: SessionSummaryUpdateculturalStoriesUsedInput | string[]
    techniquesUsed?: SessionSummaryUpdatetechniquesUsedInput | string[]
    techniqueEffectiveness?: NullableJsonNullValueInput | InputJsonValue
    storyResponse?: NullableStringFieldUpdateOperationsInput | string | null
    breakthroughs?: NullableStringFieldUpdateOperationsInput | string | null
    keyInsights?: NullableStringFieldUpdateOperationsInput | string | null
    challengesFaced?: NullableStringFieldUpdateOperationsInput | string | null
    challengeHandling?: NullableStringFieldUpdateOperationsInput | string | null
    engagementLevel?: NullableStringFieldUpdateOperationsInput | string | null
    participationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    progressMade?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: SessionSummaryUpdatenextStepsInput | string[]
    actionItems?: SessionSummaryUpdateactionItemsInput | string[]
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    sessionEffectiveness?: NullableStringFieldUpdateOperationsInput | string | null
    volunteerConfidence?: NullableStringFieldUpdateOperationsInput | string | null
    nextSessionFocus?: NullableStringFieldUpdateOperationsInput | string | null
    nextSessionTiming?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionStatus?: EnumResolutionStatusFieldUpdateOperationsInput | $Enums.ResolutionStatus
    followUpNeeded?: BoolFieldUpdateOperationsInput | boolean
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneRequiredWithoutSummaryNestedInput
  }

  export type SessionSummaryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    sessionDuration?: NullableStringFieldUpdateOperationsInput | string | null
    sessionType?: NullableStringFieldUpdateOperationsInput | string | null
    initialMood?: NullableStringFieldUpdateOperationsInput | string | null
    finalMood?: NullableStringFieldUpdateOperationsInput | string | null
    moodChanges?: NullableStringFieldUpdateOperationsInput | string | null
    concernsDiscussed?: SessionSummaryUpdateconcernsDiscussedInput | string[]
    topicsDiscussed?: SessionSummaryUpdatetopicsDiscussedInput | string[]
    culturalStoriesUsed?: SessionSummaryUpdateculturalStoriesUsedInput | string[]
    techniquesUsed?: SessionSummaryUpdatetechniquesUsedInput | string[]
    techniqueEffectiveness?: NullableJsonNullValueInput | InputJsonValue
    storyResponse?: NullableStringFieldUpdateOperationsInput | string | null
    breakthroughs?: NullableStringFieldUpdateOperationsInput | string | null
    keyInsights?: NullableStringFieldUpdateOperationsInput | string | null
    challengesFaced?: NullableStringFieldUpdateOperationsInput | string | null
    challengeHandling?: NullableStringFieldUpdateOperationsInput | string | null
    engagementLevel?: NullableStringFieldUpdateOperationsInput | string | null
    participationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    progressMade?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: SessionSummaryUpdatenextStepsInput | string[]
    actionItems?: SessionSummaryUpdateactionItemsInput | string[]
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    sessionEffectiveness?: NullableStringFieldUpdateOperationsInput | string | null
    volunteerConfidence?: NullableStringFieldUpdateOperationsInput | string | null
    nextSessionFocus?: NullableStringFieldUpdateOperationsInput | string | null
    nextSessionTiming?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionStatus?: EnumResolutionStatusFieldUpdateOperationsInput | $Enums.ResolutionStatus
    followUpNeeded?: BoolFieldUpdateOperationsInput | boolean
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionSummaryCreateManyInput = {
    id?: string
    sessionId: string
    summary: string
    sessionDuration?: string | null
    sessionType?: string | null
    initialMood?: string | null
    finalMood?: string | null
    moodChanges?: string | null
    concernsDiscussed?: SessionSummaryCreateconcernsDiscussedInput | string[]
    topicsDiscussed?: SessionSummaryCreatetopicsDiscussedInput | string[]
    culturalStoriesUsed?: SessionSummaryCreateculturalStoriesUsedInput | string[]
    techniquesUsed?: SessionSummaryCreatetechniquesUsedInput | string[]
    techniqueEffectiveness?: NullableJsonNullValueInput | InputJsonValue
    storyResponse?: string | null
    breakthroughs?: string | null
    keyInsights?: string | null
    challengesFaced?: string | null
    challengeHandling?: string | null
    engagementLevel?: string | null
    participationNotes?: string | null
    progressMade?: string | null
    nextSteps?: SessionSummaryCreatenextStepsInput | string[]
    actionItems?: SessionSummaryCreateactionItemsInput | string[]
    recommendations?: string | null
    sessionEffectiveness?: string | null
    volunteerConfidence?: string | null
    nextSessionFocus?: string | null
    nextSessionTiming?: string | null
    additionalNotes?: string | null
    resolutionStatus?: $Enums.ResolutionStatus
    followUpNeeded?: boolean
    followUpDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionSummaryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    sessionDuration?: NullableStringFieldUpdateOperationsInput | string | null
    sessionType?: NullableStringFieldUpdateOperationsInput | string | null
    initialMood?: NullableStringFieldUpdateOperationsInput | string | null
    finalMood?: NullableStringFieldUpdateOperationsInput | string | null
    moodChanges?: NullableStringFieldUpdateOperationsInput | string | null
    concernsDiscussed?: SessionSummaryUpdateconcernsDiscussedInput | string[]
    topicsDiscussed?: SessionSummaryUpdatetopicsDiscussedInput | string[]
    culturalStoriesUsed?: SessionSummaryUpdateculturalStoriesUsedInput | string[]
    techniquesUsed?: SessionSummaryUpdatetechniquesUsedInput | string[]
    techniqueEffectiveness?: NullableJsonNullValueInput | InputJsonValue
    storyResponse?: NullableStringFieldUpdateOperationsInput | string | null
    breakthroughs?: NullableStringFieldUpdateOperationsInput | string | null
    keyInsights?: NullableStringFieldUpdateOperationsInput | string | null
    challengesFaced?: NullableStringFieldUpdateOperationsInput | string | null
    challengeHandling?: NullableStringFieldUpdateOperationsInput | string | null
    engagementLevel?: NullableStringFieldUpdateOperationsInput | string | null
    participationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    progressMade?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: SessionSummaryUpdatenextStepsInput | string[]
    actionItems?: SessionSummaryUpdateactionItemsInput | string[]
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    sessionEffectiveness?: NullableStringFieldUpdateOperationsInput | string | null
    volunteerConfidence?: NullableStringFieldUpdateOperationsInput | string | null
    nextSessionFocus?: NullableStringFieldUpdateOperationsInput | string | null
    nextSessionTiming?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionStatus?: EnumResolutionStatusFieldUpdateOperationsInput | $Enums.ResolutionStatus
    followUpNeeded?: BoolFieldUpdateOperationsInput | boolean
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionSummaryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    sessionDuration?: NullableStringFieldUpdateOperationsInput | string | null
    sessionType?: NullableStringFieldUpdateOperationsInput | string | null
    initialMood?: NullableStringFieldUpdateOperationsInput | string | null
    finalMood?: NullableStringFieldUpdateOperationsInput | string | null
    moodChanges?: NullableStringFieldUpdateOperationsInput | string | null
    concernsDiscussed?: SessionSummaryUpdateconcernsDiscussedInput | string[]
    topicsDiscussed?: SessionSummaryUpdatetopicsDiscussedInput | string[]
    culturalStoriesUsed?: SessionSummaryUpdateculturalStoriesUsedInput | string[]
    techniquesUsed?: SessionSummaryUpdatetechniquesUsedInput | string[]
    techniqueEffectiveness?: NullableJsonNullValueInput | InputJsonValue
    storyResponse?: NullableStringFieldUpdateOperationsInput | string | null
    breakthroughs?: NullableStringFieldUpdateOperationsInput | string | null
    keyInsights?: NullableStringFieldUpdateOperationsInput | string | null
    challengesFaced?: NullableStringFieldUpdateOperationsInput | string | null
    challengeHandling?: NullableStringFieldUpdateOperationsInput | string | null
    engagementLevel?: NullableStringFieldUpdateOperationsInput | string | null
    participationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    progressMade?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: SessionSummaryUpdatenextStepsInput | string[]
    actionItems?: SessionSummaryUpdateactionItemsInput | string[]
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    sessionEffectiveness?: NullableStringFieldUpdateOperationsInput | string | null
    volunteerConfidence?: NullableStringFieldUpdateOperationsInput | string | null
    nextSessionFocus?: NullableStringFieldUpdateOperationsInput | string | null
    nextSessionTiming?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionStatus?: EnumResolutionStatusFieldUpdateOperationsInput | $Enums.ResolutionStatus
    followUpNeeded?: BoolFieldUpdateOperationsInput | boolean
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnowledgeBaseCreateInput = {
    id?: string
    title: string
    content: string
    summary?: string | null
    category: $Enums.KnowledgeCategory
    subCategory?: string | null
    fileType?: string | null
    fileUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    downloadCount?: number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: number | null
    isProcessed?: boolean
    views?: number
    chunks?: DocumentChunkCreateNestedManyWithoutKnowledgeBaseInput
    createdBy: UserCreateNestedOneWithoutKnowledgeBaseInput
    tags?: TagCreateNestedManyWithoutKnowledgeBaseInput
  }

  export type KnowledgeBaseUncheckedCreateInput = {
    id?: string
    title: string
    content: string
    summary?: string | null
    category: $Enums.KnowledgeCategory
    subCategory?: string | null
    fileType?: string | null
    fileUrl?: string | null
    isActive?: boolean
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    downloadCount?: number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: number | null
    isProcessed?: boolean
    views?: number
    chunks?: DocumentChunkUncheckedCreateNestedManyWithoutKnowledgeBaseInput
    tags?: TagUncheckedCreateNestedManyWithoutKnowledgeBaseInput
  }

  export type KnowledgeBaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumKnowledgeCategoryFieldUpdateOperationsInput | $Enums.KnowledgeCategory
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    downloadCount?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    chunks?: DocumentChunkUpdateManyWithoutKnowledgeBaseNestedInput
    createdBy?: UserUpdateOneRequiredWithoutKnowledgeBaseNestedInput
    tags?: TagUpdateManyWithoutKnowledgeBaseNestedInput
  }

  export type KnowledgeBaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumKnowledgeCategoryFieldUpdateOperationsInput | $Enums.KnowledgeCategory
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    downloadCount?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    chunks?: DocumentChunkUncheckedUpdateManyWithoutKnowledgeBaseNestedInput
    tags?: TagUncheckedUpdateManyWithoutKnowledgeBaseNestedInput
  }

  export type KnowledgeBaseCreateManyInput = {
    id?: string
    title: string
    content: string
    summary?: string | null
    category: $Enums.KnowledgeCategory
    subCategory?: string | null
    fileType?: string | null
    fileUrl?: string | null
    isActive?: boolean
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    downloadCount?: number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: number | null
    isProcessed?: boolean
    views?: number
  }

  export type KnowledgeBaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumKnowledgeCategoryFieldUpdateOperationsInput | $Enums.KnowledgeCategory
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    downloadCount?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
  }

  export type KnowledgeBaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumKnowledgeCategoryFieldUpdateOperationsInput | $Enums.KnowledgeCategory
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    downloadCount?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentChunkCreateInput = {
    id?: string
    content: string
    chunkIndex: number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    knowledgeBase: KnowledgeBaseCreateNestedOneWithoutChunksInput
  }

  export type DocumentChunkUncheckedCreateInput = {
    id?: string
    knowledgeBaseId: string
    content: string
    chunkIndex: number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type DocumentChunkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    chunkIndex?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knowledgeBase?: KnowledgeBaseUpdateOneRequiredWithoutChunksNestedInput
  }

  export type DocumentChunkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    knowledgeBaseId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    chunkIndex?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentChunkCreateManyInput = {
    id?: string
    knowledgeBaseId: string
    content: string
    chunkIndex: number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type DocumentChunkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    chunkIndex?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentChunkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    knowledgeBaseId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    chunkIndex?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CulturalStoryCreateInput = {
    id?: string
    title: string
    source: $Enums.StorySource
    summary: string
    fullStory: string
    themes?: CulturalStoryCreatethemesInput | string[]
    applicableFor?: CulturalStoryCreateapplicableForInput | string[]
    moralLessons?: CulturalStoryCreatemoralLessonsInput | string[]
    tags?: CulturalStoryCreatetagsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCulturalStoriesInput
  }

  export type CulturalStoryUncheckedCreateInput = {
    id?: string
    title: string
    source: $Enums.StorySource
    summary: string
    fullStory: string
    themes?: CulturalStoryCreatethemesInput | string[]
    applicableFor?: CulturalStoryCreateapplicableForInput | string[]
    moralLessons?: CulturalStoryCreatemoralLessonsInput | string[]
    tags?: CulturalStoryCreatetagsInput | string[]
    isActive?: boolean
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CulturalStoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    source?: EnumStorySourceFieldUpdateOperationsInput | $Enums.StorySource
    summary?: StringFieldUpdateOperationsInput | string
    fullStory?: StringFieldUpdateOperationsInput | string
    themes?: CulturalStoryUpdatethemesInput | string[]
    applicableFor?: CulturalStoryUpdateapplicableForInput | string[]
    moralLessons?: CulturalStoryUpdatemoralLessonsInput | string[]
    tags?: CulturalStoryUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCulturalStoriesNestedInput
  }

  export type CulturalStoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    source?: EnumStorySourceFieldUpdateOperationsInput | $Enums.StorySource
    summary?: StringFieldUpdateOperationsInput | string
    fullStory?: StringFieldUpdateOperationsInput | string
    themes?: CulturalStoryUpdatethemesInput | string[]
    applicableFor?: CulturalStoryUpdateapplicableForInput | string[]
    moralLessons?: CulturalStoryUpdatemoralLessonsInput | string[]
    tags?: CulturalStoryUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CulturalStoryCreateManyInput = {
    id?: string
    title: string
    source: $Enums.StorySource
    summary: string
    fullStory: string
    themes?: CulturalStoryCreatethemesInput | string[]
    applicableFor?: CulturalStoryCreateapplicableForInput | string[]
    moralLessons?: CulturalStoryCreatemoralLessonsInput | string[]
    tags?: CulturalStoryCreatetagsInput | string[]
    isActive?: boolean
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CulturalStoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    source?: EnumStorySourceFieldUpdateOperationsInput | $Enums.StorySource
    summary?: StringFieldUpdateOperationsInput | string
    fullStory?: StringFieldUpdateOperationsInput | string
    themes?: CulturalStoryUpdatethemesInput | string[]
    applicableFor?: CulturalStoryUpdateapplicableForInput | string[]
    moralLessons?: CulturalStoryUpdatemoralLessonsInput | string[]
    tags?: CulturalStoryUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CulturalStoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    source?: EnumStorySourceFieldUpdateOperationsInput | $Enums.StorySource
    summary?: StringFieldUpdateOperationsInput | string
    fullStory?: StringFieldUpdateOperationsInput | string
    themes?: CulturalStoryUpdatethemesInput | string[]
    applicableFor?: CulturalStoryUpdateapplicableForInput | string[]
    moralLessons?: CulturalStoryUpdatemoralLessonsInput | string[]
    tags?: CulturalStoryUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConcernCreateInput = {
    id?: string
    title: string
    description: string
    category: $Enums.ConcernCategory
    severity?: $Enums.Severity
    status?: $Enums.ConcernStatus
    identifiedAt?: Date | string
    resolvedAt?: Date | string | null
    resolution?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    child: ChildCreateNestedOneWithoutConcernsInput
  }

  export type ConcernUncheckedCreateInput = {
    id?: string
    childId: string
    title: string
    description: string
    category: $Enums.ConcernCategory
    severity?: $Enums.Severity
    status?: $Enums.ConcernStatus
    identifiedAt?: Date | string
    resolvedAt?: Date | string | null
    resolution?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConcernUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumConcernCategoryFieldUpdateOperationsInput | $Enums.ConcernCategory
    severity?: EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
    status?: EnumConcernStatusFieldUpdateOperationsInput | $Enums.ConcernStatus
    identifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    child?: ChildUpdateOneRequiredWithoutConcernsNestedInput
  }

  export type ConcernUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumConcernCategoryFieldUpdateOperationsInput | $Enums.ConcernCategory
    severity?: EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
    status?: EnumConcernStatusFieldUpdateOperationsInput | $Enums.ConcernStatus
    identifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConcernCreateManyInput = {
    id?: string
    childId: string
    title: string
    description: string
    category: $Enums.ConcernCategory
    severity?: $Enums.Severity
    status?: $Enums.ConcernStatus
    identifiedAt?: Date | string
    resolvedAt?: Date | string | null
    resolution?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConcernUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumConcernCategoryFieldUpdateOperationsInput | $Enums.ConcernCategory
    severity?: EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
    status?: EnumConcernStatusFieldUpdateOperationsInput | $Enums.ConcernStatus
    identifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConcernUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumConcernCategoryFieldUpdateOperationsInput | $Enums.ConcernCategory
    severity?: EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
    status?: EnumConcernStatusFieldUpdateOperationsInput | $Enums.ConcernStatus
    identifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateInput = {
    id?: string
    message: string
    response?: string | null
    context?: string | null
    isSystemMsg?: boolean
    createdAt?: Date | string
    session?: SessionCreateNestedOneWithoutChatMessagesInput
    user: UserCreateNestedOneWithoutChatMessagesInput
  }

  export type ChatMessageUncheckedCreateInput = {
    id?: string
    sessionId?: string | null
    userId: string
    message: string
    response?: string | null
    context?: string | null
    isSystemMsg?: boolean
    createdAt?: Date | string
  }

  export type ChatMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableStringFieldUpdateOperationsInput | string | null
    isSystemMsg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneWithoutChatMessagesNestedInput
    user?: UserUpdateOneRequiredWithoutChatMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableStringFieldUpdateOperationsInput | string | null
    isSystemMsg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateManyInput = {
    id?: string
    sessionId?: string | null
    userId: string
    message: string
    response?: string | null
    context?: string | null
    isSystemMsg?: boolean
    createdAt?: Date | string
  }

  export type ChatMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableStringFieldUpdateOperationsInput | string | null
    isSystemMsg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableStringFieldUpdateOperationsInput | string | null
    isSystemMsg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatConversationCreateInput = {
    id?: string
    conversationName?: string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    session: SessionCreateNestedOneWithoutAiChatConversationsInput
    child: ChildCreateNestedOneWithoutAiChatConversationsInput
    volunteer: UserCreateNestedOneWithoutAiChatConversationsInput
    messages?: AiChatMessageCreateNestedManyWithoutConversationInput
  }

  export type AiChatConversationUncheckedCreateInput = {
    id?: string
    sessionId: string
    childId: string
    volunteerId: string
    conversationName?: string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: AiChatMessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type AiChatConversationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    conversationName?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneRequiredWithoutAiChatConversationsNestedInput
    child?: ChildUpdateOneRequiredWithoutAiChatConversationsNestedInput
    volunteer?: UserUpdateOneRequiredWithoutAiChatConversationsNestedInput
    messages?: AiChatMessageUpdateManyWithoutConversationNestedInput
  }

  export type AiChatConversationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    conversationName?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: AiChatMessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type AiChatConversationCreateManyInput = {
    id?: string
    sessionId: string
    childId: string
    volunteerId: string
    conversationName?: string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AiChatConversationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    conversationName?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatConversationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    conversationName?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatMessageCreateInput = {
    id?: string
    role: $Enums.AiChatRole
    content: string
    ragContext?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    conversation: AiChatConversationCreateNestedOneWithoutMessagesInput
  }

  export type AiChatMessageUncheckedCreateInput = {
    id?: string
    conversationId: string
    role: $Enums.AiChatRole
    content: string
    ragContext?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AiChatMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumAiChatRoleFieldUpdateOperationsInput | $Enums.AiChatRole
    content?: StringFieldUpdateOperationsInput | string
    ragContext?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    conversation?: AiChatConversationUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type AiChatMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    conversationId?: StringFieldUpdateOperationsInput | string
    role?: EnumAiChatRoleFieldUpdateOperationsInput | $Enums.AiChatRole
    content?: StringFieldUpdateOperationsInput | string
    ragContext?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AiChatMessageCreateManyInput = {
    id?: string
    conversationId: string
    role: $Enums.AiChatRole
    content: string
    ragContext?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AiChatMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumAiChatRoleFieldUpdateOperationsInput | $Enums.AiChatRole
    content?: StringFieldUpdateOperationsInput | string
    ragContext?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AiChatMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    conversationId?: StringFieldUpdateOperationsInput | string
    role?: EnumAiChatRoleFieldUpdateOperationsInput | $Enums.AiChatRole
    content?: StringFieldUpdateOperationsInput | string
    ragContext?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ConversationMemoryCreateInput = {
    id?: string
    memoryType: $Enums.MemoryType
    content: string
    importance?: number
    associatedTags?: ConversationMemoryCreateassociatedTagsInput | string[]
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    child: ChildCreateNestedOneWithoutConversationMemoriesInput
    volunteer: UserCreateNestedOneWithoutConversationMemoriesInput
    session?: SessionCreateNestedOneWithoutConversationMemoriesInput
  }

  export type ConversationMemoryUncheckedCreateInput = {
    id?: string
    childId: string
    volunteerId: string
    sessionId?: string | null
    memoryType: $Enums.MemoryType
    content: string
    importance?: number
    associatedTags?: ConversationMemoryCreateassociatedTagsInput | string[]
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationMemoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    memoryType?: EnumMemoryTypeFieldUpdateOperationsInput | $Enums.MemoryType
    content?: StringFieldUpdateOperationsInput | string
    importance?: IntFieldUpdateOperationsInput | number
    associatedTags?: ConversationMemoryUpdateassociatedTagsInput | string[]
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    child?: ChildUpdateOneRequiredWithoutConversationMemoriesNestedInput
    volunteer?: UserUpdateOneRequiredWithoutConversationMemoriesNestedInput
    session?: SessionUpdateOneWithoutConversationMemoriesNestedInput
  }

  export type ConversationMemoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    memoryType?: EnumMemoryTypeFieldUpdateOperationsInput | $Enums.MemoryType
    content?: StringFieldUpdateOperationsInput | string
    importance?: IntFieldUpdateOperationsInput | number
    associatedTags?: ConversationMemoryUpdateassociatedTagsInput | string[]
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationMemoryCreateManyInput = {
    id?: string
    childId: string
    volunteerId: string
    sessionId?: string | null
    memoryType: $Enums.MemoryType
    content: string
    importance?: number
    associatedTags?: ConversationMemoryCreateassociatedTagsInput | string[]
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationMemoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    memoryType?: EnumMemoryTypeFieldUpdateOperationsInput | $Enums.MemoryType
    content?: StringFieldUpdateOperationsInput | string
    importance?: IntFieldUpdateOperationsInput | number
    associatedTags?: ConversationMemoryUpdateassociatedTagsInput | string[]
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationMemoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    memoryType?: EnumMemoryTypeFieldUpdateOperationsInput | $Enums.MemoryType
    content?: StringFieldUpdateOperationsInput | string
    importance?: IntFieldUpdateOperationsInput | number
    associatedTags?: ConversationMemoryUpdateassociatedTagsInput | string[]
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagCreateInput = {
    id?: string
    name: string
    category: $Enums.TagCategory
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    children?: ChildCreateNestedManyWithoutTagsInput
    knowledgeBase?: KnowledgeBaseCreateNestedManyWithoutTagsInput
  }

  export type TagUncheckedCreateInput = {
    id?: string
    name: string
    category: $Enums.TagCategory
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    children?: ChildUncheckedCreateNestedManyWithoutTagsInput
    knowledgeBase?: KnowledgeBaseUncheckedCreateNestedManyWithoutTagsInput
  }

  export type TagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: ChildUpdateManyWithoutTagsNestedInput
    knowledgeBase?: KnowledgeBaseUpdateManyWithoutTagsNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: ChildUncheckedUpdateManyWithoutTagsNestedInput
    knowledgeBase?: KnowledgeBaseUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type TagCreateManyInput = {
    id?: string
    name: string
    category: $Enums.TagCategory
    description?: string | null
    color?: string | null
    createdAt?: Date | string
  }

  export type TagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumApprovalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalStatusFilter<$PrismaModel> | $Enums.ApprovalStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AssignmentListRelationFilter = {
    every?: AssignmentWhereInput
    some?: AssignmentWhereInput
    none?: AssignmentWhereInput
  }

  export type ChatMessageListRelationFilter = {
    every?: ChatMessageWhereInput
    some?: ChatMessageWhereInput
    none?: ChatMessageWhereInput
  }

  export type CulturalStoryListRelationFilter = {
    every?: CulturalStoryWhereInput
    some?: CulturalStoryWhereInput
    none?: CulturalStoryWhereInput
  }

  export type KnowledgeBaseListRelationFilter = {
    every?: KnowledgeBaseWhereInput
    some?: KnowledgeBaseWhereInput
    none?: KnowledgeBaseWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AiChatConversationListRelationFilter = {
    every?: AiChatConversationWhereInput
    some?: AiChatConversationWhereInput
    none?: AiChatConversationWhereInput
  }

  export type ConversationMemoryListRelationFilter = {
    every?: ConversationMemoryWhereInput
    some?: ConversationMemoryWhereInput
    none?: ConversationMemoryWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CulturalStoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KnowledgeBaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AiChatConversationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConversationMemoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    state?: SortOrder
    phone?: SortOrder
    specialization?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    approvalStatus?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    experience?: SortOrder
    motivation?: SortOrder
    rejectionReason?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    state?: SortOrder
    phone?: SortOrder
    specialization?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    approvalStatus?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    experience?: SortOrder
    motivation?: SortOrder
    rejectionReason?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    state?: SortOrder
    phone?: SortOrder
    specialization?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    approvalStatus?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    experience?: SortOrder
    motivation?: SortOrder
    rejectionReason?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumApprovalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalStatusFilter<$PrismaModel>
    _max?: NestedEnumApprovalStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ConcernListRelationFilter = {
    every?: ConcernWhereInput
    some?: ConcernWhereInput
    none?: ConcernWhereInput
  }

  export type TagListRelationFilter = {
    every?: TagWhereInput
    some?: TagWhereInput
    none?: TagWhereInput
  }

  export type ConcernOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChildCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    state?: SortOrder
    district?: SortOrder
    background?: SortOrder
    schoolLevel?: SortOrder
    interests?: SortOrder
    challenges?: SortOrder
    language?: SortOrder
    profileImage?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChildAvgOrderByAggregateInput = {
    age?: SortOrder
  }

  export type ChildMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    state?: SortOrder
    district?: SortOrder
    background?: SortOrder
    schoolLevel?: SortOrder
    language?: SortOrder
    profileImage?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChildMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    state?: SortOrder
    district?: SortOrder
    background?: SortOrder
    schoolLevel?: SortOrder
    language?: SortOrder
    profileImage?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChildSumOrderByAggregateInput = {
    age?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type ChildScalarRelationFilter = {
    is?: ChildWhereInput
    isNot?: ChildWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AssignmentVolunteerIdChildIdCompoundUniqueInput = {
    volunteerId: string
    childId: string
  }

  export type AssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    volunteerId?: SortOrder
    childId?: SortOrder
    assignedAt?: SortOrder
    isActive?: SortOrder
    notes?: SortOrder
  }

  export type AssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    volunteerId?: SortOrder
    childId?: SortOrder
    assignedAt?: SortOrder
    isActive?: SortOrder
    notes?: SortOrder
  }

  export type AssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    volunteerId?: SortOrder
    childId?: SortOrder
    assignedAt?: SortOrder
    isActive?: SortOrder
    notes?: SortOrder
  }

  export type EnumSessionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusFilter<$PrismaModel> | $Enums.SessionStatus
  }

  export type EnumSessionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionType | EnumSessionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SessionType[] | ListEnumSessionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionType[] | ListEnumSessionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionTypeFilter<$PrismaModel> | $Enums.SessionType
  }

  export type SessionSummaryNullableScalarRelationFilter = {
    is?: SessionSummaryWhereInput | null
    isNot?: SessionSummaryWhereInput | null
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    childId?: SortOrder
    volunteerId?: SortOrder
    scheduledAt?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
    status?: SortOrder
    sessionType?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    childId?: SortOrder
    volunteerId?: SortOrder
    scheduledAt?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
    status?: SortOrder
    sessionType?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    childId?: SortOrder
    volunteerId?: SortOrder
    scheduledAt?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
    status?: SortOrder
    sessionType?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumSessionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SessionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSessionStatusFilter<$PrismaModel>
    _max?: NestedEnumSessionStatusFilter<$PrismaModel>
  }

  export type EnumSessionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionType | EnumSessionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SessionType[] | ListEnumSessionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionType[] | ListEnumSessionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionTypeWithAggregatesFilter<$PrismaModel> | $Enums.SessionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSessionTypeFilter<$PrismaModel>
    _max?: NestedEnumSessionTypeFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumResolutionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ResolutionStatus | EnumResolutionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ResolutionStatus[] | ListEnumResolutionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResolutionStatus[] | ListEnumResolutionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumResolutionStatusFilter<$PrismaModel> | $Enums.ResolutionStatus
  }

  export type SessionScalarRelationFilter = {
    is?: SessionWhereInput
    isNot?: SessionWhereInput
  }

  export type SessionSummaryCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    summary?: SortOrder
    sessionDuration?: SortOrder
    sessionType?: SortOrder
    initialMood?: SortOrder
    finalMood?: SortOrder
    moodChanges?: SortOrder
    concernsDiscussed?: SortOrder
    topicsDiscussed?: SortOrder
    culturalStoriesUsed?: SortOrder
    techniquesUsed?: SortOrder
    techniqueEffectiveness?: SortOrder
    storyResponse?: SortOrder
    breakthroughs?: SortOrder
    keyInsights?: SortOrder
    challengesFaced?: SortOrder
    challengeHandling?: SortOrder
    engagementLevel?: SortOrder
    participationNotes?: SortOrder
    progressMade?: SortOrder
    nextSteps?: SortOrder
    actionItems?: SortOrder
    recommendations?: SortOrder
    sessionEffectiveness?: SortOrder
    volunteerConfidence?: SortOrder
    nextSessionFocus?: SortOrder
    nextSessionTiming?: SortOrder
    additionalNotes?: SortOrder
    resolutionStatus?: SortOrder
    followUpNeeded?: SortOrder
    followUpDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionSummaryMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    summary?: SortOrder
    sessionDuration?: SortOrder
    sessionType?: SortOrder
    initialMood?: SortOrder
    finalMood?: SortOrder
    moodChanges?: SortOrder
    storyResponse?: SortOrder
    breakthroughs?: SortOrder
    keyInsights?: SortOrder
    challengesFaced?: SortOrder
    challengeHandling?: SortOrder
    engagementLevel?: SortOrder
    participationNotes?: SortOrder
    progressMade?: SortOrder
    recommendations?: SortOrder
    sessionEffectiveness?: SortOrder
    volunteerConfidence?: SortOrder
    nextSessionFocus?: SortOrder
    nextSessionTiming?: SortOrder
    additionalNotes?: SortOrder
    resolutionStatus?: SortOrder
    followUpNeeded?: SortOrder
    followUpDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionSummaryMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    summary?: SortOrder
    sessionDuration?: SortOrder
    sessionType?: SortOrder
    initialMood?: SortOrder
    finalMood?: SortOrder
    moodChanges?: SortOrder
    storyResponse?: SortOrder
    breakthroughs?: SortOrder
    keyInsights?: SortOrder
    challengesFaced?: SortOrder
    challengeHandling?: SortOrder
    engagementLevel?: SortOrder
    participationNotes?: SortOrder
    progressMade?: SortOrder
    recommendations?: SortOrder
    sessionEffectiveness?: SortOrder
    volunteerConfidence?: SortOrder
    nextSessionFocus?: SortOrder
    nextSessionTiming?: SortOrder
    additionalNotes?: SortOrder
    resolutionStatus?: SortOrder
    followUpNeeded?: SortOrder
    followUpDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumResolutionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ResolutionStatus | EnumResolutionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ResolutionStatus[] | ListEnumResolutionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResolutionStatus[] | ListEnumResolutionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumResolutionStatusWithAggregatesFilter<$PrismaModel> | $Enums.ResolutionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumResolutionStatusFilter<$PrismaModel>
    _max?: NestedEnumResolutionStatusFilter<$PrismaModel>
  }

  export type EnumKnowledgeCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.KnowledgeCategory | EnumKnowledgeCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.KnowledgeCategory[] | ListEnumKnowledgeCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.KnowledgeCategory[] | ListEnumKnowledgeCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumKnowledgeCategoryFilter<$PrismaModel> | $Enums.KnowledgeCategory
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DocumentChunkListRelationFilter = {
    every?: DocumentChunkWhereInput
    some?: DocumentChunkWhereInput
    none?: DocumentChunkWhereInput
  }

  export type DocumentChunkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KnowledgeBaseCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    summary?: SortOrder
    category?: SortOrder
    subCategory?: SortOrder
    fileType?: SortOrder
    fileUrl?: SortOrder
    isActive?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    downloadCount?: SortOrder
    embeddings?: SortOrder
    fileSize?: SortOrder
    isProcessed?: SortOrder
    views?: SortOrder
  }

  export type KnowledgeBaseAvgOrderByAggregateInput = {
    downloadCount?: SortOrder
    fileSize?: SortOrder
    views?: SortOrder
  }

  export type KnowledgeBaseMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    summary?: SortOrder
    category?: SortOrder
    subCategory?: SortOrder
    fileType?: SortOrder
    fileUrl?: SortOrder
    isActive?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    downloadCount?: SortOrder
    fileSize?: SortOrder
    isProcessed?: SortOrder
    views?: SortOrder
  }

  export type KnowledgeBaseMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    summary?: SortOrder
    category?: SortOrder
    subCategory?: SortOrder
    fileType?: SortOrder
    fileUrl?: SortOrder
    isActive?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    downloadCount?: SortOrder
    fileSize?: SortOrder
    isProcessed?: SortOrder
    views?: SortOrder
  }

  export type KnowledgeBaseSumOrderByAggregateInput = {
    downloadCount?: SortOrder
    fileSize?: SortOrder
    views?: SortOrder
  }

  export type EnumKnowledgeCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.KnowledgeCategory | EnumKnowledgeCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.KnowledgeCategory[] | ListEnumKnowledgeCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.KnowledgeCategory[] | ListEnumKnowledgeCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumKnowledgeCategoryWithAggregatesFilter<$PrismaModel> | $Enums.KnowledgeCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKnowledgeCategoryFilter<$PrismaModel>
    _max?: NestedEnumKnowledgeCategoryFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type KnowledgeBaseScalarRelationFilter = {
    is?: KnowledgeBaseWhereInput
    isNot?: KnowledgeBaseWhereInput
  }

  export type DocumentChunkCountOrderByAggregateInput = {
    id?: SortOrder
    knowledgeBaseId?: SortOrder
    content?: SortOrder
    chunkIndex?: SortOrder
    embeddings?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type DocumentChunkAvgOrderByAggregateInput = {
    chunkIndex?: SortOrder
  }

  export type DocumentChunkMaxOrderByAggregateInput = {
    id?: SortOrder
    knowledgeBaseId?: SortOrder
    content?: SortOrder
    chunkIndex?: SortOrder
    createdAt?: SortOrder
  }

  export type DocumentChunkMinOrderByAggregateInput = {
    id?: SortOrder
    knowledgeBaseId?: SortOrder
    content?: SortOrder
    chunkIndex?: SortOrder
    createdAt?: SortOrder
  }

  export type DocumentChunkSumOrderByAggregateInput = {
    chunkIndex?: SortOrder
  }

  export type EnumStorySourceFilter<$PrismaModel = never> = {
    equals?: $Enums.StorySource | EnumStorySourceFieldRefInput<$PrismaModel>
    in?: $Enums.StorySource[] | ListEnumStorySourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.StorySource[] | ListEnumStorySourceFieldRefInput<$PrismaModel>
    not?: NestedEnumStorySourceFilter<$PrismaModel> | $Enums.StorySource
  }

  export type CulturalStoryCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    source?: SortOrder
    summary?: SortOrder
    fullStory?: SortOrder
    themes?: SortOrder
    applicableFor?: SortOrder
    moralLessons?: SortOrder
    tags?: SortOrder
    isActive?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CulturalStoryMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    source?: SortOrder
    summary?: SortOrder
    fullStory?: SortOrder
    isActive?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CulturalStoryMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    source?: SortOrder
    summary?: SortOrder
    fullStory?: SortOrder
    isActive?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumStorySourceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StorySource | EnumStorySourceFieldRefInput<$PrismaModel>
    in?: $Enums.StorySource[] | ListEnumStorySourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.StorySource[] | ListEnumStorySourceFieldRefInput<$PrismaModel>
    not?: NestedEnumStorySourceWithAggregatesFilter<$PrismaModel> | $Enums.StorySource
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStorySourceFilter<$PrismaModel>
    _max?: NestedEnumStorySourceFilter<$PrismaModel>
  }

  export type EnumConcernCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.ConcernCategory | EnumConcernCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ConcernCategory[] | ListEnumConcernCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConcernCategory[] | ListEnumConcernCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumConcernCategoryFilter<$PrismaModel> | $Enums.ConcernCategory
  }

  export type EnumSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.Severity | EnumSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.Severity[] | ListEnumSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Severity[] | ListEnumSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumSeverityFilter<$PrismaModel> | $Enums.Severity
  }

  export type EnumConcernStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ConcernStatus | EnumConcernStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ConcernStatus[] | ListEnumConcernStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConcernStatus[] | ListEnumConcernStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumConcernStatusFilter<$PrismaModel> | $Enums.ConcernStatus
  }

  export type ConcernCountOrderByAggregateInput = {
    id?: SortOrder
    childId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    identifiedAt?: SortOrder
    resolvedAt?: SortOrder
    resolution?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConcernMaxOrderByAggregateInput = {
    id?: SortOrder
    childId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    identifiedAt?: SortOrder
    resolvedAt?: SortOrder
    resolution?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConcernMinOrderByAggregateInput = {
    id?: SortOrder
    childId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    identifiedAt?: SortOrder
    resolvedAt?: SortOrder
    resolution?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumConcernCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConcernCategory | EnumConcernCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ConcernCategory[] | ListEnumConcernCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConcernCategory[] | ListEnumConcernCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumConcernCategoryWithAggregatesFilter<$PrismaModel> | $Enums.ConcernCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConcernCategoryFilter<$PrismaModel>
    _max?: NestedEnumConcernCategoryFilter<$PrismaModel>
  }

  export type EnumSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Severity | EnumSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.Severity[] | ListEnumSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Severity[] | ListEnumSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumSeverityWithAggregatesFilter<$PrismaModel> | $Enums.Severity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSeverityFilter<$PrismaModel>
    _max?: NestedEnumSeverityFilter<$PrismaModel>
  }

  export type EnumConcernStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConcernStatus | EnumConcernStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ConcernStatus[] | ListEnumConcernStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConcernStatus[] | ListEnumConcernStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumConcernStatusWithAggregatesFilter<$PrismaModel> | $Enums.ConcernStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConcernStatusFilter<$PrismaModel>
    _max?: NestedEnumConcernStatusFilter<$PrismaModel>
  }

  export type SessionNullableScalarRelationFilter = {
    is?: SessionWhereInput | null
    isNot?: SessionWhereInput | null
  }

  export type ChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    response?: SortOrder
    context?: SortOrder
    isSystemMsg?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    response?: SortOrder
    context?: SortOrder
    isSystemMsg?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    response?: SortOrder
    context?: SortOrder
    isSystemMsg?: SortOrder
    createdAt?: SortOrder
  }

  export type AiChatMessageListRelationFilter = {
    every?: AiChatMessageWhereInput
    some?: AiChatMessageWhereInput
    none?: AiChatMessageWhereInput
  }

  export type AiChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AiChatConversationCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    childId?: SortOrder
    volunteerId?: SortOrder
    conversationName?: SortOrder
    context?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AiChatConversationMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    childId?: SortOrder
    volunteerId?: SortOrder
    conversationName?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AiChatConversationMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    childId?: SortOrder
    volunteerId?: SortOrder
    conversationName?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAiChatRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.AiChatRole | EnumAiChatRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AiChatRole[] | ListEnumAiChatRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.AiChatRole[] | ListEnumAiChatRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumAiChatRoleFilter<$PrismaModel> | $Enums.AiChatRole
  }

  export type AiChatConversationScalarRelationFilter = {
    is?: AiChatConversationWhereInput
    isNot?: AiChatConversationWhereInput
  }

  export type AiChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    ragContext?: SortOrder
    timestamp?: SortOrder
    metadata?: SortOrder
  }

  export type AiChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    timestamp?: SortOrder
  }

  export type AiChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    timestamp?: SortOrder
  }

  export type EnumAiChatRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AiChatRole | EnumAiChatRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AiChatRole[] | ListEnumAiChatRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.AiChatRole[] | ListEnumAiChatRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumAiChatRoleWithAggregatesFilter<$PrismaModel> | $Enums.AiChatRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAiChatRoleFilter<$PrismaModel>
    _max?: NestedEnumAiChatRoleFilter<$PrismaModel>
  }

  export type EnumMemoryTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MemoryType | EnumMemoryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MemoryType[] | ListEnumMemoryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemoryType[] | ListEnumMemoryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMemoryTypeFilter<$PrismaModel> | $Enums.MemoryType
  }

  export type ConversationMemoryCountOrderByAggregateInput = {
    id?: SortOrder
    childId?: SortOrder
    volunteerId?: SortOrder
    sessionId?: SortOrder
    memoryType?: SortOrder
    content?: SortOrder
    importance?: SortOrder
    associatedTags?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConversationMemoryAvgOrderByAggregateInput = {
    importance?: SortOrder
  }

  export type ConversationMemoryMaxOrderByAggregateInput = {
    id?: SortOrder
    childId?: SortOrder
    volunteerId?: SortOrder
    sessionId?: SortOrder
    memoryType?: SortOrder
    content?: SortOrder
    importance?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConversationMemoryMinOrderByAggregateInput = {
    id?: SortOrder
    childId?: SortOrder
    volunteerId?: SortOrder
    sessionId?: SortOrder
    memoryType?: SortOrder
    content?: SortOrder
    importance?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConversationMemorySumOrderByAggregateInput = {
    importance?: SortOrder
  }

  export type EnumMemoryTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MemoryType | EnumMemoryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MemoryType[] | ListEnumMemoryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemoryType[] | ListEnumMemoryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMemoryTypeWithAggregatesFilter<$PrismaModel> | $Enums.MemoryType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMemoryTypeFilter<$PrismaModel>
    _max?: NestedEnumMemoryTypeFilter<$PrismaModel>
  }

  export type EnumTagCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.TagCategory | EnumTagCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.TagCategory[] | ListEnumTagCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.TagCategory[] | ListEnumTagCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumTagCategoryFilter<$PrismaModel> | $Enums.TagCategory
  }

  export type ChildListRelationFilter = {
    every?: ChildWhereInput
    some?: ChildWhereInput
    none?: ChildWhereInput
  }

  export type ChildOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumTagCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TagCategory | EnumTagCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.TagCategory[] | ListEnumTagCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.TagCategory[] | ListEnumTagCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumTagCategoryWithAggregatesFilter<$PrismaModel> | $Enums.TagCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTagCategoryFilter<$PrismaModel>
    _max?: NestedEnumTagCategoryFilter<$PrismaModel>
  }

  export type AssignmentCreateNestedManyWithoutVolunteerInput = {
    create?: XOR<AssignmentCreateWithoutVolunteerInput, AssignmentUncheckedCreateWithoutVolunteerInput> | AssignmentCreateWithoutVolunteerInput[] | AssignmentUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutVolunteerInput | AssignmentCreateOrConnectWithoutVolunteerInput[]
    createMany?: AssignmentCreateManyVolunteerInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type ChatMessageCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput> | ChatMessageCreateWithoutUserInput[] | ChatMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutUserInput | ChatMessageCreateOrConnectWithoutUserInput[]
    createMany?: ChatMessageCreateManyUserInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type CulturalStoryCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CulturalStoryCreateWithoutCreatedByInput, CulturalStoryUncheckedCreateWithoutCreatedByInput> | CulturalStoryCreateWithoutCreatedByInput[] | CulturalStoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CulturalStoryCreateOrConnectWithoutCreatedByInput | CulturalStoryCreateOrConnectWithoutCreatedByInput[]
    createMany?: CulturalStoryCreateManyCreatedByInputEnvelope
    connect?: CulturalStoryWhereUniqueInput | CulturalStoryWhereUniqueInput[]
  }

  export type KnowledgeBaseCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<KnowledgeBaseCreateWithoutCreatedByInput, KnowledgeBaseUncheckedCreateWithoutCreatedByInput> | KnowledgeBaseCreateWithoutCreatedByInput[] | KnowledgeBaseUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: KnowledgeBaseCreateOrConnectWithoutCreatedByInput | KnowledgeBaseCreateOrConnectWithoutCreatedByInput[]
    createMany?: KnowledgeBaseCreateManyCreatedByInputEnvelope
    connect?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutVolunteerInput = {
    create?: XOR<SessionCreateWithoutVolunteerInput, SessionUncheckedCreateWithoutVolunteerInput> | SessionCreateWithoutVolunteerInput[] | SessionUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutVolunteerInput | SessionCreateOrConnectWithoutVolunteerInput[]
    createMany?: SessionCreateManyVolunteerInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AiChatConversationCreateNestedManyWithoutVolunteerInput = {
    create?: XOR<AiChatConversationCreateWithoutVolunteerInput, AiChatConversationUncheckedCreateWithoutVolunteerInput> | AiChatConversationCreateWithoutVolunteerInput[] | AiChatConversationUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: AiChatConversationCreateOrConnectWithoutVolunteerInput | AiChatConversationCreateOrConnectWithoutVolunteerInput[]
    createMany?: AiChatConversationCreateManyVolunteerInputEnvelope
    connect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
  }

  export type ConversationMemoryCreateNestedManyWithoutVolunteerInput = {
    create?: XOR<ConversationMemoryCreateWithoutVolunteerInput, ConversationMemoryUncheckedCreateWithoutVolunteerInput> | ConversationMemoryCreateWithoutVolunteerInput[] | ConversationMemoryUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: ConversationMemoryCreateOrConnectWithoutVolunteerInput | ConversationMemoryCreateOrConnectWithoutVolunteerInput[]
    createMany?: ConversationMemoryCreateManyVolunteerInputEnvelope
    connect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutApprovedUsersInput = {
    create?: XOR<UserCreateWithoutApprovedUsersInput, UserUncheckedCreateWithoutApprovedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedUsersInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutApproverInput = {
    create?: XOR<UserCreateWithoutApproverInput, UserUncheckedCreateWithoutApproverInput> | UserCreateWithoutApproverInput[] | UserUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: UserCreateOrConnectWithoutApproverInput | UserCreateOrConnectWithoutApproverInput[]
    createMany?: UserCreateManyApproverInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AssignmentUncheckedCreateNestedManyWithoutVolunteerInput = {
    create?: XOR<AssignmentCreateWithoutVolunteerInput, AssignmentUncheckedCreateWithoutVolunteerInput> | AssignmentCreateWithoutVolunteerInput[] | AssignmentUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutVolunteerInput | AssignmentCreateOrConnectWithoutVolunteerInput[]
    createMany?: AssignmentCreateManyVolunteerInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput> | ChatMessageCreateWithoutUserInput[] | ChatMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutUserInput | ChatMessageCreateOrConnectWithoutUserInput[]
    createMany?: ChatMessageCreateManyUserInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type CulturalStoryUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CulturalStoryCreateWithoutCreatedByInput, CulturalStoryUncheckedCreateWithoutCreatedByInput> | CulturalStoryCreateWithoutCreatedByInput[] | CulturalStoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CulturalStoryCreateOrConnectWithoutCreatedByInput | CulturalStoryCreateOrConnectWithoutCreatedByInput[]
    createMany?: CulturalStoryCreateManyCreatedByInputEnvelope
    connect?: CulturalStoryWhereUniqueInput | CulturalStoryWhereUniqueInput[]
  }

  export type KnowledgeBaseUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<KnowledgeBaseCreateWithoutCreatedByInput, KnowledgeBaseUncheckedCreateWithoutCreatedByInput> | KnowledgeBaseCreateWithoutCreatedByInput[] | KnowledgeBaseUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: KnowledgeBaseCreateOrConnectWithoutCreatedByInput | KnowledgeBaseCreateOrConnectWithoutCreatedByInput[]
    createMany?: KnowledgeBaseCreateManyCreatedByInputEnvelope
    connect?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutVolunteerInput = {
    create?: XOR<SessionCreateWithoutVolunteerInput, SessionUncheckedCreateWithoutVolunteerInput> | SessionCreateWithoutVolunteerInput[] | SessionUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutVolunteerInput | SessionCreateOrConnectWithoutVolunteerInput[]
    createMany?: SessionCreateManyVolunteerInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AiChatConversationUncheckedCreateNestedManyWithoutVolunteerInput = {
    create?: XOR<AiChatConversationCreateWithoutVolunteerInput, AiChatConversationUncheckedCreateWithoutVolunteerInput> | AiChatConversationCreateWithoutVolunteerInput[] | AiChatConversationUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: AiChatConversationCreateOrConnectWithoutVolunteerInput | AiChatConversationCreateOrConnectWithoutVolunteerInput[]
    createMany?: AiChatConversationCreateManyVolunteerInputEnvelope
    connect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
  }

  export type ConversationMemoryUncheckedCreateNestedManyWithoutVolunteerInput = {
    create?: XOR<ConversationMemoryCreateWithoutVolunteerInput, ConversationMemoryUncheckedCreateWithoutVolunteerInput> | ConversationMemoryCreateWithoutVolunteerInput[] | ConversationMemoryUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: ConversationMemoryCreateOrConnectWithoutVolunteerInput | ConversationMemoryCreateOrConnectWithoutVolunteerInput[]
    createMany?: ConversationMemoryCreateManyVolunteerInputEnvelope
    connect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutApproverInput = {
    create?: XOR<UserCreateWithoutApproverInput, UserUncheckedCreateWithoutApproverInput> | UserCreateWithoutApproverInput[] | UserUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: UserCreateOrConnectWithoutApproverInput | UserCreateOrConnectWithoutApproverInput[]
    createMany?: UserCreateManyApproverInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumApprovalStatusFieldUpdateOperationsInput = {
    set?: $Enums.ApprovalStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AssignmentUpdateManyWithoutVolunteerNestedInput = {
    create?: XOR<AssignmentCreateWithoutVolunteerInput, AssignmentUncheckedCreateWithoutVolunteerInput> | AssignmentCreateWithoutVolunteerInput[] | AssignmentUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutVolunteerInput | AssignmentCreateOrConnectWithoutVolunteerInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutVolunteerInput | AssignmentUpsertWithWhereUniqueWithoutVolunteerInput[]
    createMany?: AssignmentCreateManyVolunteerInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutVolunteerInput | AssignmentUpdateWithWhereUniqueWithoutVolunteerInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutVolunteerInput | AssignmentUpdateManyWithWhereWithoutVolunteerInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type ChatMessageUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput> | ChatMessageCreateWithoutUserInput[] | ChatMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutUserInput | ChatMessageCreateOrConnectWithoutUserInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutUserInput | ChatMessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatMessageCreateManyUserInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutUserInput | ChatMessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutUserInput | ChatMessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type CulturalStoryUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CulturalStoryCreateWithoutCreatedByInput, CulturalStoryUncheckedCreateWithoutCreatedByInput> | CulturalStoryCreateWithoutCreatedByInput[] | CulturalStoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CulturalStoryCreateOrConnectWithoutCreatedByInput | CulturalStoryCreateOrConnectWithoutCreatedByInput[]
    upsert?: CulturalStoryUpsertWithWhereUniqueWithoutCreatedByInput | CulturalStoryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CulturalStoryCreateManyCreatedByInputEnvelope
    set?: CulturalStoryWhereUniqueInput | CulturalStoryWhereUniqueInput[]
    disconnect?: CulturalStoryWhereUniqueInput | CulturalStoryWhereUniqueInput[]
    delete?: CulturalStoryWhereUniqueInput | CulturalStoryWhereUniqueInput[]
    connect?: CulturalStoryWhereUniqueInput | CulturalStoryWhereUniqueInput[]
    update?: CulturalStoryUpdateWithWhereUniqueWithoutCreatedByInput | CulturalStoryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CulturalStoryUpdateManyWithWhereWithoutCreatedByInput | CulturalStoryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CulturalStoryScalarWhereInput | CulturalStoryScalarWhereInput[]
  }

  export type KnowledgeBaseUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<KnowledgeBaseCreateWithoutCreatedByInput, KnowledgeBaseUncheckedCreateWithoutCreatedByInput> | KnowledgeBaseCreateWithoutCreatedByInput[] | KnowledgeBaseUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: KnowledgeBaseCreateOrConnectWithoutCreatedByInput | KnowledgeBaseCreateOrConnectWithoutCreatedByInput[]
    upsert?: KnowledgeBaseUpsertWithWhereUniqueWithoutCreatedByInput | KnowledgeBaseUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: KnowledgeBaseCreateManyCreatedByInputEnvelope
    set?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
    disconnect?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
    delete?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
    connect?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
    update?: KnowledgeBaseUpdateWithWhereUniqueWithoutCreatedByInput | KnowledgeBaseUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: KnowledgeBaseUpdateManyWithWhereWithoutCreatedByInput | KnowledgeBaseUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: KnowledgeBaseScalarWhereInput | KnowledgeBaseScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutVolunteerNestedInput = {
    create?: XOR<SessionCreateWithoutVolunteerInput, SessionUncheckedCreateWithoutVolunteerInput> | SessionCreateWithoutVolunteerInput[] | SessionUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutVolunteerInput | SessionCreateOrConnectWithoutVolunteerInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutVolunteerInput | SessionUpsertWithWhereUniqueWithoutVolunteerInput[]
    createMany?: SessionCreateManyVolunteerInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutVolunteerInput | SessionUpdateWithWhereUniqueWithoutVolunteerInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutVolunteerInput | SessionUpdateManyWithWhereWithoutVolunteerInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AiChatConversationUpdateManyWithoutVolunteerNestedInput = {
    create?: XOR<AiChatConversationCreateWithoutVolunteerInput, AiChatConversationUncheckedCreateWithoutVolunteerInput> | AiChatConversationCreateWithoutVolunteerInput[] | AiChatConversationUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: AiChatConversationCreateOrConnectWithoutVolunteerInput | AiChatConversationCreateOrConnectWithoutVolunteerInput[]
    upsert?: AiChatConversationUpsertWithWhereUniqueWithoutVolunteerInput | AiChatConversationUpsertWithWhereUniqueWithoutVolunteerInput[]
    createMany?: AiChatConversationCreateManyVolunteerInputEnvelope
    set?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    disconnect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    delete?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    connect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    update?: AiChatConversationUpdateWithWhereUniqueWithoutVolunteerInput | AiChatConversationUpdateWithWhereUniqueWithoutVolunteerInput[]
    updateMany?: AiChatConversationUpdateManyWithWhereWithoutVolunteerInput | AiChatConversationUpdateManyWithWhereWithoutVolunteerInput[]
    deleteMany?: AiChatConversationScalarWhereInput | AiChatConversationScalarWhereInput[]
  }

  export type ConversationMemoryUpdateManyWithoutVolunteerNestedInput = {
    create?: XOR<ConversationMemoryCreateWithoutVolunteerInput, ConversationMemoryUncheckedCreateWithoutVolunteerInput> | ConversationMemoryCreateWithoutVolunteerInput[] | ConversationMemoryUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: ConversationMemoryCreateOrConnectWithoutVolunteerInput | ConversationMemoryCreateOrConnectWithoutVolunteerInput[]
    upsert?: ConversationMemoryUpsertWithWhereUniqueWithoutVolunteerInput | ConversationMemoryUpsertWithWhereUniqueWithoutVolunteerInput[]
    createMany?: ConversationMemoryCreateManyVolunteerInputEnvelope
    set?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    disconnect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    delete?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    connect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    update?: ConversationMemoryUpdateWithWhereUniqueWithoutVolunteerInput | ConversationMemoryUpdateWithWhereUniqueWithoutVolunteerInput[]
    updateMany?: ConversationMemoryUpdateManyWithWhereWithoutVolunteerInput | ConversationMemoryUpdateManyWithWhereWithoutVolunteerInput[]
    deleteMany?: ConversationMemoryScalarWhereInput | ConversationMemoryScalarWhereInput[]
  }

  export type UserUpdateOneWithoutApprovedUsersNestedInput = {
    create?: XOR<UserCreateWithoutApprovedUsersInput, UserUncheckedCreateWithoutApprovedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedUsersInput
    upsert?: UserUpsertWithoutApprovedUsersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApprovedUsersInput, UserUpdateWithoutApprovedUsersInput>, UserUncheckedUpdateWithoutApprovedUsersInput>
  }

  export type UserUpdateManyWithoutApproverNestedInput = {
    create?: XOR<UserCreateWithoutApproverInput, UserUncheckedCreateWithoutApproverInput> | UserCreateWithoutApproverInput[] | UserUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: UserCreateOrConnectWithoutApproverInput | UserCreateOrConnectWithoutApproverInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutApproverInput | UserUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: UserCreateManyApproverInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutApproverInput | UserUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: UserUpdateManyWithWhereWithoutApproverInput | UserUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AssignmentUncheckedUpdateManyWithoutVolunteerNestedInput = {
    create?: XOR<AssignmentCreateWithoutVolunteerInput, AssignmentUncheckedCreateWithoutVolunteerInput> | AssignmentCreateWithoutVolunteerInput[] | AssignmentUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutVolunteerInput | AssignmentCreateOrConnectWithoutVolunteerInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutVolunteerInput | AssignmentUpsertWithWhereUniqueWithoutVolunteerInput[]
    createMany?: AssignmentCreateManyVolunteerInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutVolunteerInput | AssignmentUpdateWithWhereUniqueWithoutVolunteerInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutVolunteerInput | AssignmentUpdateManyWithWhereWithoutVolunteerInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput> | ChatMessageCreateWithoutUserInput[] | ChatMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutUserInput | ChatMessageCreateOrConnectWithoutUserInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutUserInput | ChatMessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatMessageCreateManyUserInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutUserInput | ChatMessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutUserInput | ChatMessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type CulturalStoryUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CulturalStoryCreateWithoutCreatedByInput, CulturalStoryUncheckedCreateWithoutCreatedByInput> | CulturalStoryCreateWithoutCreatedByInput[] | CulturalStoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CulturalStoryCreateOrConnectWithoutCreatedByInput | CulturalStoryCreateOrConnectWithoutCreatedByInput[]
    upsert?: CulturalStoryUpsertWithWhereUniqueWithoutCreatedByInput | CulturalStoryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CulturalStoryCreateManyCreatedByInputEnvelope
    set?: CulturalStoryWhereUniqueInput | CulturalStoryWhereUniqueInput[]
    disconnect?: CulturalStoryWhereUniqueInput | CulturalStoryWhereUniqueInput[]
    delete?: CulturalStoryWhereUniqueInput | CulturalStoryWhereUniqueInput[]
    connect?: CulturalStoryWhereUniqueInput | CulturalStoryWhereUniqueInput[]
    update?: CulturalStoryUpdateWithWhereUniqueWithoutCreatedByInput | CulturalStoryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CulturalStoryUpdateManyWithWhereWithoutCreatedByInput | CulturalStoryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CulturalStoryScalarWhereInput | CulturalStoryScalarWhereInput[]
  }

  export type KnowledgeBaseUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<KnowledgeBaseCreateWithoutCreatedByInput, KnowledgeBaseUncheckedCreateWithoutCreatedByInput> | KnowledgeBaseCreateWithoutCreatedByInput[] | KnowledgeBaseUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: KnowledgeBaseCreateOrConnectWithoutCreatedByInput | KnowledgeBaseCreateOrConnectWithoutCreatedByInput[]
    upsert?: KnowledgeBaseUpsertWithWhereUniqueWithoutCreatedByInput | KnowledgeBaseUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: KnowledgeBaseCreateManyCreatedByInputEnvelope
    set?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
    disconnect?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
    delete?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
    connect?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
    update?: KnowledgeBaseUpdateWithWhereUniqueWithoutCreatedByInput | KnowledgeBaseUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: KnowledgeBaseUpdateManyWithWhereWithoutCreatedByInput | KnowledgeBaseUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: KnowledgeBaseScalarWhereInput | KnowledgeBaseScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutVolunteerNestedInput = {
    create?: XOR<SessionCreateWithoutVolunteerInput, SessionUncheckedCreateWithoutVolunteerInput> | SessionCreateWithoutVolunteerInput[] | SessionUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutVolunteerInput | SessionCreateOrConnectWithoutVolunteerInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutVolunteerInput | SessionUpsertWithWhereUniqueWithoutVolunteerInput[]
    createMany?: SessionCreateManyVolunteerInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutVolunteerInput | SessionUpdateWithWhereUniqueWithoutVolunteerInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutVolunteerInput | SessionUpdateManyWithWhereWithoutVolunteerInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AiChatConversationUncheckedUpdateManyWithoutVolunteerNestedInput = {
    create?: XOR<AiChatConversationCreateWithoutVolunteerInput, AiChatConversationUncheckedCreateWithoutVolunteerInput> | AiChatConversationCreateWithoutVolunteerInput[] | AiChatConversationUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: AiChatConversationCreateOrConnectWithoutVolunteerInput | AiChatConversationCreateOrConnectWithoutVolunteerInput[]
    upsert?: AiChatConversationUpsertWithWhereUniqueWithoutVolunteerInput | AiChatConversationUpsertWithWhereUniqueWithoutVolunteerInput[]
    createMany?: AiChatConversationCreateManyVolunteerInputEnvelope
    set?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    disconnect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    delete?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    connect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    update?: AiChatConversationUpdateWithWhereUniqueWithoutVolunteerInput | AiChatConversationUpdateWithWhereUniqueWithoutVolunteerInput[]
    updateMany?: AiChatConversationUpdateManyWithWhereWithoutVolunteerInput | AiChatConversationUpdateManyWithWhereWithoutVolunteerInput[]
    deleteMany?: AiChatConversationScalarWhereInput | AiChatConversationScalarWhereInput[]
  }

  export type ConversationMemoryUncheckedUpdateManyWithoutVolunteerNestedInput = {
    create?: XOR<ConversationMemoryCreateWithoutVolunteerInput, ConversationMemoryUncheckedCreateWithoutVolunteerInput> | ConversationMemoryCreateWithoutVolunteerInput[] | ConversationMemoryUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: ConversationMemoryCreateOrConnectWithoutVolunteerInput | ConversationMemoryCreateOrConnectWithoutVolunteerInput[]
    upsert?: ConversationMemoryUpsertWithWhereUniqueWithoutVolunteerInput | ConversationMemoryUpsertWithWhereUniqueWithoutVolunteerInput[]
    createMany?: ConversationMemoryCreateManyVolunteerInputEnvelope
    set?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    disconnect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    delete?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    connect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    update?: ConversationMemoryUpdateWithWhereUniqueWithoutVolunteerInput | ConversationMemoryUpdateWithWhereUniqueWithoutVolunteerInput[]
    updateMany?: ConversationMemoryUpdateManyWithWhereWithoutVolunteerInput | ConversationMemoryUpdateManyWithWhereWithoutVolunteerInput[]
    deleteMany?: ConversationMemoryScalarWhereInput | ConversationMemoryScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutApproverNestedInput = {
    create?: XOR<UserCreateWithoutApproverInput, UserUncheckedCreateWithoutApproverInput> | UserCreateWithoutApproverInput[] | UserUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: UserCreateOrConnectWithoutApproverInput | UserCreateOrConnectWithoutApproverInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutApproverInput | UserUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: UserCreateManyApproverInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutApproverInput | UserUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: UserUpdateManyWithWhereWithoutApproverInput | UserUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ChildCreateinterestsInput = {
    set: string[]
  }

  export type ChildCreatechallengesInput = {
    set: string[]
  }

  export type AssignmentCreateNestedManyWithoutChildInput = {
    create?: XOR<AssignmentCreateWithoutChildInput, AssignmentUncheckedCreateWithoutChildInput> | AssignmentCreateWithoutChildInput[] | AssignmentUncheckedCreateWithoutChildInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutChildInput | AssignmentCreateOrConnectWithoutChildInput[]
    createMany?: AssignmentCreateManyChildInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type ConcernCreateNestedManyWithoutChildInput = {
    create?: XOR<ConcernCreateWithoutChildInput, ConcernUncheckedCreateWithoutChildInput> | ConcernCreateWithoutChildInput[] | ConcernUncheckedCreateWithoutChildInput[]
    connectOrCreate?: ConcernCreateOrConnectWithoutChildInput | ConcernCreateOrConnectWithoutChildInput[]
    createMany?: ConcernCreateManyChildInputEnvelope
    connect?: ConcernWhereUniqueInput | ConcernWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutChildInput = {
    create?: XOR<SessionCreateWithoutChildInput, SessionUncheckedCreateWithoutChildInput> | SessionCreateWithoutChildInput[] | SessionUncheckedCreateWithoutChildInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutChildInput | SessionCreateOrConnectWithoutChildInput[]
    createMany?: SessionCreateManyChildInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AiChatConversationCreateNestedManyWithoutChildInput = {
    create?: XOR<AiChatConversationCreateWithoutChildInput, AiChatConversationUncheckedCreateWithoutChildInput> | AiChatConversationCreateWithoutChildInput[] | AiChatConversationUncheckedCreateWithoutChildInput[]
    connectOrCreate?: AiChatConversationCreateOrConnectWithoutChildInput | AiChatConversationCreateOrConnectWithoutChildInput[]
    createMany?: AiChatConversationCreateManyChildInputEnvelope
    connect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
  }

  export type ConversationMemoryCreateNestedManyWithoutChildInput = {
    create?: XOR<ConversationMemoryCreateWithoutChildInput, ConversationMemoryUncheckedCreateWithoutChildInput> | ConversationMemoryCreateWithoutChildInput[] | ConversationMemoryUncheckedCreateWithoutChildInput[]
    connectOrCreate?: ConversationMemoryCreateOrConnectWithoutChildInput | ConversationMemoryCreateOrConnectWithoutChildInput[]
    createMany?: ConversationMemoryCreateManyChildInputEnvelope
    connect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
  }

  export type TagCreateNestedManyWithoutChildrenInput = {
    create?: XOR<TagCreateWithoutChildrenInput, TagUncheckedCreateWithoutChildrenInput> | TagCreateWithoutChildrenInput[] | TagUncheckedCreateWithoutChildrenInput[]
    connectOrCreate?: TagCreateOrConnectWithoutChildrenInput | TagCreateOrConnectWithoutChildrenInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type AssignmentUncheckedCreateNestedManyWithoutChildInput = {
    create?: XOR<AssignmentCreateWithoutChildInput, AssignmentUncheckedCreateWithoutChildInput> | AssignmentCreateWithoutChildInput[] | AssignmentUncheckedCreateWithoutChildInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutChildInput | AssignmentCreateOrConnectWithoutChildInput[]
    createMany?: AssignmentCreateManyChildInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type ConcernUncheckedCreateNestedManyWithoutChildInput = {
    create?: XOR<ConcernCreateWithoutChildInput, ConcernUncheckedCreateWithoutChildInput> | ConcernCreateWithoutChildInput[] | ConcernUncheckedCreateWithoutChildInput[]
    connectOrCreate?: ConcernCreateOrConnectWithoutChildInput | ConcernCreateOrConnectWithoutChildInput[]
    createMany?: ConcernCreateManyChildInputEnvelope
    connect?: ConcernWhereUniqueInput | ConcernWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutChildInput = {
    create?: XOR<SessionCreateWithoutChildInput, SessionUncheckedCreateWithoutChildInput> | SessionCreateWithoutChildInput[] | SessionUncheckedCreateWithoutChildInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutChildInput | SessionCreateOrConnectWithoutChildInput[]
    createMany?: SessionCreateManyChildInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AiChatConversationUncheckedCreateNestedManyWithoutChildInput = {
    create?: XOR<AiChatConversationCreateWithoutChildInput, AiChatConversationUncheckedCreateWithoutChildInput> | AiChatConversationCreateWithoutChildInput[] | AiChatConversationUncheckedCreateWithoutChildInput[]
    connectOrCreate?: AiChatConversationCreateOrConnectWithoutChildInput | AiChatConversationCreateOrConnectWithoutChildInput[]
    createMany?: AiChatConversationCreateManyChildInputEnvelope
    connect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
  }

  export type ConversationMemoryUncheckedCreateNestedManyWithoutChildInput = {
    create?: XOR<ConversationMemoryCreateWithoutChildInput, ConversationMemoryUncheckedCreateWithoutChildInput> | ConversationMemoryCreateWithoutChildInput[] | ConversationMemoryUncheckedCreateWithoutChildInput[]
    connectOrCreate?: ConversationMemoryCreateOrConnectWithoutChildInput | ConversationMemoryCreateOrConnectWithoutChildInput[]
    createMany?: ConversationMemoryCreateManyChildInputEnvelope
    connect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
  }

  export type TagUncheckedCreateNestedManyWithoutChildrenInput = {
    create?: XOR<TagCreateWithoutChildrenInput, TagUncheckedCreateWithoutChildrenInput> | TagCreateWithoutChildrenInput[] | TagUncheckedCreateWithoutChildrenInput[]
    connectOrCreate?: TagCreateOrConnectWithoutChildrenInput | TagCreateOrConnectWithoutChildrenInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type ChildUpdateinterestsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ChildUpdatechallengesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type AssignmentUpdateManyWithoutChildNestedInput = {
    create?: XOR<AssignmentCreateWithoutChildInput, AssignmentUncheckedCreateWithoutChildInput> | AssignmentCreateWithoutChildInput[] | AssignmentUncheckedCreateWithoutChildInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutChildInput | AssignmentCreateOrConnectWithoutChildInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutChildInput | AssignmentUpsertWithWhereUniqueWithoutChildInput[]
    createMany?: AssignmentCreateManyChildInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutChildInput | AssignmentUpdateWithWhereUniqueWithoutChildInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutChildInput | AssignmentUpdateManyWithWhereWithoutChildInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type ConcernUpdateManyWithoutChildNestedInput = {
    create?: XOR<ConcernCreateWithoutChildInput, ConcernUncheckedCreateWithoutChildInput> | ConcernCreateWithoutChildInput[] | ConcernUncheckedCreateWithoutChildInput[]
    connectOrCreate?: ConcernCreateOrConnectWithoutChildInput | ConcernCreateOrConnectWithoutChildInput[]
    upsert?: ConcernUpsertWithWhereUniqueWithoutChildInput | ConcernUpsertWithWhereUniqueWithoutChildInput[]
    createMany?: ConcernCreateManyChildInputEnvelope
    set?: ConcernWhereUniqueInput | ConcernWhereUniqueInput[]
    disconnect?: ConcernWhereUniqueInput | ConcernWhereUniqueInput[]
    delete?: ConcernWhereUniqueInput | ConcernWhereUniqueInput[]
    connect?: ConcernWhereUniqueInput | ConcernWhereUniqueInput[]
    update?: ConcernUpdateWithWhereUniqueWithoutChildInput | ConcernUpdateWithWhereUniqueWithoutChildInput[]
    updateMany?: ConcernUpdateManyWithWhereWithoutChildInput | ConcernUpdateManyWithWhereWithoutChildInput[]
    deleteMany?: ConcernScalarWhereInput | ConcernScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutChildNestedInput = {
    create?: XOR<SessionCreateWithoutChildInput, SessionUncheckedCreateWithoutChildInput> | SessionCreateWithoutChildInput[] | SessionUncheckedCreateWithoutChildInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutChildInput | SessionCreateOrConnectWithoutChildInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutChildInput | SessionUpsertWithWhereUniqueWithoutChildInput[]
    createMany?: SessionCreateManyChildInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutChildInput | SessionUpdateWithWhereUniqueWithoutChildInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutChildInput | SessionUpdateManyWithWhereWithoutChildInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AiChatConversationUpdateManyWithoutChildNestedInput = {
    create?: XOR<AiChatConversationCreateWithoutChildInput, AiChatConversationUncheckedCreateWithoutChildInput> | AiChatConversationCreateWithoutChildInput[] | AiChatConversationUncheckedCreateWithoutChildInput[]
    connectOrCreate?: AiChatConversationCreateOrConnectWithoutChildInput | AiChatConversationCreateOrConnectWithoutChildInput[]
    upsert?: AiChatConversationUpsertWithWhereUniqueWithoutChildInput | AiChatConversationUpsertWithWhereUniqueWithoutChildInput[]
    createMany?: AiChatConversationCreateManyChildInputEnvelope
    set?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    disconnect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    delete?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    connect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    update?: AiChatConversationUpdateWithWhereUniqueWithoutChildInput | AiChatConversationUpdateWithWhereUniqueWithoutChildInput[]
    updateMany?: AiChatConversationUpdateManyWithWhereWithoutChildInput | AiChatConversationUpdateManyWithWhereWithoutChildInput[]
    deleteMany?: AiChatConversationScalarWhereInput | AiChatConversationScalarWhereInput[]
  }

  export type ConversationMemoryUpdateManyWithoutChildNestedInput = {
    create?: XOR<ConversationMemoryCreateWithoutChildInput, ConversationMemoryUncheckedCreateWithoutChildInput> | ConversationMemoryCreateWithoutChildInput[] | ConversationMemoryUncheckedCreateWithoutChildInput[]
    connectOrCreate?: ConversationMemoryCreateOrConnectWithoutChildInput | ConversationMemoryCreateOrConnectWithoutChildInput[]
    upsert?: ConversationMemoryUpsertWithWhereUniqueWithoutChildInput | ConversationMemoryUpsertWithWhereUniqueWithoutChildInput[]
    createMany?: ConversationMemoryCreateManyChildInputEnvelope
    set?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    disconnect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    delete?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    connect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    update?: ConversationMemoryUpdateWithWhereUniqueWithoutChildInput | ConversationMemoryUpdateWithWhereUniqueWithoutChildInput[]
    updateMany?: ConversationMemoryUpdateManyWithWhereWithoutChildInput | ConversationMemoryUpdateManyWithWhereWithoutChildInput[]
    deleteMany?: ConversationMemoryScalarWhereInput | ConversationMemoryScalarWhereInput[]
  }

  export type TagUpdateManyWithoutChildrenNestedInput = {
    create?: XOR<TagCreateWithoutChildrenInput, TagUncheckedCreateWithoutChildrenInput> | TagCreateWithoutChildrenInput[] | TagUncheckedCreateWithoutChildrenInput[]
    connectOrCreate?: TagCreateOrConnectWithoutChildrenInput | TagCreateOrConnectWithoutChildrenInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutChildrenInput | TagUpsertWithWhereUniqueWithoutChildrenInput[]
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutChildrenInput | TagUpdateWithWhereUniqueWithoutChildrenInput[]
    updateMany?: TagUpdateManyWithWhereWithoutChildrenInput | TagUpdateManyWithWhereWithoutChildrenInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type AssignmentUncheckedUpdateManyWithoutChildNestedInput = {
    create?: XOR<AssignmentCreateWithoutChildInput, AssignmentUncheckedCreateWithoutChildInput> | AssignmentCreateWithoutChildInput[] | AssignmentUncheckedCreateWithoutChildInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutChildInput | AssignmentCreateOrConnectWithoutChildInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutChildInput | AssignmentUpsertWithWhereUniqueWithoutChildInput[]
    createMany?: AssignmentCreateManyChildInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutChildInput | AssignmentUpdateWithWhereUniqueWithoutChildInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutChildInput | AssignmentUpdateManyWithWhereWithoutChildInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type ConcernUncheckedUpdateManyWithoutChildNestedInput = {
    create?: XOR<ConcernCreateWithoutChildInput, ConcernUncheckedCreateWithoutChildInput> | ConcernCreateWithoutChildInput[] | ConcernUncheckedCreateWithoutChildInput[]
    connectOrCreate?: ConcernCreateOrConnectWithoutChildInput | ConcernCreateOrConnectWithoutChildInput[]
    upsert?: ConcernUpsertWithWhereUniqueWithoutChildInput | ConcernUpsertWithWhereUniqueWithoutChildInput[]
    createMany?: ConcernCreateManyChildInputEnvelope
    set?: ConcernWhereUniqueInput | ConcernWhereUniqueInput[]
    disconnect?: ConcernWhereUniqueInput | ConcernWhereUniqueInput[]
    delete?: ConcernWhereUniqueInput | ConcernWhereUniqueInput[]
    connect?: ConcernWhereUniqueInput | ConcernWhereUniqueInput[]
    update?: ConcernUpdateWithWhereUniqueWithoutChildInput | ConcernUpdateWithWhereUniqueWithoutChildInput[]
    updateMany?: ConcernUpdateManyWithWhereWithoutChildInput | ConcernUpdateManyWithWhereWithoutChildInput[]
    deleteMany?: ConcernScalarWhereInput | ConcernScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutChildNestedInput = {
    create?: XOR<SessionCreateWithoutChildInput, SessionUncheckedCreateWithoutChildInput> | SessionCreateWithoutChildInput[] | SessionUncheckedCreateWithoutChildInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutChildInput | SessionCreateOrConnectWithoutChildInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutChildInput | SessionUpsertWithWhereUniqueWithoutChildInput[]
    createMany?: SessionCreateManyChildInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutChildInput | SessionUpdateWithWhereUniqueWithoutChildInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutChildInput | SessionUpdateManyWithWhereWithoutChildInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AiChatConversationUncheckedUpdateManyWithoutChildNestedInput = {
    create?: XOR<AiChatConversationCreateWithoutChildInput, AiChatConversationUncheckedCreateWithoutChildInput> | AiChatConversationCreateWithoutChildInput[] | AiChatConversationUncheckedCreateWithoutChildInput[]
    connectOrCreate?: AiChatConversationCreateOrConnectWithoutChildInput | AiChatConversationCreateOrConnectWithoutChildInput[]
    upsert?: AiChatConversationUpsertWithWhereUniqueWithoutChildInput | AiChatConversationUpsertWithWhereUniqueWithoutChildInput[]
    createMany?: AiChatConversationCreateManyChildInputEnvelope
    set?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    disconnect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    delete?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    connect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    update?: AiChatConversationUpdateWithWhereUniqueWithoutChildInput | AiChatConversationUpdateWithWhereUniqueWithoutChildInput[]
    updateMany?: AiChatConversationUpdateManyWithWhereWithoutChildInput | AiChatConversationUpdateManyWithWhereWithoutChildInput[]
    deleteMany?: AiChatConversationScalarWhereInput | AiChatConversationScalarWhereInput[]
  }

  export type ConversationMemoryUncheckedUpdateManyWithoutChildNestedInput = {
    create?: XOR<ConversationMemoryCreateWithoutChildInput, ConversationMemoryUncheckedCreateWithoutChildInput> | ConversationMemoryCreateWithoutChildInput[] | ConversationMemoryUncheckedCreateWithoutChildInput[]
    connectOrCreate?: ConversationMemoryCreateOrConnectWithoutChildInput | ConversationMemoryCreateOrConnectWithoutChildInput[]
    upsert?: ConversationMemoryUpsertWithWhereUniqueWithoutChildInput | ConversationMemoryUpsertWithWhereUniqueWithoutChildInput[]
    createMany?: ConversationMemoryCreateManyChildInputEnvelope
    set?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    disconnect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    delete?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    connect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    update?: ConversationMemoryUpdateWithWhereUniqueWithoutChildInput | ConversationMemoryUpdateWithWhereUniqueWithoutChildInput[]
    updateMany?: ConversationMemoryUpdateManyWithWhereWithoutChildInput | ConversationMemoryUpdateManyWithWhereWithoutChildInput[]
    deleteMany?: ConversationMemoryScalarWhereInput | ConversationMemoryScalarWhereInput[]
  }

  export type TagUncheckedUpdateManyWithoutChildrenNestedInput = {
    create?: XOR<TagCreateWithoutChildrenInput, TagUncheckedCreateWithoutChildrenInput> | TagCreateWithoutChildrenInput[] | TagUncheckedCreateWithoutChildrenInput[]
    connectOrCreate?: TagCreateOrConnectWithoutChildrenInput | TagCreateOrConnectWithoutChildrenInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutChildrenInput | TagUpsertWithWhereUniqueWithoutChildrenInput[]
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutChildrenInput | TagUpdateWithWhereUniqueWithoutChildrenInput[]
    updateMany?: TagUpdateManyWithWhereWithoutChildrenInput | TagUpdateManyWithWhereWithoutChildrenInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type ChildCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<ChildCreateWithoutAssignmentsInput, ChildUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: ChildCreateOrConnectWithoutAssignmentsInput
    connect?: ChildWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<UserCreateWithoutAssignmentsInput, UserUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type ChildUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<ChildCreateWithoutAssignmentsInput, ChildUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: ChildCreateOrConnectWithoutAssignmentsInput
    upsert?: ChildUpsertWithoutAssignmentsInput
    connect?: ChildWhereUniqueInput
    update?: XOR<XOR<ChildUpdateToOneWithWhereWithoutAssignmentsInput, ChildUpdateWithoutAssignmentsInput>, ChildUncheckedUpdateWithoutAssignmentsInput>
  }

  export type UserUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutAssignmentsInput, UserUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentsInput
    upsert?: UserUpsertWithoutAssignmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignmentsInput, UserUpdateWithoutAssignmentsInput>, UserUncheckedUpdateWithoutAssignmentsInput>
  }

  export type ChatMessageCreateNestedManyWithoutSessionInput = {
    create?: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput> | ChatMessageCreateWithoutSessionInput[] | ChatMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSessionInput | ChatMessageCreateOrConnectWithoutSessionInput[]
    createMany?: ChatMessageCreateManySessionInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type AiChatConversationCreateNestedManyWithoutSessionInput = {
    create?: XOR<AiChatConversationCreateWithoutSessionInput, AiChatConversationUncheckedCreateWithoutSessionInput> | AiChatConversationCreateWithoutSessionInput[] | AiChatConversationUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: AiChatConversationCreateOrConnectWithoutSessionInput | AiChatConversationCreateOrConnectWithoutSessionInput[]
    createMany?: AiChatConversationCreateManySessionInputEnvelope
    connect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
  }

  export type ConversationMemoryCreateNestedManyWithoutSessionInput = {
    create?: XOR<ConversationMemoryCreateWithoutSessionInput, ConversationMemoryUncheckedCreateWithoutSessionInput> | ConversationMemoryCreateWithoutSessionInput[] | ConversationMemoryUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ConversationMemoryCreateOrConnectWithoutSessionInput | ConversationMemoryCreateOrConnectWithoutSessionInput[]
    createMany?: ConversationMemoryCreateManySessionInputEnvelope
    connect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
  }

  export type SessionSummaryCreateNestedOneWithoutSessionInput = {
    create?: XOR<SessionSummaryCreateWithoutSessionInput, SessionSummaryUncheckedCreateWithoutSessionInput>
    connectOrCreate?: SessionSummaryCreateOrConnectWithoutSessionInput
    connect?: SessionSummaryWhereUniqueInput
  }

  export type ChildCreateNestedOneWithoutSessionsInput = {
    create?: XOR<ChildCreateWithoutSessionsInput, ChildUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: ChildCreateOrConnectWithoutSessionsInput
    connect?: ChildWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput> | ChatMessageCreateWithoutSessionInput[] | ChatMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSessionInput | ChatMessageCreateOrConnectWithoutSessionInput[]
    createMany?: ChatMessageCreateManySessionInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type AiChatConversationUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<AiChatConversationCreateWithoutSessionInput, AiChatConversationUncheckedCreateWithoutSessionInput> | AiChatConversationCreateWithoutSessionInput[] | AiChatConversationUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: AiChatConversationCreateOrConnectWithoutSessionInput | AiChatConversationCreateOrConnectWithoutSessionInput[]
    createMany?: AiChatConversationCreateManySessionInputEnvelope
    connect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
  }

  export type ConversationMemoryUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<ConversationMemoryCreateWithoutSessionInput, ConversationMemoryUncheckedCreateWithoutSessionInput> | ConversationMemoryCreateWithoutSessionInput[] | ConversationMemoryUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ConversationMemoryCreateOrConnectWithoutSessionInput | ConversationMemoryCreateOrConnectWithoutSessionInput[]
    createMany?: ConversationMemoryCreateManySessionInputEnvelope
    connect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
  }

  export type SessionSummaryUncheckedCreateNestedOneWithoutSessionInput = {
    create?: XOR<SessionSummaryCreateWithoutSessionInput, SessionSummaryUncheckedCreateWithoutSessionInput>
    connectOrCreate?: SessionSummaryCreateOrConnectWithoutSessionInput
    connect?: SessionSummaryWhereUniqueInput
  }

  export type EnumSessionStatusFieldUpdateOperationsInput = {
    set?: $Enums.SessionStatus
  }

  export type EnumSessionTypeFieldUpdateOperationsInput = {
    set?: $Enums.SessionType
  }

  export type ChatMessageUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput> | ChatMessageCreateWithoutSessionInput[] | ChatMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSessionInput | ChatMessageCreateOrConnectWithoutSessionInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutSessionInput | ChatMessageUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ChatMessageCreateManySessionInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutSessionInput | ChatMessageUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutSessionInput | ChatMessageUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type AiChatConversationUpdateManyWithoutSessionNestedInput = {
    create?: XOR<AiChatConversationCreateWithoutSessionInput, AiChatConversationUncheckedCreateWithoutSessionInput> | AiChatConversationCreateWithoutSessionInput[] | AiChatConversationUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: AiChatConversationCreateOrConnectWithoutSessionInput | AiChatConversationCreateOrConnectWithoutSessionInput[]
    upsert?: AiChatConversationUpsertWithWhereUniqueWithoutSessionInput | AiChatConversationUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: AiChatConversationCreateManySessionInputEnvelope
    set?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    disconnect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    delete?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    connect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    update?: AiChatConversationUpdateWithWhereUniqueWithoutSessionInput | AiChatConversationUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: AiChatConversationUpdateManyWithWhereWithoutSessionInput | AiChatConversationUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: AiChatConversationScalarWhereInput | AiChatConversationScalarWhereInput[]
  }

  export type ConversationMemoryUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ConversationMemoryCreateWithoutSessionInput, ConversationMemoryUncheckedCreateWithoutSessionInput> | ConversationMemoryCreateWithoutSessionInput[] | ConversationMemoryUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ConversationMemoryCreateOrConnectWithoutSessionInput | ConversationMemoryCreateOrConnectWithoutSessionInput[]
    upsert?: ConversationMemoryUpsertWithWhereUniqueWithoutSessionInput | ConversationMemoryUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ConversationMemoryCreateManySessionInputEnvelope
    set?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    disconnect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    delete?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    connect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    update?: ConversationMemoryUpdateWithWhereUniqueWithoutSessionInput | ConversationMemoryUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ConversationMemoryUpdateManyWithWhereWithoutSessionInput | ConversationMemoryUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ConversationMemoryScalarWhereInput | ConversationMemoryScalarWhereInput[]
  }

  export type SessionSummaryUpdateOneWithoutSessionNestedInput = {
    create?: XOR<SessionSummaryCreateWithoutSessionInput, SessionSummaryUncheckedCreateWithoutSessionInput>
    connectOrCreate?: SessionSummaryCreateOrConnectWithoutSessionInput
    upsert?: SessionSummaryUpsertWithoutSessionInput
    disconnect?: SessionSummaryWhereInput | boolean
    delete?: SessionSummaryWhereInput | boolean
    connect?: SessionSummaryWhereUniqueInput
    update?: XOR<XOR<SessionSummaryUpdateToOneWithWhereWithoutSessionInput, SessionSummaryUpdateWithoutSessionInput>, SessionSummaryUncheckedUpdateWithoutSessionInput>
  }

  export type ChildUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<ChildCreateWithoutSessionsInput, ChildUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: ChildCreateOrConnectWithoutSessionsInput
    upsert?: ChildUpsertWithoutSessionsInput
    connect?: ChildWhereUniqueInput
    update?: XOR<XOR<ChildUpdateToOneWithWhereWithoutSessionsInput, ChildUpdateWithoutSessionsInput>, ChildUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type ChatMessageUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput> | ChatMessageCreateWithoutSessionInput[] | ChatMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSessionInput | ChatMessageCreateOrConnectWithoutSessionInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutSessionInput | ChatMessageUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ChatMessageCreateManySessionInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutSessionInput | ChatMessageUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutSessionInput | ChatMessageUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type AiChatConversationUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<AiChatConversationCreateWithoutSessionInput, AiChatConversationUncheckedCreateWithoutSessionInput> | AiChatConversationCreateWithoutSessionInput[] | AiChatConversationUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: AiChatConversationCreateOrConnectWithoutSessionInput | AiChatConversationCreateOrConnectWithoutSessionInput[]
    upsert?: AiChatConversationUpsertWithWhereUniqueWithoutSessionInput | AiChatConversationUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: AiChatConversationCreateManySessionInputEnvelope
    set?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    disconnect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    delete?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    connect?: AiChatConversationWhereUniqueInput | AiChatConversationWhereUniqueInput[]
    update?: AiChatConversationUpdateWithWhereUniqueWithoutSessionInput | AiChatConversationUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: AiChatConversationUpdateManyWithWhereWithoutSessionInput | AiChatConversationUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: AiChatConversationScalarWhereInput | AiChatConversationScalarWhereInput[]
  }

  export type ConversationMemoryUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ConversationMemoryCreateWithoutSessionInput, ConversationMemoryUncheckedCreateWithoutSessionInput> | ConversationMemoryCreateWithoutSessionInput[] | ConversationMemoryUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ConversationMemoryCreateOrConnectWithoutSessionInput | ConversationMemoryCreateOrConnectWithoutSessionInput[]
    upsert?: ConversationMemoryUpsertWithWhereUniqueWithoutSessionInput | ConversationMemoryUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ConversationMemoryCreateManySessionInputEnvelope
    set?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    disconnect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    delete?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    connect?: ConversationMemoryWhereUniqueInput | ConversationMemoryWhereUniqueInput[]
    update?: ConversationMemoryUpdateWithWhereUniqueWithoutSessionInput | ConversationMemoryUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ConversationMemoryUpdateManyWithWhereWithoutSessionInput | ConversationMemoryUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ConversationMemoryScalarWhereInput | ConversationMemoryScalarWhereInput[]
  }

  export type SessionSummaryUncheckedUpdateOneWithoutSessionNestedInput = {
    create?: XOR<SessionSummaryCreateWithoutSessionInput, SessionSummaryUncheckedCreateWithoutSessionInput>
    connectOrCreate?: SessionSummaryCreateOrConnectWithoutSessionInput
    upsert?: SessionSummaryUpsertWithoutSessionInput
    disconnect?: SessionSummaryWhereInput | boolean
    delete?: SessionSummaryWhereInput | boolean
    connect?: SessionSummaryWhereUniqueInput
    update?: XOR<XOR<SessionSummaryUpdateToOneWithWhereWithoutSessionInput, SessionSummaryUpdateWithoutSessionInput>, SessionSummaryUncheckedUpdateWithoutSessionInput>
  }

  export type SessionSummaryCreateconcernsDiscussedInput = {
    set: string[]
  }

  export type SessionSummaryCreatetopicsDiscussedInput = {
    set: string[]
  }

  export type SessionSummaryCreateculturalStoriesUsedInput = {
    set: string[]
  }

  export type SessionSummaryCreatetechniquesUsedInput = {
    set: string[]
  }

  export type SessionSummaryCreatenextStepsInput = {
    set: string[]
  }

  export type SessionSummaryCreateactionItemsInput = {
    set: string[]
  }

  export type SessionCreateNestedOneWithoutSummaryInput = {
    create?: XOR<SessionCreateWithoutSummaryInput, SessionUncheckedCreateWithoutSummaryInput>
    connectOrCreate?: SessionCreateOrConnectWithoutSummaryInput
    connect?: SessionWhereUniqueInput
  }

  export type SessionSummaryUpdateconcernsDiscussedInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SessionSummaryUpdatetopicsDiscussedInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SessionSummaryUpdateculturalStoriesUsedInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SessionSummaryUpdatetechniquesUsedInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SessionSummaryUpdatenextStepsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SessionSummaryUpdateactionItemsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumResolutionStatusFieldUpdateOperationsInput = {
    set?: $Enums.ResolutionStatus
  }

  export type SessionUpdateOneRequiredWithoutSummaryNestedInput = {
    create?: XOR<SessionCreateWithoutSummaryInput, SessionUncheckedCreateWithoutSummaryInput>
    connectOrCreate?: SessionCreateOrConnectWithoutSummaryInput
    upsert?: SessionUpsertWithoutSummaryInput
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutSummaryInput, SessionUpdateWithoutSummaryInput>, SessionUncheckedUpdateWithoutSummaryInput>
  }

  export type DocumentChunkCreateNestedManyWithoutKnowledgeBaseInput = {
    create?: XOR<DocumentChunkCreateWithoutKnowledgeBaseInput, DocumentChunkUncheckedCreateWithoutKnowledgeBaseInput> | DocumentChunkCreateWithoutKnowledgeBaseInput[] | DocumentChunkUncheckedCreateWithoutKnowledgeBaseInput[]
    connectOrCreate?: DocumentChunkCreateOrConnectWithoutKnowledgeBaseInput | DocumentChunkCreateOrConnectWithoutKnowledgeBaseInput[]
    createMany?: DocumentChunkCreateManyKnowledgeBaseInputEnvelope
    connect?: DocumentChunkWhereUniqueInput | DocumentChunkWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutKnowledgeBaseInput = {
    create?: XOR<UserCreateWithoutKnowledgeBaseInput, UserUncheckedCreateWithoutKnowledgeBaseInput>
    connectOrCreate?: UserCreateOrConnectWithoutKnowledgeBaseInput
    connect?: UserWhereUniqueInput
  }

  export type TagCreateNestedManyWithoutKnowledgeBaseInput = {
    create?: XOR<TagCreateWithoutKnowledgeBaseInput, TagUncheckedCreateWithoutKnowledgeBaseInput> | TagCreateWithoutKnowledgeBaseInput[] | TagUncheckedCreateWithoutKnowledgeBaseInput[]
    connectOrCreate?: TagCreateOrConnectWithoutKnowledgeBaseInput | TagCreateOrConnectWithoutKnowledgeBaseInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type DocumentChunkUncheckedCreateNestedManyWithoutKnowledgeBaseInput = {
    create?: XOR<DocumentChunkCreateWithoutKnowledgeBaseInput, DocumentChunkUncheckedCreateWithoutKnowledgeBaseInput> | DocumentChunkCreateWithoutKnowledgeBaseInput[] | DocumentChunkUncheckedCreateWithoutKnowledgeBaseInput[]
    connectOrCreate?: DocumentChunkCreateOrConnectWithoutKnowledgeBaseInput | DocumentChunkCreateOrConnectWithoutKnowledgeBaseInput[]
    createMany?: DocumentChunkCreateManyKnowledgeBaseInputEnvelope
    connect?: DocumentChunkWhereUniqueInput | DocumentChunkWhereUniqueInput[]
  }

  export type TagUncheckedCreateNestedManyWithoutKnowledgeBaseInput = {
    create?: XOR<TagCreateWithoutKnowledgeBaseInput, TagUncheckedCreateWithoutKnowledgeBaseInput> | TagCreateWithoutKnowledgeBaseInput[] | TagUncheckedCreateWithoutKnowledgeBaseInput[]
    connectOrCreate?: TagCreateOrConnectWithoutKnowledgeBaseInput | TagCreateOrConnectWithoutKnowledgeBaseInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type EnumKnowledgeCategoryFieldUpdateOperationsInput = {
    set?: $Enums.KnowledgeCategory
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DocumentChunkUpdateManyWithoutKnowledgeBaseNestedInput = {
    create?: XOR<DocumentChunkCreateWithoutKnowledgeBaseInput, DocumentChunkUncheckedCreateWithoutKnowledgeBaseInput> | DocumentChunkCreateWithoutKnowledgeBaseInput[] | DocumentChunkUncheckedCreateWithoutKnowledgeBaseInput[]
    connectOrCreate?: DocumentChunkCreateOrConnectWithoutKnowledgeBaseInput | DocumentChunkCreateOrConnectWithoutKnowledgeBaseInput[]
    upsert?: DocumentChunkUpsertWithWhereUniqueWithoutKnowledgeBaseInput | DocumentChunkUpsertWithWhereUniqueWithoutKnowledgeBaseInput[]
    createMany?: DocumentChunkCreateManyKnowledgeBaseInputEnvelope
    set?: DocumentChunkWhereUniqueInput | DocumentChunkWhereUniqueInput[]
    disconnect?: DocumentChunkWhereUniqueInput | DocumentChunkWhereUniqueInput[]
    delete?: DocumentChunkWhereUniqueInput | DocumentChunkWhereUniqueInput[]
    connect?: DocumentChunkWhereUniqueInput | DocumentChunkWhereUniqueInput[]
    update?: DocumentChunkUpdateWithWhereUniqueWithoutKnowledgeBaseInput | DocumentChunkUpdateWithWhereUniqueWithoutKnowledgeBaseInput[]
    updateMany?: DocumentChunkUpdateManyWithWhereWithoutKnowledgeBaseInput | DocumentChunkUpdateManyWithWhereWithoutKnowledgeBaseInput[]
    deleteMany?: DocumentChunkScalarWhereInput | DocumentChunkScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutKnowledgeBaseNestedInput = {
    create?: XOR<UserCreateWithoutKnowledgeBaseInput, UserUncheckedCreateWithoutKnowledgeBaseInput>
    connectOrCreate?: UserCreateOrConnectWithoutKnowledgeBaseInput
    upsert?: UserUpsertWithoutKnowledgeBaseInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutKnowledgeBaseInput, UserUpdateWithoutKnowledgeBaseInput>, UserUncheckedUpdateWithoutKnowledgeBaseInput>
  }

  export type TagUpdateManyWithoutKnowledgeBaseNestedInput = {
    create?: XOR<TagCreateWithoutKnowledgeBaseInput, TagUncheckedCreateWithoutKnowledgeBaseInput> | TagCreateWithoutKnowledgeBaseInput[] | TagUncheckedCreateWithoutKnowledgeBaseInput[]
    connectOrCreate?: TagCreateOrConnectWithoutKnowledgeBaseInput | TagCreateOrConnectWithoutKnowledgeBaseInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutKnowledgeBaseInput | TagUpsertWithWhereUniqueWithoutKnowledgeBaseInput[]
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutKnowledgeBaseInput | TagUpdateWithWhereUniqueWithoutKnowledgeBaseInput[]
    updateMany?: TagUpdateManyWithWhereWithoutKnowledgeBaseInput | TagUpdateManyWithWhereWithoutKnowledgeBaseInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type DocumentChunkUncheckedUpdateManyWithoutKnowledgeBaseNestedInput = {
    create?: XOR<DocumentChunkCreateWithoutKnowledgeBaseInput, DocumentChunkUncheckedCreateWithoutKnowledgeBaseInput> | DocumentChunkCreateWithoutKnowledgeBaseInput[] | DocumentChunkUncheckedCreateWithoutKnowledgeBaseInput[]
    connectOrCreate?: DocumentChunkCreateOrConnectWithoutKnowledgeBaseInput | DocumentChunkCreateOrConnectWithoutKnowledgeBaseInput[]
    upsert?: DocumentChunkUpsertWithWhereUniqueWithoutKnowledgeBaseInput | DocumentChunkUpsertWithWhereUniqueWithoutKnowledgeBaseInput[]
    createMany?: DocumentChunkCreateManyKnowledgeBaseInputEnvelope
    set?: DocumentChunkWhereUniqueInput | DocumentChunkWhereUniqueInput[]
    disconnect?: DocumentChunkWhereUniqueInput | DocumentChunkWhereUniqueInput[]
    delete?: DocumentChunkWhereUniqueInput | DocumentChunkWhereUniqueInput[]
    connect?: DocumentChunkWhereUniqueInput | DocumentChunkWhereUniqueInput[]
    update?: DocumentChunkUpdateWithWhereUniqueWithoutKnowledgeBaseInput | DocumentChunkUpdateWithWhereUniqueWithoutKnowledgeBaseInput[]
    updateMany?: DocumentChunkUpdateManyWithWhereWithoutKnowledgeBaseInput | DocumentChunkUpdateManyWithWhereWithoutKnowledgeBaseInput[]
    deleteMany?: DocumentChunkScalarWhereInput | DocumentChunkScalarWhereInput[]
  }

  export type TagUncheckedUpdateManyWithoutKnowledgeBaseNestedInput = {
    create?: XOR<TagCreateWithoutKnowledgeBaseInput, TagUncheckedCreateWithoutKnowledgeBaseInput> | TagCreateWithoutKnowledgeBaseInput[] | TagUncheckedCreateWithoutKnowledgeBaseInput[]
    connectOrCreate?: TagCreateOrConnectWithoutKnowledgeBaseInput | TagCreateOrConnectWithoutKnowledgeBaseInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutKnowledgeBaseInput | TagUpsertWithWhereUniqueWithoutKnowledgeBaseInput[]
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutKnowledgeBaseInput | TagUpdateWithWhereUniqueWithoutKnowledgeBaseInput[]
    updateMany?: TagUpdateManyWithWhereWithoutKnowledgeBaseInput | TagUpdateManyWithWhereWithoutKnowledgeBaseInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type KnowledgeBaseCreateNestedOneWithoutChunksInput = {
    create?: XOR<KnowledgeBaseCreateWithoutChunksInput, KnowledgeBaseUncheckedCreateWithoutChunksInput>
    connectOrCreate?: KnowledgeBaseCreateOrConnectWithoutChunksInput
    connect?: KnowledgeBaseWhereUniqueInput
  }

  export type KnowledgeBaseUpdateOneRequiredWithoutChunksNestedInput = {
    create?: XOR<KnowledgeBaseCreateWithoutChunksInput, KnowledgeBaseUncheckedCreateWithoutChunksInput>
    connectOrCreate?: KnowledgeBaseCreateOrConnectWithoutChunksInput
    upsert?: KnowledgeBaseUpsertWithoutChunksInput
    connect?: KnowledgeBaseWhereUniqueInput
    update?: XOR<XOR<KnowledgeBaseUpdateToOneWithWhereWithoutChunksInput, KnowledgeBaseUpdateWithoutChunksInput>, KnowledgeBaseUncheckedUpdateWithoutChunksInput>
  }

  export type CulturalStoryCreatethemesInput = {
    set: string[]
  }

  export type CulturalStoryCreateapplicableForInput = {
    set: string[]
  }

  export type CulturalStoryCreatemoralLessonsInput = {
    set: string[]
  }

  export type CulturalStoryCreatetagsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutCulturalStoriesInput = {
    create?: XOR<UserCreateWithoutCulturalStoriesInput, UserUncheckedCreateWithoutCulturalStoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCulturalStoriesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumStorySourceFieldUpdateOperationsInput = {
    set?: $Enums.StorySource
  }

  export type CulturalStoryUpdatethemesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CulturalStoryUpdateapplicableForInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CulturalStoryUpdatemoralLessonsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CulturalStoryUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutCulturalStoriesNestedInput = {
    create?: XOR<UserCreateWithoutCulturalStoriesInput, UserUncheckedCreateWithoutCulturalStoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCulturalStoriesInput
    upsert?: UserUpsertWithoutCulturalStoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCulturalStoriesInput, UserUpdateWithoutCulturalStoriesInput>, UserUncheckedUpdateWithoutCulturalStoriesInput>
  }

  export type ChildCreateNestedOneWithoutConcernsInput = {
    create?: XOR<ChildCreateWithoutConcernsInput, ChildUncheckedCreateWithoutConcernsInput>
    connectOrCreate?: ChildCreateOrConnectWithoutConcernsInput
    connect?: ChildWhereUniqueInput
  }

  export type EnumConcernCategoryFieldUpdateOperationsInput = {
    set?: $Enums.ConcernCategory
  }

  export type EnumSeverityFieldUpdateOperationsInput = {
    set?: $Enums.Severity
  }

  export type EnumConcernStatusFieldUpdateOperationsInput = {
    set?: $Enums.ConcernStatus
  }

  export type ChildUpdateOneRequiredWithoutConcernsNestedInput = {
    create?: XOR<ChildCreateWithoutConcernsInput, ChildUncheckedCreateWithoutConcernsInput>
    connectOrCreate?: ChildCreateOrConnectWithoutConcernsInput
    upsert?: ChildUpsertWithoutConcernsInput
    connect?: ChildWhereUniqueInput
    update?: XOR<XOR<ChildUpdateToOneWithWhereWithoutConcernsInput, ChildUpdateWithoutConcernsInput>, ChildUncheckedUpdateWithoutConcernsInput>
  }

  export type SessionCreateNestedOneWithoutChatMessagesInput = {
    create?: XOR<SessionCreateWithoutChatMessagesInput, SessionUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: SessionCreateOrConnectWithoutChatMessagesInput
    connect?: SessionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChatMessagesInput = {
    create?: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type SessionUpdateOneWithoutChatMessagesNestedInput = {
    create?: XOR<SessionCreateWithoutChatMessagesInput, SessionUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: SessionCreateOrConnectWithoutChatMessagesInput
    upsert?: SessionUpsertWithoutChatMessagesInput
    disconnect?: SessionWhereInput | boolean
    delete?: SessionWhereInput | boolean
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutChatMessagesInput, SessionUpdateWithoutChatMessagesInput>, SessionUncheckedUpdateWithoutChatMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutChatMessagesNestedInput = {
    create?: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatMessagesInput
    upsert?: UserUpsertWithoutChatMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChatMessagesInput, UserUpdateWithoutChatMessagesInput>, UserUncheckedUpdateWithoutChatMessagesInput>
  }

  export type SessionCreateNestedOneWithoutAiChatConversationsInput = {
    create?: XOR<SessionCreateWithoutAiChatConversationsInput, SessionUncheckedCreateWithoutAiChatConversationsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutAiChatConversationsInput
    connect?: SessionWhereUniqueInput
  }

  export type ChildCreateNestedOneWithoutAiChatConversationsInput = {
    create?: XOR<ChildCreateWithoutAiChatConversationsInput, ChildUncheckedCreateWithoutAiChatConversationsInput>
    connectOrCreate?: ChildCreateOrConnectWithoutAiChatConversationsInput
    connect?: ChildWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAiChatConversationsInput = {
    create?: XOR<UserCreateWithoutAiChatConversationsInput, UserUncheckedCreateWithoutAiChatConversationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAiChatConversationsInput
    connect?: UserWhereUniqueInput
  }

  export type AiChatMessageCreateNestedManyWithoutConversationInput = {
    create?: XOR<AiChatMessageCreateWithoutConversationInput, AiChatMessageUncheckedCreateWithoutConversationInput> | AiChatMessageCreateWithoutConversationInput[] | AiChatMessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: AiChatMessageCreateOrConnectWithoutConversationInput | AiChatMessageCreateOrConnectWithoutConversationInput[]
    createMany?: AiChatMessageCreateManyConversationInputEnvelope
    connect?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
  }

  export type AiChatMessageUncheckedCreateNestedManyWithoutConversationInput = {
    create?: XOR<AiChatMessageCreateWithoutConversationInput, AiChatMessageUncheckedCreateWithoutConversationInput> | AiChatMessageCreateWithoutConversationInput[] | AiChatMessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: AiChatMessageCreateOrConnectWithoutConversationInput | AiChatMessageCreateOrConnectWithoutConversationInput[]
    createMany?: AiChatMessageCreateManyConversationInputEnvelope
    connect?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
  }

  export type SessionUpdateOneRequiredWithoutAiChatConversationsNestedInput = {
    create?: XOR<SessionCreateWithoutAiChatConversationsInput, SessionUncheckedCreateWithoutAiChatConversationsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutAiChatConversationsInput
    upsert?: SessionUpsertWithoutAiChatConversationsInput
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutAiChatConversationsInput, SessionUpdateWithoutAiChatConversationsInput>, SessionUncheckedUpdateWithoutAiChatConversationsInput>
  }

  export type ChildUpdateOneRequiredWithoutAiChatConversationsNestedInput = {
    create?: XOR<ChildCreateWithoutAiChatConversationsInput, ChildUncheckedCreateWithoutAiChatConversationsInput>
    connectOrCreate?: ChildCreateOrConnectWithoutAiChatConversationsInput
    upsert?: ChildUpsertWithoutAiChatConversationsInput
    connect?: ChildWhereUniqueInput
    update?: XOR<XOR<ChildUpdateToOneWithWhereWithoutAiChatConversationsInput, ChildUpdateWithoutAiChatConversationsInput>, ChildUncheckedUpdateWithoutAiChatConversationsInput>
  }

  export type UserUpdateOneRequiredWithoutAiChatConversationsNestedInput = {
    create?: XOR<UserCreateWithoutAiChatConversationsInput, UserUncheckedCreateWithoutAiChatConversationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAiChatConversationsInput
    upsert?: UserUpsertWithoutAiChatConversationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAiChatConversationsInput, UserUpdateWithoutAiChatConversationsInput>, UserUncheckedUpdateWithoutAiChatConversationsInput>
  }

  export type AiChatMessageUpdateManyWithoutConversationNestedInput = {
    create?: XOR<AiChatMessageCreateWithoutConversationInput, AiChatMessageUncheckedCreateWithoutConversationInput> | AiChatMessageCreateWithoutConversationInput[] | AiChatMessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: AiChatMessageCreateOrConnectWithoutConversationInput | AiChatMessageCreateOrConnectWithoutConversationInput[]
    upsert?: AiChatMessageUpsertWithWhereUniqueWithoutConversationInput | AiChatMessageUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: AiChatMessageCreateManyConversationInputEnvelope
    set?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
    disconnect?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
    delete?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
    connect?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
    update?: AiChatMessageUpdateWithWhereUniqueWithoutConversationInput | AiChatMessageUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: AiChatMessageUpdateManyWithWhereWithoutConversationInput | AiChatMessageUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: AiChatMessageScalarWhereInput | AiChatMessageScalarWhereInput[]
  }

  export type AiChatMessageUncheckedUpdateManyWithoutConversationNestedInput = {
    create?: XOR<AiChatMessageCreateWithoutConversationInput, AiChatMessageUncheckedCreateWithoutConversationInput> | AiChatMessageCreateWithoutConversationInput[] | AiChatMessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: AiChatMessageCreateOrConnectWithoutConversationInput | AiChatMessageCreateOrConnectWithoutConversationInput[]
    upsert?: AiChatMessageUpsertWithWhereUniqueWithoutConversationInput | AiChatMessageUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: AiChatMessageCreateManyConversationInputEnvelope
    set?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
    disconnect?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
    delete?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
    connect?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
    update?: AiChatMessageUpdateWithWhereUniqueWithoutConversationInput | AiChatMessageUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: AiChatMessageUpdateManyWithWhereWithoutConversationInput | AiChatMessageUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: AiChatMessageScalarWhereInput | AiChatMessageScalarWhereInput[]
  }

  export type AiChatConversationCreateNestedOneWithoutMessagesInput = {
    create?: XOR<AiChatConversationCreateWithoutMessagesInput, AiChatConversationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: AiChatConversationCreateOrConnectWithoutMessagesInput
    connect?: AiChatConversationWhereUniqueInput
  }

  export type EnumAiChatRoleFieldUpdateOperationsInput = {
    set?: $Enums.AiChatRole
  }

  export type AiChatConversationUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<AiChatConversationCreateWithoutMessagesInput, AiChatConversationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: AiChatConversationCreateOrConnectWithoutMessagesInput
    upsert?: AiChatConversationUpsertWithoutMessagesInput
    connect?: AiChatConversationWhereUniqueInput
    update?: XOR<XOR<AiChatConversationUpdateToOneWithWhereWithoutMessagesInput, AiChatConversationUpdateWithoutMessagesInput>, AiChatConversationUncheckedUpdateWithoutMessagesInput>
  }

  export type ConversationMemoryCreateassociatedTagsInput = {
    set: string[]
  }

  export type ChildCreateNestedOneWithoutConversationMemoriesInput = {
    create?: XOR<ChildCreateWithoutConversationMemoriesInput, ChildUncheckedCreateWithoutConversationMemoriesInput>
    connectOrCreate?: ChildCreateOrConnectWithoutConversationMemoriesInput
    connect?: ChildWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutConversationMemoriesInput = {
    create?: XOR<UserCreateWithoutConversationMemoriesInput, UserUncheckedCreateWithoutConversationMemoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutConversationMemoriesInput
    connect?: UserWhereUniqueInput
  }

  export type SessionCreateNestedOneWithoutConversationMemoriesInput = {
    create?: XOR<SessionCreateWithoutConversationMemoriesInput, SessionUncheckedCreateWithoutConversationMemoriesInput>
    connectOrCreate?: SessionCreateOrConnectWithoutConversationMemoriesInput
    connect?: SessionWhereUniqueInput
  }

  export type EnumMemoryTypeFieldUpdateOperationsInput = {
    set?: $Enums.MemoryType
  }

  export type ConversationMemoryUpdateassociatedTagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ChildUpdateOneRequiredWithoutConversationMemoriesNestedInput = {
    create?: XOR<ChildCreateWithoutConversationMemoriesInput, ChildUncheckedCreateWithoutConversationMemoriesInput>
    connectOrCreate?: ChildCreateOrConnectWithoutConversationMemoriesInput
    upsert?: ChildUpsertWithoutConversationMemoriesInput
    connect?: ChildWhereUniqueInput
    update?: XOR<XOR<ChildUpdateToOneWithWhereWithoutConversationMemoriesInput, ChildUpdateWithoutConversationMemoriesInput>, ChildUncheckedUpdateWithoutConversationMemoriesInput>
  }

  export type UserUpdateOneRequiredWithoutConversationMemoriesNestedInput = {
    create?: XOR<UserCreateWithoutConversationMemoriesInput, UserUncheckedCreateWithoutConversationMemoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutConversationMemoriesInput
    upsert?: UserUpsertWithoutConversationMemoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConversationMemoriesInput, UserUpdateWithoutConversationMemoriesInput>, UserUncheckedUpdateWithoutConversationMemoriesInput>
  }

  export type SessionUpdateOneWithoutConversationMemoriesNestedInput = {
    create?: XOR<SessionCreateWithoutConversationMemoriesInput, SessionUncheckedCreateWithoutConversationMemoriesInput>
    connectOrCreate?: SessionCreateOrConnectWithoutConversationMemoriesInput
    upsert?: SessionUpsertWithoutConversationMemoriesInput
    disconnect?: SessionWhereInput | boolean
    delete?: SessionWhereInput | boolean
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutConversationMemoriesInput, SessionUpdateWithoutConversationMemoriesInput>, SessionUncheckedUpdateWithoutConversationMemoriesInput>
  }

  export type ChildCreateNestedManyWithoutTagsInput = {
    create?: XOR<ChildCreateWithoutTagsInput, ChildUncheckedCreateWithoutTagsInput> | ChildCreateWithoutTagsInput[] | ChildUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: ChildCreateOrConnectWithoutTagsInput | ChildCreateOrConnectWithoutTagsInput[]
    connect?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
  }

  export type KnowledgeBaseCreateNestedManyWithoutTagsInput = {
    create?: XOR<KnowledgeBaseCreateWithoutTagsInput, KnowledgeBaseUncheckedCreateWithoutTagsInput> | KnowledgeBaseCreateWithoutTagsInput[] | KnowledgeBaseUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: KnowledgeBaseCreateOrConnectWithoutTagsInput | KnowledgeBaseCreateOrConnectWithoutTagsInput[]
    connect?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
  }

  export type ChildUncheckedCreateNestedManyWithoutTagsInput = {
    create?: XOR<ChildCreateWithoutTagsInput, ChildUncheckedCreateWithoutTagsInput> | ChildCreateWithoutTagsInput[] | ChildUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: ChildCreateOrConnectWithoutTagsInput | ChildCreateOrConnectWithoutTagsInput[]
    connect?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
  }

  export type KnowledgeBaseUncheckedCreateNestedManyWithoutTagsInput = {
    create?: XOR<KnowledgeBaseCreateWithoutTagsInput, KnowledgeBaseUncheckedCreateWithoutTagsInput> | KnowledgeBaseCreateWithoutTagsInput[] | KnowledgeBaseUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: KnowledgeBaseCreateOrConnectWithoutTagsInput | KnowledgeBaseCreateOrConnectWithoutTagsInput[]
    connect?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
  }

  export type EnumTagCategoryFieldUpdateOperationsInput = {
    set?: $Enums.TagCategory
  }

  export type ChildUpdateManyWithoutTagsNestedInput = {
    create?: XOR<ChildCreateWithoutTagsInput, ChildUncheckedCreateWithoutTagsInput> | ChildCreateWithoutTagsInput[] | ChildUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: ChildCreateOrConnectWithoutTagsInput | ChildCreateOrConnectWithoutTagsInput[]
    upsert?: ChildUpsertWithWhereUniqueWithoutTagsInput | ChildUpsertWithWhereUniqueWithoutTagsInput[]
    set?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
    disconnect?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
    delete?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
    connect?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
    update?: ChildUpdateWithWhereUniqueWithoutTagsInput | ChildUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: ChildUpdateManyWithWhereWithoutTagsInput | ChildUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: ChildScalarWhereInput | ChildScalarWhereInput[]
  }

  export type KnowledgeBaseUpdateManyWithoutTagsNestedInput = {
    create?: XOR<KnowledgeBaseCreateWithoutTagsInput, KnowledgeBaseUncheckedCreateWithoutTagsInput> | KnowledgeBaseCreateWithoutTagsInput[] | KnowledgeBaseUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: KnowledgeBaseCreateOrConnectWithoutTagsInput | KnowledgeBaseCreateOrConnectWithoutTagsInput[]
    upsert?: KnowledgeBaseUpsertWithWhereUniqueWithoutTagsInput | KnowledgeBaseUpsertWithWhereUniqueWithoutTagsInput[]
    set?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
    disconnect?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
    delete?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
    connect?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
    update?: KnowledgeBaseUpdateWithWhereUniqueWithoutTagsInput | KnowledgeBaseUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: KnowledgeBaseUpdateManyWithWhereWithoutTagsInput | KnowledgeBaseUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: KnowledgeBaseScalarWhereInput | KnowledgeBaseScalarWhereInput[]
  }

  export type ChildUncheckedUpdateManyWithoutTagsNestedInput = {
    create?: XOR<ChildCreateWithoutTagsInput, ChildUncheckedCreateWithoutTagsInput> | ChildCreateWithoutTagsInput[] | ChildUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: ChildCreateOrConnectWithoutTagsInput | ChildCreateOrConnectWithoutTagsInput[]
    upsert?: ChildUpsertWithWhereUniqueWithoutTagsInput | ChildUpsertWithWhereUniqueWithoutTagsInput[]
    set?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
    disconnect?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
    delete?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
    connect?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
    update?: ChildUpdateWithWhereUniqueWithoutTagsInput | ChildUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: ChildUpdateManyWithWhereWithoutTagsInput | ChildUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: ChildScalarWhereInput | ChildScalarWhereInput[]
  }

  export type KnowledgeBaseUncheckedUpdateManyWithoutTagsNestedInput = {
    create?: XOR<KnowledgeBaseCreateWithoutTagsInput, KnowledgeBaseUncheckedCreateWithoutTagsInput> | KnowledgeBaseCreateWithoutTagsInput[] | KnowledgeBaseUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: KnowledgeBaseCreateOrConnectWithoutTagsInput | KnowledgeBaseCreateOrConnectWithoutTagsInput[]
    upsert?: KnowledgeBaseUpsertWithWhereUniqueWithoutTagsInput | KnowledgeBaseUpsertWithWhereUniqueWithoutTagsInput[]
    set?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
    disconnect?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
    delete?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
    connect?: KnowledgeBaseWhereUniqueInput | KnowledgeBaseWhereUniqueInput[]
    update?: KnowledgeBaseUpdateWithWhereUniqueWithoutTagsInput | KnowledgeBaseUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: KnowledgeBaseUpdateManyWithWhereWithoutTagsInput | KnowledgeBaseUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: KnowledgeBaseScalarWhereInput | KnowledgeBaseScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumApprovalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalStatusFilter<$PrismaModel> | $Enums.ApprovalStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumApprovalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalStatusFilter<$PrismaModel>
    _max?: NestedEnumApprovalStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedEnumSessionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusFilter<$PrismaModel> | $Enums.SessionStatus
  }

  export type NestedEnumSessionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionType | EnumSessionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SessionType[] | ListEnumSessionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionType[] | ListEnumSessionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionTypeFilter<$PrismaModel> | $Enums.SessionType
  }

  export type NestedEnumSessionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SessionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSessionStatusFilter<$PrismaModel>
    _max?: NestedEnumSessionStatusFilter<$PrismaModel>
  }

  export type NestedEnumSessionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionType | EnumSessionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SessionType[] | ListEnumSessionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionType[] | ListEnumSessionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionTypeWithAggregatesFilter<$PrismaModel> | $Enums.SessionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSessionTypeFilter<$PrismaModel>
    _max?: NestedEnumSessionTypeFilter<$PrismaModel>
  }

  export type NestedEnumResolutionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ResolutionStatus | EnumResolutionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ResolutionStatus[] | ListEnumResolutionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResolutionStatus[] | ListEnumResolutionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumResolutionStatusFilter<$PrismaModel> | $Enums.ResolutionStatus
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumResolutionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ResolutionStatus | EnumResolutionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ResolutionStatus[] | ListEnumResolutionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResolutionStatus[] | ListEnumResolutionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumResolutionStatusWithAggregatesFilter<$PrismaModel> | $Enums.ResolutionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumResolutionStatusFilter<$PrismaModel>
    _max?: NestedEnumResolutionStatusFilter<$PrismaModel>
  }

  export type NestedEnumKnowledgeCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.KnowledgeCategory | EnumKnowledgeCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.KnowledgeCategory[] | ListEnumKnowledgeCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.KnowledgeCategory[] | ListEnumKnowledgeCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumKnowledgeCategoryFilter<$PrismaModel> | $Enums.KnowledgeCategory
  }

  export type NestedEnumKnowledgeCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.KnowledgeCategory | EnumKnowledgeCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.KnowledgeCategory[] | ListEnumKnowledgeCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.KnowledgeCategory[] | ListEnumKnowledgeCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumKnowledgeCategoryWithAggregatesFilter<$PrismaModel> | $Enums.KnowledgeCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKnowledgeCategoryFilter<$PrismaModel>
    _max?: NestedEnumKnowledgeCategoryFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumStorySourceFilter<$PrismaModel = never> = {
    equals?: $Enums.StorySource | EnumStorySourceFieldRefInput<$PrismaModel>
    in?: $Enums.StorySource[] | ListEnumStorySourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.StorySource[] | ListEnumStorySourceFieldRefInput<$PrismaModel>
    not?: NestedEnumStorySourceFilter<$PrismaModel> | $Enums.StorySource
  }

  export type NestedEnumStorySourceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StorySource | EnumStorySourceFieldRefInput<$PrismaModel>
    in?: $Enums.StorySource[] | ListEnumStorySourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.StorySource[] | ListEnumStorySourceFieldRefInput<$PrismaModel>
    not?: NestedEnumStorySourceWithAggregatesFilter<$PrismaModel> | $Enums.StorySource
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStorySourceFilter<$PrismaModel>
    _max?: NestedEnumStorySourceFilter<$PrismaModel>
  }

  export type NestedEnumConcernCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.ConcernCategory | EnumConcernCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ConcernCategory[] | ListEnumConcernCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConcernCategory[] | ListEnumConcernCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumConcernCategoryFilter<$PrismaModel> | $Enums.ConcernCategory
  }

  export type NestedEnumSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.Severity | EnumSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.Severity[] | ListEnumSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Severity[] | ListEnumSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumSeverityFilter<$PrismaModel> | $Enums.Severity
  }

  export type NestedEnumConcernStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ConcernStatus | EnumConcernStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ConcernStatus[] | ListEnumConcernStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConcernStatus[] | ListEnumConcernStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumConcernStatusFilter<$PrismaModel> | $Enums.ConcernStatus
  }

  export type NestedEnumConcernCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConcernCategory | EnumConcernCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ConcernCategory[] | ListEnumConcernCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConcernCategory[] | ListEnumConcernCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumConcernCategoryWithAggregatesFilter<$PrismaModel> | $Enums.ConcernCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConcernCategoryFilter<$PrismaModel>
    _max?: NestedEnumConcernCategoryFilter<$PrismaModel>
  }

  export type NestedEnumSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Severity | EnumSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.Severity[] | ListEnumSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Severity[] | ListEnumSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumSeverityWithAggregatesFilter<$PrismaModel> | $Enums.Severity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSeverityFilter<$PrismaModel>
    _max?: NestedEnumSeverityFilter<$PrismaModel>
  }

  export type NestedEnumConcernStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConcernStatus | EnumConcernStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ConcernStatus[] | ListEnumConcernStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConcernStatus[] | ListEnumConcernStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumConcernStatusWithAggregatesFilter<$PrismaModel> | $Enums.ConcernStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConcernStatusFilter<$PrismaModel>
    _max?: NestedEnumConcernStatusFilter<$PrismaModel>
  }

  export type NestedEnumAiChatRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.AiChatRole | EnumAiChatRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AiChatRole[] | ListEnumAiChatRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.AiChatRole[] | ListEnumAiChatRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumAiChatRoleFilter<$PrismaModel> | $Enums.AiChatRole
  }

  export type NestedEnumAiChatRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AiChatRole | EnumAiChatRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AiChatRole[] | ListEnumAiChatRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.AiChatRole[] | ListEnumAiChatRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumAiChatRoleWithAggregatesFilter<$PrismaModel> | $Enums.AiChatRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAiChatRoleFilter<$PrismaModel>
    _max?: NestedEnumAiChatRoleFilter<$PrismaModel>
  }

  export type NestedEnumMemoryTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MemoryType | EnumMemoryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MemoryType[] | ListEnumMemoryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemoryType[] | ListEnumMemoryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMemoryTypeFilter<$PrismaModel> | $Enums.MemoryType
  }

  export type NestedEnumMemoryTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MemoryType | EnumMemoryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MemoryType[] | ListEnumMemoryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemoryType[] | ListEnumMemoryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMemoryTypeWithAggregatesFilter<$PrismaModel> | $Enums.MemoryType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMemoryTypeFilter<$PrismaModel>
    _max?: NestedEnumMemoryTypeFilter<$PrismaModel>
  }

  export type NestedEnumTagCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.TagCategory | EnumTagCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.TagCategory[] | ListEnumTagCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.TagCategory[] | ListEnumTagCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumTagCategoryFilter<$PrismaModel> | $Enums.TagCategory
  }

  export type NestedEnumTagCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TagCategory | EnumTagCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.TagCategory[] | ListEnumTagCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.TagCategory[] | ListEnumTagCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumTagCategoryWithAggregatesFilter<$PrismaModel> | $Enums.TagCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTagCategoryFilter<$PrismaModel>
    _max?: NestedEnumTagCategoryFilter<$PrismaModel>
  }

  export type AssignmentCreateWithoutVolunteerInput = {
    id?: string
    assignedAt?: Date | string
    isActive?: boolean
    notes?: string | null
    child: ChildCreateNestedOneWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateWithoutVolunteerInput = {
    id?: string
    childId: string
    assignedAt?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type AssignmentCreateOrConnectWithoutVolunteerInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutVolunteerInput, AssignmentUncheckedCreateWithoutVolunteerInput>
  }

  export type AssignmentCreateManyVolunteerInputEnvelope = {
    data: AssignmentCreateManyVolunteerInput | AssignmentCreateManyVolunteerInput[]
    skipDuplicates?: boolean
  }

  export type ChatMessageCreateWithoutUserInput = {
    id?: string
    message: string
    response?: string | null
    context?: string | null
    isSystemMsg?: boolean
    createdAt?: Date | string
    session?: SessionCreateNestedOneWithoutChatMessagesInput
  }

  export type ChatMessageUncheckedCreateWithoutUserInput = {
    id?: string
    sessionId?: string | null
    message: string
    response?: string | null
    context?: string | null
    isSystemMsg?: boolean
    createdAt?: Date | string
  }

  export type ChatMessageCreateOrConnectWithoutUserInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput>
  }

  export type ChatMessageCreateManyUserInputEnvelope = {
    data: ChatMessageCreateManyUserInput | ChatMessageCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CulturalStoryCreateWithoutCreatedByInput = {
    id?: string
    title: string
    source: $Enums.StorySource
    summary: string
    fullStory: string
    themes?: CulturalStoryCreatethemesInput | string[]
    applicableFor?: CulturalStoryCreateapplicableForInput | string[]
    moralLessons?: CulturalStoryCreatemoralLessonsInput | string[]
    tags?: CulturalStoryCreatetagsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CulturalStoryUncheckedCreateWithoutCreatedByInput = {
    id?: string
    title: string
    source: $Enums.StorySource
    summary: string
    fullStory: string
    themes?: CulturalStoryCreatethemesInput | string[]
    applicableFor?: CulturalStoryCreateapplicableForInput | string[]
    moralLessons?: CulturalStoryCreatemoralLessonsInput | string[]
    tags?: CulturalStoryCreatetagsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CulturalStoryCreateOrConnectWithoutCreatedByInput = {
    where: CulturalStoryWhereUniqueInput
    create: XOR<CulturalStoryCreateWithoutCreatedByInput, CulturalStoryUncheckedCreateWithoutCreatedByInput>
  }

  export type CulturalStoryCreateManyCreatedByInputEnvelope = {
    data: CulturalStoryCreateManyCreatedByInput | CulturalStoryCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type KnowledgeBaseCreateWithoutCreatedByInput = {
    id?: string
    title: string
    content: string
    summary?: string | null
    category: $Enums.KnowledgeCategory
    subCategory?: string | null
    fileType?: string | null
    fileUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    downloadCount?: number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: number | null
    isProcessed?: boolean
    views?: number
    chunks?: DocumentChunkCreateNestedManyWithoutKnowledgeBaseInput
    tags?: TagCreateNestedManyWithoutKnowledgeBaseInput
  }

  export type KnowledgeBaseUncheckedCreateWithoutCreatedByInput = {
    id?: string
    title: string
    content: string
    summary?: string | null
    category: $Enums.KnowledgeCategory
    subCategory?: string | null
    fileType?: string | null
    fileUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    downloadCount?: number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: number | null
    isProcessed?: boolean
    views?: number
    chunks?: DocumentChunkUncheckedCreateNestedManyWithoutKnowledgeBaseInput
    tags?: TagUncheckedCreateNestedManyWithoutKnowledgeBaseInput
  }

  export type KnowledgeBaseCreateOrConnectWithoutCreatedByInput = {
    where: KnowledgeBaseWhereUniqueInput
    create: XOR<KnowledgeBaseCreateWithoutCreatedByInput, KnowledgeBaseUncheckedCreateWithoutCreatedByInput>
  }

  export type KnowledgeBaseCreateManyCreatedByInputEnvelope = {
    data: KnowledgeBaseCreateManyCreatedByInput | KnowledgeBaseCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutVolunteerInput = {
    id?: string
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    status?: $Enums.SessionStatus
    sessionType?: $Enums.SessionType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageCreateNestedManyWithoutSessionInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutSessionInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutSessionInput
    summary?: SessionSummaryCreateNestedOneWithoutSessionInput
    child: ChildCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateWithoutVolunteerInput = {
    id?: string
    childId: string
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    status?: $Enums.SessionStatus
    sessionType?: $Enums.SessionType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSessionInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutSessionInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutSessionInput
    summary?: SessionSummaryUncheckedCreateNestedOneWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutVolunteerInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutVolunteerInput, SessionUncheckedCreateWithoutVolunteerInput>
  }

  export type SessionCreateManyVolunteerInputEnvelope = {
    data: SessionCreateManyVolunteerInput | SessionCreateManyVolunteerInput[]
    skipDuplicates?: boolean
  }

  export type AiChatConversationCreateWithoutVolunteerInput = {
    id?: string
    conversationName?: string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    session: SessionCreateNestedOneWithoutAiChatConversationsInput
    child: ChildCreateNestedOneWithoutAiChatConversationsInput
    messages?: AiChatMessageCreateNestedManyWithoutConversationInput
  }

  export type AiChatConversationUncheckedCreateWithoutVolunteerInput = {
    id?: string
    sessionId: string
    childId: string
    conversationName?: string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: AiChatMessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type AiChatConversationCreateOrConnectWithoutVolunteerInput = {
    where: AiChatConversationWhereUniqueInput
    create: XOR<AiChatConversationCreateWithoutVolunteerInput, AiChatConversationUncheckedCreateWithoutVolunteerInput>
  }

  export type AiChatConversationCreateManyVolunteerInputEnvelope = {
    data: AiChatConversationCreateManyVolunteerInput | AiChatConversationCreateManyVolunteerInput[]
    skipDuplicates?: boolean
  }

  export type ConversationMemoryCreateWithoutVolunteerInput = {
    id?: string
    memoryType: $Enums.MemoryType
    content: string
    importance?: number
    associatedTags?: ConversationMemoryCreateassociatedTagsInput | string[]
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    child: ChildCreateNestedOneWithoutConversationMemoriesInput
    session?: SessionCreateNestedOneWithoutConversationMemoriesInput
  }

  export type ConversationMemoryUncheckedCreateWithoutVolunteerInput = {
    id?: string
    childId: string
    sessionId?: string | null
    memoryType: $Enums.MemoryType
    content: string
    importance?: number
    associatedTags?: ConversationMemoryCreateassociatedTagsInput | string[]
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationMemoryCreateOrConnectWithoutVolunteerInput = {
    where: ConversationMemoryWhereUniqueInput
    create: XOR<ConversationMemoryCreateWithoutVolunteerInput, ConversationMemoryUncheckedCreateWithoutVolunteerInput>
  }

  export type ConversationMemoryCreateManyVolunteerInputEnvelope = {
    data: ConversationMemoryCreateManyVolunteerInput | ConversationMemoryCreateManyVolunteerInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutApprovedUsersInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentCreateNestedManyWithoutVolunteerInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    culturalStories?: CulturalStoryCreateNestedManyWithoutCreatedByInput
    knowledgeBase?: KnowledgeBaseCreateNestedManyWithoutCreatedByInput
    sessions?: SessionCreateNestedManyWithoutVolunteerInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutVolunteerInput
    approver?: UserCreateNestedOneWithoutApprovedUsersInput
  }

  export type UserUncheckedCreateWithoutApprovedUsersInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    approvedBy?: string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentUncheckedCreateNestedManyWithoutVolunteerInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    culturalStories?: CulturalStoryUncheckedCreateNestedManyWithoutCreatedByInput
    knowledgeBase?: KnowledgeBaseUncheckedCreateNestedManyWithoutCreatedByInput
    sessions?: SessionUncheckedCreateNestedManyWithoutVolunteerInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutVolunteerInput
  }

  export type UserCreateOrConnectWithoutApprovedUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApprovedUsersInput, UserUncheckedCreateWithoutApprovedUsersInput>
  }

  export type UserCreateWithoutApproverInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentCreateNestedManyWithoutVolunteerInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    culturalStories?: CulturalStoryCreateNestedManyWithoutCreatedByInput
    knowledgeBase?: KnowledgeBaseCreateNestedManyWithoutCreatedByInput
    sessions?: SessionCreateNestedManyWithoutVolunteerInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutVolunteerInput
    approvedUsers?: UserCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutApproverInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentUncheckedCreateNestedManyWithoutVolunteerInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    culturalStories?: CulturalStoryUncheckedCreateNestedManyWithoutCreatedByInput
    knowledgeBase?: KnowledgeBaseUncheckedCreateNestedManyWithoutCreatedByInput
    sessions?: SessionUncheckedCreateNestedManyWithoutVolunteerInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutVolunteerInput
    approvedUsers?: UserUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutApproverInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApproverInput, UserUncheckedCreateWithoutApproverInput>
  }

  export type UserCreateManyApproverInputEnvelope = {
    data: UserCreateManyApproverInput | UserCreateManyApproverInput[]
    skipDuplicates?: boolean
  }

  export type AssignmentUpsertWithWhereUniqueWithoutVolunteerInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutVolunteerInput, AssignmentUncheckedUpdateWithoutVolunteerInput>
    create: XOR<AssignmentCreateWithoutVolunteerInput, AssignmentUncheckedCreateWithoutVolunteerInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutVolunteerInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutVolunteerInput, AssignmentUncheckedUpdateWithoutVolunteerInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutVolunteerInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutVolunteerInput>
  }

  export type AssignmentScalarWhereInput = {
    AND?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
    OR?: AssignmentScalarWhereInput[]
    NOT?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
    id?: StringFilter<"Assignment"> | string
    volunteerId?: StringFilter<"Assignment"> | string
    childId?: StringFilter<"Assignment"> | string
    assignedAt?: DateTimeFilter<"Assignment"> | Date | string
    isActive?: BoolFilter<"Assignment"> | boolean
    notes?: StringNullableFilter<"Assignment"> | string | null
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutUserInput, ChatMessageUncheckedUpdateWithoutUserInput>
    create: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutUserInput, ChatMessageUncheckedUpdateWithoutUserInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutUserInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutUserInput>
  }

  export type ChatMessageScalarWhereInput = {
    AND?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    OR?: ChatMessageScalarWhereInput[]
    NOT?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    id?: StringFilter<"ChatMessage"> | string
    sessionId?: StringNullableFilter<"ChatMessage"> | string | null
    userId?: StringFilter<"ChatMessage"> | string
    message?: StringFilter<"ChatMessage"> | string
    response?: StringNullableFilter<"ChatMessage"> | string | null
    context?: StringNullableFilter<"ChatMessage"> | string | null
    isSystemMsg?: BoolFilter<"ChatMessage"> | boolean
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
  }

  export type CulturalStoryUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: CulturalStoryWhereUniqueInput
    update: XOR<CulturalStoryUpdateWithoutCreatedByInput, CulturalStoryUncheckedUpdateWithoutCreatedByInput>
    create: XOR<CulturalStoryCreateWithoutCreatedByInput, CulturalStoryUncheckedCreateWithoutCreatedByInput>
  }

  export type CulturalStoryUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: CulturalStoryWhereUniqueInput
    data: XOR<CulturalStoryUpdateWithoutCreatedByInput, CulturalStoryUncheckedUpdateWithoutCreatedByInput>
  }

  export type CulturalStoryUpdateManyWithWhereWithoutCreatedByInput = {
    where: CulturalStoryScalarWhereInput
    data: XOR<CulturalStoryUpdateManyMutationInput, CulturalStoryUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type CulturalStoryScalarWhereInput = {
    AND?: CulturalStoryScalarWhereInput | CulturalStoryScalarWhereInput[]
    OR?: CulturalStoryScalarWhereInput[]
    NOT?: CulturalStoryScalarWhereInput | CulturalStoryScalarWhereInput[]
    id?: StringFilter<"CulturalStory"> | string
    title?: StringFilter<"CulturalStory"> | string
    source?: EnumStorySourceFilter<"CulturalStory"> | $Enums.StorySource
    summary?: StringFilter<"CulturalStory"> | string
    fullStory?: StringFilter<"CulturalStory"> | string
    themes?: StringNullableListFilter<"CulturalStory">
    applicableFor?: StringNullableListFilter<"CulturalStory">
    moralLessons?: StringNullableListFilter<"CulturalStory">
    tags?: StringNullableListFilter<"CulturalStory">
    isActive?: BoolFilter<"CulturalStory"> | boolean
    createdById?: StringFilter<"CulturalStory"> | string
    createdAt?: DateTimeFilter<"CulturalStory"> | Date | string
    updatedAt?: DateTimeFilter<"CulturalStory"> | Date | string
  }

  export type KnowledgeBaseUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: KnowledgeBaseWhereUniqueInput
    update: XOR<KnowledgeBaseUpdateWithoutCreatedByInput, KnowledgeBaseUncheckedUpdateWithoutCreatedByInput>
    create: XOR<KnowledgeBaseCreateWithoutCreatedByInput, KnowledgeBaseUncheckedCreateWithoutCreatedByInput>
  }

  export type KnowledgeBaseUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: KnowledgeBaseWhereUniqueInput
    data: XOR<KnowledgeBaseUpdateWithoutCreatedByInput, KnowledgeBaseUncheckedUpdateWithoutCreatedByInput>
  }

  export type KnowledgeBaseUpdateManyWithWhereWithoutCreatedByInput = {
    where: KnowledgeBaseScalarWhereInput
    data: XOR<KnowledgeBaseUpdateManyMutationInput, KnowledgeBaseUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type KnowledgeBaseScalarWhereInput = {
    AND?: KnowledgeBaseScalarWhereInput | KnowledgeBaseScalarWhereInput[]
    OR?: KnowledgeBaseScalarWhereInput[]
    NOT?: KnowledgeBaseScalarWhereInput | KnowledgeBaseScalarWhereInput[]
    id?: StringFilter<"KnowledgeBase"> | string
    title?: StringFilter<"KnowledgeBase"> | string
    content?: StringFilter<"KnowledgeBase"> | string
    summary?: StringNullableFilter<"KnowledgeBase"> | string | null
    category?: EnumKnowledgeCategoryFilter<"KnowledgeBase"> | $Enums.KnowledgeCategory
    subCategory?: StringNullableFilter<"KnowledgeBase"> | string | null
    fileType?: StringNullableFilter<"KnowledgeBase"> | string | null
    fileUrl?: StringNullableFilter<"KnowledgeBase"> | string | null
    isActive?: BoolFilter<"KnowledgeBase"> | boolean
    createdById?: StringFilter<"KnowledgeBase"> | string
    createdAt?: DateTimeFilter<"KnowledgeBase"> | Date | string
    updatedAt?: DateTimeFilter<"KnowledgeBase"> | Date | string
    downloadCount?: IntFilter<"KnowledgeBase"> | number
    embeddings?: JsonNullableFilter<"KnowledgeBase">
    fileSize?: IntNullableFilter<"KnowledgeBase"> | number | null
    isProcessed?: BoolFilter<"KnowledgeBase"> | boolean
    views?: IntFilter<"KnowledgeBase"> | number
  }

  export type SessionUpsertWithWhereUniqueWithoutVolunteerInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutVolunteerInput, SessionUncheckedUpdateWithoutVolunteerInput>
    create: XOR<SessionCreateWithoutVolunteerInput, SessionUncheckedCreateWithoutVolunteerInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutVolunteerInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutVolunteerInput, SessionUncheckedUpdateWithoutVolunteerInput>
  }

  export type SessionUpdateManyWithWhereWithoutVolunteerInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutVolunteerInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    childId?: StringFilter<"Session"> | string
    volunteerId?: StringFilter<"Session"> | string
    scheduledAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    startedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    endedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    status?: EnumSessionStatusFilter<"Session"> | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFilter<"Session"> | $Enums.SessionType
    notes?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
  }

  export type AiChatConversationUpsertWithWhereUniqueWithoutVolunteerInput = {
    where: AiChatConversationWhereUniqueInput
    update: XOR<AiChatConversationUpdateWithoutVolunteerInput, AiChatConversationUncheckedUpdateWithoutVolunteerInput>
    create: XOR<AiChatConversationCreateWithoutVolunteerInput, AiChatConversationUncheckedCreateWithoutVolunteerInput>
  }

  export type AiChatConversationUpdateWithWhereUniqueWithoutVolunteerInput = {
    where: AiChatConversationWhereUniqueInput
    data: XOR<AiChatConversationUpdateWithoutVolunteerInput, AiChatConversationUncheckedUpdateWithoutVolunteerInput>
  }

  export type AiChatConversationUpdateManyWithWhereWithoutVolunteerInput = {
    where: AiChatConversationScalarWhereInput
    data: XOR<AiChatConversationUpdateManyMutationInput, AiChatConversationUncheckedUpdateManyWithoutVolunteerInput>
  }

  export type AiChatConversationScalarWhereInput = {
    AND?: AiChatConversationScalarWhereInput | AiChatConversationScalarWhereInput[]
    OR?: AiChatConversationScalarWhereInput[]
    NOT?: AiChatConversationScalarWhereInput | AiChatConversationScalarWhereInput[]
    id?: StringFilter<"AiChatConversation"> | string
    sessionId?: StringFilter<"AiChatConversation"> | string
    childId?: StringFilter<"AiChatConversation"> | string
    volunteerId?: StringFilter<"AiChatConversation"> | string
    conversationName?: StringNullableFilter<"AiChatConversation"> | string | null
    context?: JsonNullableFilter<"AiChatConversation">
    isActive?: BoolFilter<"AiChatConversation"> | boolean
    createdAt?: DateTimeFilter<"AiChatConversation"> | Date | string
    updatedAt?: DateTimeFilter<"AiChatConversation"> | Date | string
  }

  export type ConversationMemoryUpsertWithWhereUniqueWithoutVolunteerInput = {
    where: ConversationMemoryWhereUniqueInput
    update: XOR<ConversationMemoryUpdateWithoutVolunteerInput, ConversationMemoryUncheckedUpdateWithoutVolunteerInput>
    create: XOR<ConversationMemoryCreateWithoutVolunteerInput, ConversationMemoryUncheckedCreateWithoutVolunteerInput>
  }

  export type ConversationMemoryUpdateWithWhereUniqueWithoutVolunteerInput = {
    where: ConversationMemoryWhereUniqueInput
    data: XOR<ConversationMemoryUpdateWithoutVolunteerInput, ConversationMemoryUncheckedUpdateWithoutVolunteerInput>
  }

  export type ConversationMemoryUpdateManyWithWhereWithoutVolunteerInput = {
    where: ConversationMemoryScalarWhereInput
    data: XOR<ConversationMemoryUpdateManyMutationInput, ConversationMemoryUncheckedUpdateManyWithoutVolunteerInput>
  }

  export type ConversationMemoryScalarWhereInput = {
    AND?: ConversationMemoryScalarWhereInput | ConversationMemoryScalarWhereInput[]
    OR?: ConversationMemoryScalarWhereInput[]
    NOT?: ConversationMemoryScalarWhereInput | ConversationMemoryScalarWhereInput[]
    id?: StringFilter<"ConversationMemory"> | string
    childId?: StringFilter<"ConversationMemory"> | string
    volunteerId?: StringFilter<"ConversationMemory"> | string
    sessionId?: StringNullableFilter<"ConversationMemory"> | string | null
    memoryType?: EnumMemoryTypeFilter<"ConversationMemory"> | $Enums.MemoryType
    content?: StringFilter<"ConversationMemory"> | string
    importance?: IntFilter<"ConversationMemory"> | number
    associatedTags?: StringNullableListFilter<"ConversationMemory">
    expiresAt?: DateTimeNullableFilter<"ConversationMemory"> | Date | string | null
    createdAt?: DateTimeFilter<"ConversationMemory"> | Date | string
    updatedAt?: DateTimeFilter<"ConversationMemory"> | Date | string
  }

  export type UserUpsertWithoutApprovedUsersInput = {
    update: XOR<UserUpdateWithoutApprovedUsersInput, UserUncheckedUpdateWithoutApprovedUsersInput>
    create: XOR<UserCreateWithoutApprovedUsersInput, UserUncheckedCreateWithoutApprovedUsersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApprovedUsersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApprovedUsersInput, UserUncheckedUpdateWithoutApprovedUsersInput>
  }

  export type UserUpdateWithoutApprovedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUpdateManyWithoutVolunteerNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    culturalStories?: CulturalStoryUpdateManyWithoutCreatedByNestedInput
    knowledgeBase?: KnowledgeBaseUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUpdateManyWithoutVolunteerNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutVolunteerNestedInput
    approver?: UserUpdateOneWithoutApprovedUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutApprovedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUncheckedUpdateManyWithoutVolunteerNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    culturalStories?: CulturalStoryUncheckedUpdateManyWithoutCreatedByNestedInput
    knowledgeBase?: KnowledgeBaseUncheckedUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutVolunteerNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutVolunteerNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutApproverInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutApproverInput, UserUncheckedUpdateWithoutApproverInput>
    create: XOR<UserCreateWithoutApproverInput, UserUncheckedCreateWithoutApproverInput>
  }

  export type UserUpdateWithWhereUniqueWithoutApproverInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutApproverInput, UserUncheckedUpdateWithoutApproverInput>
  }

  export type UserUpdateManyWithWhereWithoutApproverInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutApproverInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    state?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    specialization?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    approvalStatus?: EnumApprovalStatusFilter<"User"> | $Enums.ApprovalStatus
    approvedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    approvedBy?: StringNullableFilter<"User"> | string | null
    experience?: StringNullableFilter<"User"> | string | null
    motivation?: StringNullableFilter<"User"> | string | null
    rejectionReason?: StringNullableFilter<"User"> | string | null
  }

  export type AssignmentCreateWithoutChildInput = {
    id?: string
    assignedAt?: Date | string
    isActive?: boolean
    notes?: string | null
    volunteer: UserCreateNestedOneWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateWithoutChildInput = {
    id?: string
    volunteerId: string
    assignedAt?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type AssignmentCreateOrConnectWithoutChildInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutChildInput, AssignmentUncheckedCreateWithoutChildInput>
  }

  export type AssignmentCreateManyChildInputEnvelope = {
    data: AssignmentCreateManyChildInput | AssignmentCreateManyChildInput[]
    skipDuplicates?: boolean
  }

  export type ConcernCreateWithoutChildInput = {
    id?: string
    title: string
    description: string
    category: $Enums.ConcernCategory
    severity?: $Enums.Severity
    status?: $Enums.ConcernStatus
    identifiedAt?: Date | string
    resolvedAt?: Date | string | null
    resolution?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConcernUncheckedCreateWithoutChildInput = {
    id?: string
    title: string
    description: string
    category: $Enums.ConcernCategory
    severity?: $Enums.Severity
    status?: $Enums.ConcernStatus
    identifiedAt?: Date | string
    resolvedAt?: Date | string | null
    resolution?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConcernCreateOrConnectWithoutChildInput = {
    where: ConcernWhereUniqueInput
    create: XOR<ConcernCreateWithoutChildInput, ConcernUncheckedCreateWithoutChildInput>
  }

  export type ConcernCreateManyChildInputEnvelope = {
    data: ConcernCreateManyChildInput | ConcernCreateManyChildInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutChildInput = {
    id?: string
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    status?: $Enums.SessionStatus
    sessionType?: $Enums.SessionType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageCreateNestedManyWithoutSessionInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutSessionInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutSessionInput
    summary?: SessionSummaryCreateNestedOneWithoutSessionInput
    volunteer: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateWithoutChildInput = {
    id?: string
    volunteerId: string
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    status?: $Enums.SessionStatus
    sessionType?: $Enums.SessionType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSessionInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutSessionInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutSessionInput
    summary?: SessionSummaryUncheckedCreateNestedOneWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutChildInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutChildInput, SessionUncheckedCreateWithoutChildInput>
  }

  export type SessionCreateManyChildInputEnvelope = {
    data: SessionCreateManyChildInput | SessionCreateManyChildInput[]
    skipDuplicates?: boolean
  }

  export type AiChatConversationCreateWithoutChildInput = {
    id?: string
    conversationName?: string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    session: SessionCreateNestedOneWithoutAiChatConversationsInput
    volunteer: UserCreateNestedOneWithoutAiChatConversationsInput
    messages?: AiChatMessageCreateNestedManyWithoutConversationInput
  }

  export type AiChatConversationUncheckedCreateWithoutChildInput = {
    id?: string
    sessionId: string
    volunteerId: string
    conversationName?: string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: AiChatMessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type AiChatConversationCreateOrConnectWithoutChildInput = {
    where: AiChatConversationWhereUniqueInput
    create: XOR<AiChatConversationCreateWithoutChildInput, AiChatConversationUncheckedCreateWithoutChildInput>
  }

  export type AiChatConversationCreateManyChildInputEnvelope = {
    data: AiChatConversationCreateManyChildInput | AiChatConversationCreateManyChildInput[]
    skipDuplicates?: boolean
  }

  export type ConversationMemoryCreateWithoutChildInput = {
    id?: string
    memoryType: $Enums.MemoryType
    content: string
    importance?: number
    associatedTags?: ConversationMemoryCreateassociatedTagsInput | string[]
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    volunteer: UserCreateNestedOneWithoutConversationMemoriesInput
    session?: SessionCreateNestedOneWithoutConversationMemoriesInput
  }

  export type ConversationMemoryUncheckedCreateWithoutChildInput = {
    id?: string
    volunteerId: string
    sessionId?: string | null
    memoryType: $Enums.MemoryType
    content: string
    importance?: number
    associatedTags?: ConversationMemoryCreateassociatedTagsInput | string[]
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationMemoryCreateOrConnectWithoutChildInput = {
    where: ConversationMemoryWhereUniqueInput
    create: XOR<ConversationMemoryCreateWithoutChildInput, ConversationMemoryUncheckedCreateWithoutChildInput>
  }

  export type ConversationMemoryCreateManyChildInputEnvelope = {
    data: ConversationMemoryCreateManyChildInput | ConversationMemoryCreateManyChildInput[]
    skipDuplicates?: boolean
  }

  export type TagCreateWithoutChildrenInput = {
    id?: string
    name: string
    category: $Enums.TagCategory
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    knowledgeBase?: KnowledgeBaseCreateNestedManyWithoutTagsInput
  }

  export type TagUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    category: $Enums.TagCategory
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    knowledgeBase?: KnowledgeBaseUncheckedCreateNestedManyWithoutTagsInput
  }

  export type TagCreateOrConnectWithoutChildrenInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutChildrenInput, TagUncheckedCreateWithoutChildrenInput>
  }

  export type AssignmentUpsertWithWhereUniqueWithoutChildInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutChildInput, AssignmentUncheckedUpdateWithoutChildInput>
    create: XOR<AssignmentCreateWithoutChildInput, AssignmentUncheckedCreateWithoutChildInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutChildInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutChildInput, AssignmentUncheckedUpdateWithoutChildInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutChildInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutChildInput>
  }

  export type ConcernUpsertWithWhereUniqueWithoutChildInput = {
    where: ConcernWhereUniqueInput
    update: XOR<ConcernUpdateWithoutChildInput, ConcernUncheckedUpdateWithoutChildInput>
    create: XOR<ConcernCreateWithoutChildInput, ConcernUncheckedCreateWithoutChildInput>
  }

  export type ConcernUpdateWithWhereUniqueWithoutChildInput = {
    where: ConcernWhereUniqueInput
    data: XOR<ConcernUpdateWithoutChildInput, ConcernUncheckedUpdateWithoutChildInput>
  }

  export type ConcernUpdateManyWithWhereWithoutChildInput = {
    where: ConcernScalarWhereInput
    data: XOR<ConcernUpdateManyMutationInput, ConcernUncheckedUpdateManyWithoutChildInput>
  }

  export type ConcernScalarWhereInput = {
    AND?: ConcernScalarWhereInput | ConcernScalarWhereInput[]
    OR?: ConcernScalarWhereInput[]
    NOT?: ConcernScalarWhereInput | ConcernScalarWhereInput[]
    id?: StringFilter<"Concern"> | string
    childId?: StringFilter<"Concern"> | string
    title?: StringFilter<"Concern"> | string
    description?: StringFilter<"Concern"> | string
    category?: EnumConcernCategoryFilter<"Concern"> | $Enums.ConcernCategory
    severity?: EnumSeverityFilter<"Concern"> | $Enums.Severity
    status?: EnumConcernStatusFilter<"Concern"> | $Enums.ConcernStatus
    identifiedAt?: DateTimeFilter<"Concern"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Concern"> | Date | string | null
    resolution?: StringNullableFilter<"Concern"> | string | null
    createdAt?: DateTimeFilter<"Concern"> | Date | string
    updatedAt?: DateTimeFilter<"Concern"> | Date | string
  }

  export type SessionUpsertWithWhereUniqueWithoutChildInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutChildInput, SessionUncheckedUpdateWithoutChildInput>
    create: XOR<SessionCreateWithoutChildInput, SessionUncheckedCreateWithoutChildInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutChildInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutChildInput, SessionUncheckedUpdateWithoutChildInput>
  }

  export type SessionUpdateManyWithWhereWithoutChildInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutChildInput>
  }

  export type AiChatConversationUpsertWithWhereUniqueWithoutChildInput = {
    where: AiChatConversationWhereUniqueInput
    update: XOR<AiChatConversationUpdateWithoutChildInput, AiChatConversationUncheckedUpdateWithoutChildInput>
    create: XOR<AiChatConversationCreateWithoutChildInput, AiChatConversationUncheckedCreateWithoutChildInput>
  }

  export type AiChatConversationUpdateWithWhereUniqueWithoutChildInput = {
    where: AiChatConversationWhereUniqueInput
    data: XOR<AiChatConversationUpdateWithoutChildInput, AiChatConversationUncheckedUpdateWithoutChildInput>
  }

  export type AiChatConversationUpdateManyWithWhereWithoutChildInput = {
    where: AiChatConversationScalarWhereInput
    data: XOR<AiChatConversationUpdateManyMutationInput, AiChatConversationUncheckedUpdateManyWithoutChildInput>
  }

  export type ConversationMemoryUpsertWithWhereUniqueWithoutChildInput = {
    where: ConversationMemoryWhereUniqueInput
    update: XOR<ConversationMemoryUpdateWithoutChildInput, ConversationMemoryUncheckedUpdateWithoutChildInput>
    create: XOR<ConversationMemoryCreateWithoutChildInput, ConversationMemoryUncheckedCreateWithoutChildInput>
  }

  export type ConversationMemoryUpdateWithWhereUniqueWithoutChildInput = {
    where: ConversationMemoryWhereUniqueInput
    data: XOR<ConversationMemoryUpdateWithoutChildInput, ConversationMemoryUncheckedUpdateWithoutChildInput>
  }

  export type ConversationMemoryUpdateManyWithWhereWithoutChildInput = {
    where: ConversationMemoryScalarWhereInput
    data: XOR<ConversationMemoryUpdateManyMutationInput, ConversationMemoryUncheckedUpdateManyWithoutChildInput>
  }

  export type TagUpsertWithWhereUniqueWithoutChildrenInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutChildrenInput, TagUncheckedUpdateWithoutChildrenInput>
    create: XOR<TagCreateWithoutChildrenInput, TagUncheckedCreateWithoutChildrenInput>
  }

  export type TagUpdateWithWhereUniqueWithoutChildrenInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutChildrenInput, TagUncheckedUpdateWithoutChildrenInput>
  }

  export type TagUpdateManyWithWhereWithoutChildrenInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutChildrenInput>
  }

  export type TagScalarWhereInput = {
    AND?: TagScalarWhereInput | TagScalarWhereInput[]
    OR?: TagScalarWhereInput[]
    NOT?: TagScalarWhereInput | TagScalarWhereInput[]
    id?: StringFilter<"Tag"> | string
    name?: StringFilter<"Tag"> | string
    category?: EnumTagCategoryFilter<"Tag"> | $Enums.TagCategory
    description?: StringNullableFilter<"Tag"> | string | null
    color?: StringNullableFilter<"Tag"> | string | null
    createdAt?: DateTimeFilter<"Tag"> | Date | string
  }

  export type ChildCreateWithoutAssignmentsInput = {
    id?: string
    name: string
    age: number
    gender: $Enums.Gender
    state: string
    district?: string | null
    background?: string | null
    schoolLevel?: string | null
    interests?: ChildCreateinterestsInput | string[]
    challenges?: ChildCreatechallengesInput | string[]
    language?: string
    profileImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    concerns?: ConcernCreateNestedManyWithoutChildInput
    sessions?: SessionCreateNestedManyWithoutChildInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutChildInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutChildInput
    tags?: TagCreateNestedManyWithoutChildrenInput
  }

  export type ChildUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    name: string
    age: number
    gender: $Enums.Gender
    state: string
    district?: string | null
    background?: string | null
    schoolLevel?: string | null
    interests?: ChildCreateinterestsInput | string[]
    challenges?: ChildCreatechallengesInput | string[]
    language?: string
    profileImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    concerns?: ConcernUncheckedCreateNestedManyWithoutChildInput
    sessions?: SessionUncheckedCreateNestedManyWithoutChildInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutChildInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutChildInput
    tags?: TagUncheckedCreateNestedManyWithoutChildrenInput
  }

  export type ChildCreateOrConnectWithoutAssignmentsInput = {
    where: ChildWhereUniqueInput
    create: XOR<ChildCreateWithoutAssignmentsInput, ChildUncheckedCreateWithoutAssignmentsInput>
  }

  export type UserCreateWithoutAssignmentsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    culturalStories?: CulturalStoryCreateNestedManyWithoutCreatedByInput
    knowledgeBase?: KnowledgeBaseCreateNestedManyWithoutCreatedByInput
    sessions?: SessionCreateNestedManyWithoutVolunteerInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutVolunteerInput
    approver?: UserCreateNestedOneWithoutApprovedUsersInput
    approvedUsers?: UserCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    approvedBy?: string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    culturalStories?: CulturalStoryUncheckedCreateNestedManyWithoutCreatedByInput
    knowledgeBase?: KnowledgeBaseUncheckedCreateNestedManyWithoutCreatedByInput
    sessions?: SessionUncheckedCreateNestedManyWithoutVolunteerInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutVolunteerInput
    approvedUsers?: UserUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignmentsInput, UserUncheckedCreateWithoutAssignmentsInput>
  }

  export type ChildUpsertWithoutAssignmentsInput = {
    update: XOR<ChildUpdateWithoutAssignmentsInput, ChildUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<ChildCreateWithoutAssignmentsInput, ChildUncheckedCreateWithoutAssignmentsInput>
    where?: ChildWhereInput
  }

  export type ChildUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: ChildWhereInput
    data: XOR<ChildUpdateWithoutAssignmentsInput, ChildUncheckedUpdateWithoutAssignmentsInput>
  }

  export type ChildUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    state?: StringFieldUpdateOperationsInput | string
    district?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    schoolLevel?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    challenges?: ChildUpdatechallengesInput | string[]
    language?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    concerns?: ConcernUpdateManyWithoutChildNestedInput
    sessions?: SessionUpdateManyWithoutChildNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutChildNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutChildNestedInput
    tags?: TagUpdateManyWithoutChildrenNestedInput
  }

  export type ChildUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    state?: StringFieldUpdateOperationsInput | string
    district?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    schoolLevel?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    challenges?: ChildUpdatechallengesInput | string[]
    language?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    concerns?: ConcernUncheckedUpdateManyWithoutChildNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutChildNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutChildNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutChildNestedInput
    tags?: TagUncheckedUpdateManyWithoutChildrenNestedInput
  }

  export type UserUpsertWithoutAssignmentsInput = {
    update: XOR<UserUpdateWithoutAssignmentsInput, UserUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<UserCreateWithoutAssignmentsInput, UserUncheckedCreateWithoutAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignmentsInput, UserUncheckedUpdateWithoutAssignmentsInput>
  }

  export type UserUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    culturalStories?: CulturalStoryUpdateManyWithoutCreatedByNestedInput
    knowledgeBase?: KnowledgeBaseUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUpdateManyWithoutVolunteerNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutVolunteerNestedInput
    approver?: UserUpdateOneWithoutApprovedUsersNestedInput
    approvedUsers?: UserUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    culturalStories?: CulturalStoryUncheckedUpdateManyWithoutCreatedByNestedInput
    knowledgeBase?: KnowledgeBaseUncheckedUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutVolunteerNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutVolunteerNestedInput
    approvedUsers?: UserUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type ChatMessageCreateWithoutSessionInput = {
    id?: string
    message: string
    response?: string | null
    context?: string | null
    isSystemMsg?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutChatMessagesInput
  }

  export type ChatMessageUncheckedCreateWithoutSessionInput = {
    id?: string
    userId: string
    message: string
    response?: string | null
    context?: string | null
    isSystemMsg?: boolean
    createdAt?: Date | string
  }

  export type ChatMessageCreateOrConnectWithoutSessionInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput>
  }

  export type ChatMessageCreateManySessionInputEnvelope = {
    data: ChatMessageCreateManySessionInput | ChatMessageCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type AiChatConversationCreateWithoutSessionInput = {
    id?: string
    conversationName?: string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    child: ChildCreateNestedOneWithoutAiChatConversationsInput
    volunteer: UserCreateNestedOneWithoutAiChatConversationsInput
    messages?: AiChatMessageCreateNestedManyWithoutConversationInput
  }

  export type AiChatConversationUncheckedCreateWithoutSessionInput = {
    id?: string
    childId: string
    volunteerId: string
    conversationName?: string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: AiChatMessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type AiChatConversationCreateOrConnectWithoutSessionInput = {
    where: AiChatConversationWhereUniqueInput
    create: XOR<AiChatConversationCreateWithoutSessionInput, AiChatConversationUncheckedCreateWithoutSessionInput>
  }

  export type AiChatConversationCreateManySessionInputEnvelope = {
    data: AiChatConversationCreateManySessionInput | AiChatConversationCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type ConversationMemoryCreateWithoutSessionInput = {
    id?: string
    memoryType: $Enums.MemoryType
    content: string
    importance?: number
    associatedTags?: ConversationMemoryCreateassociatedTagsInput | string[]
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    child: ChildCreateNestedOneWithoutConversationMemoriesInput
    volunteer: UserCreateNestedOneWithoutConversationMemoriesInput
  }

  export type ConversationMemoryUncheckedCreateWithoutSessionInput = {
    id?: string
    childId: string
    volunteerId: string
    memoryType: $Enums.MemoryType
    content: string
    importance?: number
    associatedTags?: ConversationMemoryCreateassociatedTagsInput | string[]
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationMemoryCreateOrConnectWithoutSessionInput = {
    where: ConversationMemoryWhereUniqueInput
    create: XOR<ConversationMemoryCreateWithoutSessionInput, ConversationMemoryUncheckedCreateWithoutSessionInput>
  }

  export type ConversationMemoryCreateManySessionInputEnvelope = {
    data: ConversationMemoryCreateManySessionInput | ConversationMemoryCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type SessionSummaryCreateWithoutSessionInput = {
    id?: string
    summary: string
    sessionDuration?: string | null
    sessionType?: string | null
    initialMood?: string | null
    finalMood?: string | null
    moodChanges?: string | null
    concernsDiscussed?: SessionSummaryCreateconcernsDiscussedInput | string[]
    topicsDiscussed?: SessionSummaryCreatetopicsDiscussedInput | string[]
    culturalStoriesUsed?: SessionSummaryCreateculturalStoriesUsedInput | string[]
    techniquesUsed?: SessionSummaryCreatetechniquesUsedInput | string[]
    techniqueEffectiveness?: NullableJsonNullValueInput | InputJsonValue
    storyResponse?: string | null
    breakthroughs?: string | null
    keyInsights?: string | null
    challengesFaced?: string | null
    challengeHandling?: string | null
    engagementLevel?: string | null
    participationNotes?: string | null
    progressMade?: string | null
    nextSteps?: SessionSummaryCreatenextStepsInput | string[]
    actionItems?: SessionSummaryCreateactionItemsInput | string[]
    recommendations?: string | null
    sessionEffectiveness?: string | null
    volunteerConfidence?: string | null
    nextSessionFocus?: string | null
    nextSessionTiming?: string | null
    additionalNotes?: string | null
    resolutionStatus?: $Enums.ResolutionStatus
    followUpNeeded?: boolean
    followUpDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionSummaryUncheckedCreateWithoutSessionInput = {
    id?: string
    summary: string
    sessionDuration?: string | null
    sessionType?: string | null
    initialMood?: string | null
    finalMood?: string | null
    moodChanges?: string | null
    concernsDiscussed?: SessionSummaryCreateconcernsDiscussedInput | string[]
    topicsDiscussed?: SessionSummaryCreatetopicsDiscussedInput | string[]
    culturalStoriesUsed?: SessionSummaryCreateculturalStoriesUsedInput | string[]
    techniquesUsed?: SessionSummaryCreatetechniquesUsedInput | string[]
    techniqueEffectiveness?: NullableJsonNullValueInput | InputJsonValue
    storyResponse?: string | null
    breakthroughs?: string | null
    keyInsights?: string | null
    challengesFaced?: string | null
    challengeHandling?: string | null
    engagementLevel?: string | null
    participationNotes?: string | null
    progressMade?: string | null
    nextSteps?: SessionSummaryCreatenextStepsInput | string[]
    actionItems?: SessionSummaryCreateactionItemsInput | string[]
    recommendations?: string | null
    sessionEffectiveness?: string | null
    volunteerConfidence?: string | null
    nextSessionFocus?: string | null
    nextSessionTiming?: string | null
    additionalNotes?: string | null
    resolutionStatus?: $Enums.ResolutionStatus
    followUpNeeded?: boolean
    followUpDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionSummaryCreateOrConnectWithoutSessionInput = {
    where: SessionSummaryWhereUniqueInput
    create: XOR<SessionSummaryCreateWithoutSessionInput, SessionSummaryUncheckedCreateWithoutSessionInput>
  }

  export type ChildCreateWithoutSessionsInput = {
    id?: string
    name: string
    age: number
    gender: $Enums.Gender
    state: string
    district?: string | null
    background?: string | null
    schoolLevel?: string | null
    interests?: ChildCreateinterestsInput | string[]
    challenges?: ChildCreatechallengesInput | string[]
    language?: string
    profileImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: AssignmentCreateNestedManyWithoutChildInput
    concerns?: ConcernCreateNestedManyWithoutChildInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutChildInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutChildInput
    tags?: TagCreateNestedManyWithoutChildrenInput
  }

  export type ChildUncheckedCreateWithoutSessionsInput = {
    id?: string
    name: string
    age: number
    gender: $Enums.Gender
    state: string
    district?: string | null
    background?: string | null
    schoolLevel?: string | null
    interests?: ChildCreateinterestsInput | string[]
    challenges?: ChildCreatechallengesInput | string[]
    language?: string
    profileImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutChildInput
    concerns?: ConcernUncheckedCreateNestedManyWithoutChildInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutChildInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutChildInput
    tags?: TagUncheckedCreateNestedManyWithoutChildrenInput
  }

  export type ChildCreateOrConnectWithoutSessionsInput = {
    where: ChildWhereUniqueInput
    create: XOR<ChildCreateWithoutSessionsInput, ChildUncheckedCreateWithoutSessionsInput>
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentCreateNestedManyWithoutVolunteerInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    culturalStories?: CulturalStoryCreateNestedManyWithoutCreatedByInput
    knowledgeBase?: KnowledgeBaseCreateNestedManyWithoutCreatedByInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutVolunteerInput
    approver?: UserCreateNestedOneWithoutApprovedUsersInput
    approvedUsers?: UserCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    approvedBy?: string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentUncheckedCreateNestedManyWithoutVolunteerInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    culturalStories?: CulturalStoryUncheckedCreateNestedManyWithoutCreatedByInput
    knowledgeBase?: KnowledgeBaseUncheckedCreateNestedManyWithoutCreatedByInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutVolunteerInput
    approvedUsers?: UserUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutSessionInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutSessionInput, ChatMessageUncheckedUpdateWithoutSessionInput>
    create: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutSessionInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutSessionInput, ChatMessageUncheckedUpdateWithoutSessionInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutSessionInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutSessionInput>
  }

  export type AiChatConversationUpsertWithWhereUniqueWithoutSessionInput = {
    where: AiChatConversationWhereUniqueInput
    update: XOR<AiChatConversationUpdateWithoutSessionInput, AiChatConversationUncheckedUpdateWithoutSessionInput>
    create: XOR<AiChatConversationCreateWithoutSessionInput, AiChatConversationUncheckedCreateWithoutSessionInput>
  }

  export type AiChatConversationUpdateWithWhereUniqueWithoutSessionInput = {
    where: AiChatConversationWhereUniqueInput
    data: XOR<AiChatConversationUpdateWithoutSessionInput, AiChatConversationUncheckedUpdateWithoutSessionInput>
  }

  export type AiChatConversationUpdateManyWithWhereWithoutSessionInput = {
    where: AiChatConversationScalarWhereInput
    data: XOR<AiChatConversationUpdateManyMutationInput, AiChatConversationUncheckedUpdateManyWithoutSessionInput>
  }

  export type ConversationMemoryUpsertWithWhereUniqueWithoutSessionInput = {
    where: ConversationMemoryWhereUniqueInput
    update: XOR<ConversationMemoryUpdateWithoutSessionInput, ConversationMemoryUncheckedUpdateWithoutSessionInput>
    create: XOR<ConversationMemoryCreateWithoutSessionInput, ConversationMemoryUncheckedCreateWithoutSessionInput>
  }

  export type ConversationMemoryUpdateWithWhereUniqueWithoutSessionInput = {
    where: ConversationMemoryWhereUniqueInput
    data: XOR<ConversationMemoryUpdateWithoutSessionInput, ConversationMemoryUncheckedUpdateWithoutSessionInput>
  }

  export type ConversationMemoryUpdateManyWithWhereWithoutSessionInput = {
    where: ConversationMemoryScalarWhereInput
    data: XOR<ConversationMemoryUpdateManyMutationInput, ConversationMemoryUncheckedUpdateManyWithoutSessionInput>
  }

  export type SessionSummaryUpsertWithoutSessionInput = {
    update: XOR<SessionSummaryUpdateWithoutSessionInput, SessionSummaryUncheckedUpdateWithoutSessionInput>
    create: XOR<SessionSummaryCreateWithoutSessionInput, SessionSummaryUncheckedCreateWithoutSessionInput>
    where?: SessionSummaryWhereInput
  }

  export type SessionSummaryUpdateToOneWithWhereWithoutSessionInput = {
    where?: SessionSummaryWhereInput
    data: XOR<SessionSummaryUpdateWithoutSessionInput, SessionSummaryUncheckedUpdateWithoutSessionInput>
  }

  export type SessionSummaryUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    sessionDuration?: NullableStringFieldUpdateOperationsInput | string | null
    sessionType?: NullableStringFieldUpdateOperationsInput | string | null
    initialMood?: NullableStringFieldUpdateOperationsInput | string | null
    finalMood?: NullableStringFieldUpdateOperationsInput | string | null
    moodChanges?: NullableStringFieldUpdateOperationsInput | string | null
    concernsDiscussed?: SessionSummaryUpdateconcernsDiscussedInput | string[]
    topicsDiscussed?: SessionSummaryUpdatetopicsDiscussedInput | string[]
    culturalStoriesUsed?: SessionSummaryUpdateculturalStoriesUsedInput | string[]
    techniquesUsed?: SessionSummaryUpdatetechniquesUsedInput | string[]
    techniqueEffectiveness?: NullableJsonNullValueInput | InputJsonValue
    storyResponse?: NullableStringFieldUpdateOperationsInput | string | null
    breakthroughs?: NullableStringFieldUpdateOperationsInput | string | null
    keyInsights?: NullableStringFieldUpdateOperationsInput | string | null
    challengesFaced?: NullableStringFieldUpdateOperationsInput | string | null
    challengeHandling?: NullableStringFieldUpdateOperationsInput | string | null
    engagementLevel?: NullableStringFieldUpdateOperationsInput | string | null
    participationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    progressMade?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: SessionSummaryUpdatenextStepsInput | string[]
    actionItems?: SessionSummaryUpdateactionItemsInput | string[]
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    sessionEffectiveness?: NullableStringFieldUpdateOperationsInput | string | null
    volunteerConfidence?: NullableStringFieldUpdateOperationsInput | string | null
    nextSessionFocus?: NullableStringFieldUpdateOperationsInput | string | null
    nextSessionTiming?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionStatus?: EnumResolutionStatusFieldUpdateOperationsInput | $Enums.ResolutionStatus
    followUpNeeded?: BoolFieldUpdateOperationsInput | boolean
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionSummaryUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    sessionDuration?: NullableStringFieldUpdateOperationsInput | string | null
    sessionType?: NullableStringFieldUpdateOperationsInput | string | null
    initialMood?: NullableStringFieldUpdateOperationsInput | string | null
    finalMood?: NullableStringFieldUpdateOperationsInput | string | null
    moodChanges?: NullableStringFieldUpdateOperationsInput | string | null
    concernsDiscussed?: SessionSummaryUpdateconcernsDiscussedInput | string[]
    topicsDiscussed?: SessionSummaryUpdatetopicsDiscussedInput | string[]
    culturalStoriesUsed?: SessionSummaryUpdateculturalStoriesUsedInput | string[]
    techniquesUsed?: SessionSummaryUpdatetechniquesUsedInput | string[]
    techniqueEffectiveness?: NullableJsonNullValueInput | InputJsonValue
    storyResponse?: NullableStringFieldUpdateOperationsInput | string | null
    breakthroughs?: NullableStringFieldUpdateOperationsInput | string | null
    keyInsights?: NullableStringFieldUpdateOperationsInput | string | null
    challengesFaced?: NullableStringFieldUpdateOperationsInput | string | null
    challengeHandling?: NullableStringFieldUpdateOperationsInput | string | null
    engagementLevel?: NullableStringFieldUpdateOperationsInput | string | null
    participationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    progressMade?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: SessionSummaryUpdatenextStepsInput | string[]
    actionItems?: SessionSummaryUpdateactionItemsInput | string[]
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    sessionEffectiveness?: NullableStringFieldUpdateOperationsInput | string | null
    volunteerConfidence?: NullableStringFieldUpdateOperationsInput | string | null
    nextSessionFocus?: NullableStringFieldUpdateOperationsInput | string | null
    nextSessionTiming?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionStatus?: EnumResolutionStatusFieldUpdateOperationsInput | $Enums.ResolutionStatus
    followUpNeeded?: BoolFieldUpdateOperationsInput | boolean
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChildUpsertWithoutSessionsInput = {
    update: XOR<ChildUpdateWithoutSessionsInput, ChildUncheckedUpdateWithoutSessionsInput>
    create: XOR<ChildCreateWithoutSessionsInput, ChildUncheckedCreateWithoutSessionsInput>
    where?: ChildWhereInput
  }

  export type ChildUpdateToOneWithWhereWithoutSessionsInput = {
    where?: ChildWhereInput
    data: XOR<ChildUpdateWithoutSessionsInput, ChildUncheckedUpdateWithoutSessionsInput>
  }

  export type ChildUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    state?: StringFieldUpdateOperationsInput | string
    district?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    schoolLevel?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    challenges?: ChildUpdatechallengesInput | string[]
    language?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: AssignmentUpdateManyWithoutChildNestedInput
    concerns?: ConcernUpdateManyWithoutChildNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutChildNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutChildNestedInput
    tags?: TagUpdateManyWithoutChildrenNestedInput
  }

  export type ChildUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    state?: StringFieldUpdateOperationsInput | string
    district?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    schoolLevel?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    challenges?: ChildUpdatechallengesInput | string[]
    language?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: AssignmentUncheckedUpdateManyWithoutChildNestedInput
    concerns?: ConcernUncheckedUpdateManyWithoutChildNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutChildNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutChildNestedInput
    tags?: TagUncheckedUpdateManyWithoutChildrenNestedInput
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUpdateManyWithoutVolunteerNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    culturalStories?: CulturalStoryUpdateManyWithoutCreatedByNestedInput
    knowledgeBase?: KnowledgeBaseUpdateManyWithoutCreatedByNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutVolunteerNestedInput
    approver?: UserUpdateOneWithoutApprovedUsersNestedInput
    approvedUsers?: UserUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUncheckedUpdateManyWithoutVolunteerNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    culturalStories?: CulturalStoryUncheckedUpdateManyWithoutCreatedByNestedInput
    knowledgeBase?: KnowledgeBaseUncheckedUpdateManyWithoutCreatedByNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutVolunteerNestedInput
    approvedUsers?: UserUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type SessionCreateWithoutSummaryInput = {
    id?: string
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    status?: $Enums.SessionStatus
    sessionType?: $Enums.SessionType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageCreateNestedManyWithoutSessionInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutSessionInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutSessionInput
    child: ChildCreateNestedOneWithoutSessionsInput
    volunteer: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateWithoutSummaryInput = {
    id?: string
    childId: string
    volunteerId: string
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    status?: $Enums.SessionStatus
    sessionType?: $Enums.SessionType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSessionInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutSessionInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutSummaryInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutSummaryInput, SessionUncheckedCreateWithoutSummaryInput>
  }

  export type SessionUpsertWithoutSummaryInput = {
    update: XOR<SessionUpdateWithoutSummaryInput, SessionUncheckedUpdateWithoutSummaryInput>
    create: XOR<SessionCreateWithoutSummaryInput, SessionUncheckedCreateWithoutSummaryInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutSummaryInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutSummaryInput, SessionUncheckedUpdateWithoutSummaryInput>
  }

  export type SessionUpdateWithoutSummaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUpdateManyWithoutSessionNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutSessionNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutSessionNestedInput
    child?: ChildUpdateOneRequiredWithoutSessionsNestedInput
    volunteer?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateWithoutSummaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSessionNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutSessionNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type DocumentChunkCreateWithoutKnowledgeBaseInput = {
    id?: string
    content: string
    chunkIndex: number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type DocumentChunkUncheckedCreateWithoutKnowledgeBaseInput = {
    id?: string
    content: string
    chunkIndex: number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type DocumentChunkCreateOrConnectWithoutKnowledgeBaseInput = {
    where: DocumentChunkWhereUniqueInput
    create: XOR<DocumentChunkCreateWithoutKnowledgeBaseInput, DocumentChunkUncheckedCreateWithoutKnowledgeBaseInput>
  }

  export type DocumentChunkCreateManyKnowledgeBaseInputEnvelope = {
    data: DocumentChunkCreateManyKnowledgeBaseInput | DocumentChunkCreateManyKnowledgeBaseInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutKnowledgeBaseInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentCreateNestedManyWithoutVolunteerInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    culturalStories?: CulturalStoryCreateNestedManyWithoutCreatedByInput
    sessions?: SessionCreateNestedManyWithoutVolunteerInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutVolunteerInput
    approver?: UserCreateNestedOneWithoutApprovedUsersInput
    approvedUsers?: UserCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutKnowledgeBaseInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    approvedBy?: string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentUncheckedCreateNestedManyWithoutVolunteerInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    culturalStories?: CulturalStoryUncheckedCreateNestedManyWithoutCreatedByInput
    sessions?: SessionUncheckedCreateNestedManyWithoutVolunteerInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutVolunteerInput
    approvedUsers?: UserUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutKnowledgeBaseInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutKnowledgeBaseInput, UserUncheckedCreateWithoutKnowledgeBaseInput>
  }

  export type TagCreateWithoutKnowledgeBaseInput = {
    id?: string
    name: string
    category: $Enums.TagCategory
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    children?: ChildCreateNestedManyWithoutTagsInput
  }

  export type TagUncheckedCreateWithoutKnowledgeBaseInput = {
    id?: string
    name: string
    category: $Enums.TagCategory
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    children?: ChildUncheckedCreateNestedManyWithoutTagsInput
  }

  export type TagCreateOrConnectWithoutKnowledgeBaseInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutKnowledgeBaseInput, TagUncheckedCreateWithoutKnowledgeBaseInput>
  }

  export type DocumentChunkUpsertWithWhereUniqueWithoutKnowledgeBaseInput = {
    where: DocumentChunkWhereUniqueInput
    update: XOR<DocumentChunkUpdateWithoutKnowledgeBaseInput, DocumentChunkUncheckedUpdateWithoutKnowledgeBaseInput>
    create: XOR<DocumentChunkCreateWithoutKnowledgeBaseInput, DocumentChunkUncheckedCreateWithoutKnowledgeBaseInput>
  }

  export type DocumentChunkUpdateWithWhereUniqueWithoutKnowledgeBaseInput = {
    where: DocumentChunkWhereUniqueInput
    data: XOR<DocumentChunkUpdateWithoutKnowledgeBaseInput, DocumentChunkUncheckedUpdateWithoutKnowledgeBaseInput>
  }

  export type DocumentChunkUpdateManyWithWhereWithoutKnowledgeBaseInput = {
    where: DocumentChunkScalarWhereInput
    data: XOR<DocumentChunkUpdateManyMutationInput, DocumentChunkUncheckedUpdateManyWithoutKnowledgeBaseInput>
  }

  export type DocumentChunkScalarWhereInput = {
    AND?: DocumentChunkScalarWhereInput | DocumentChunkScalarWhereInput[]
    OR?: DocumentChunkScalarWhereInput[]
    NOT?: DocumentChunkScalarWhereInput | DocumentChunkScalarWhereInput[]
    id?: StringFilter<"DocumentChunk"> | string
    knowledgeBaseId?: StringFilter<"DocumentChunk"> | string
    content?: StringFilter<"DocumentChunk"> | string
    chunkIndex?: IntFilter<"DocumentChunk"> | number
    embeddings?: JsonNullableFilter<"DocumentChunk">
    metadata?: JsonNullableFilter<"DocumentChunk">
    createdAt?: DateTimeFilter<"DocumentChunk"> | Date | string
  }

  export type UserUpsertWithoutKnowledgeBaseInput = {
    update: XOR<UserUpdateWithoutKnowledgeBaseInput, UserUncheckedUpdateWithoutKnowledgeBaseInput>
    create: XOR<UserCreateWithoutKnowledgeBaseInput, UserUncheckedCreateWithoutKnowledgeBaseInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutKnowledgeBaseInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutKnowledgeBaseInput, UserUncheckedUpdateWithoutKnowledgeBaseInput>
  }

  export type UserUpdateWithoutKnowledgeBaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUpdateManyWithoutVolunteerNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    culturalStories?: CulturalStoryUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUpdateManyWithoutVolunteerNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutVolunteerNestedInput
    approver?: UserUpdateOneWithoutApprovedUsersNestedInput
    approvedUsers?: UserUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutKnowledgeBaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUncheckedUpdateManyWithoutVolunteerNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    culturalStories?: CulturalStoryUncheckedUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutVolunteerNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutVolunteerNestedInput
    approvedUsers?: UserUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type TagUpsertWithWhereUniqueWithoutKnowledgeBaseInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutKnowledgeBaseInput, TagUncheckedUpdateWithoutKnowledgeBaseInput>
    create: XOR<TagCreateWithoutKnowledgeBaseInput, TagUncheckedCreateWithoutKnowledgeBaseInput>
  }

  export type TagUpdateWithWhereUniqueWithoutKnowledgeBaseInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutKnowledgeBaseInput, TagUncheckedUpdateWithoutKnowledgeBaseInput>
  }

  export type TagUpdateManyWithWhereWithoutKnowledgeBaseInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutKnowledgeBaseInput>
  }

  export type KnowledgeBaseCreateWithoutChunksInput = {
    id?: string
    title: string
    content: string
    summary?: string | null
    category: $Enums.KnowledgeCategory
    subCategory?: string | null
    fileType?: string | null
    fileUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    downloadCount?: number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: number | null
    isProcessed?: boolean
    views?: number
    createdBy: UserCreateNestedOneWithoutKnowledgeBaseInput
    tags?: TagCreateNestedManyWithoutKnowledgeBaseInput
  }

  export type KnowledgeBaseUncheckedCreateWithoutChunksInput = {
    id?: string
    title: string
    content: string
    summary?: string | null
    category: $Enums.KnowledgeCategory
    subCategory?: string | null
    fileType?: string | null
    fileUrl?: string | null
    isActive?: boolean
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    downloadCount?: number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: number | null
    isProcessed?: boolean
    views?: number
    tags?: TagUncheckedCreateNestedManyWithoutKnowledgeBaseInput
  }

  export type KnowledgeBaseCreateOrConnectWithoutChunksInput = {
    where: KnowledgeBaseWhereUniqueInput
    create: XOR<KnowledgeBaseCreateWithoutChunksInput, KnowledgeBaseUncheckedCreateWithoutChunksInput>
  }

  export type KnowledgeBaseUpsertWithoutChunksInput = {
    update: XOR<KnowledgeBaseUpdateWithoutChunksInput, KnowledgeBaseUncheckedUpdateWithoutChunksInput>
    create: XOR<KnowledgeBaseCreateWithoutChunksInput, KnowledgeBaseUncheckedCreateWithoutChunksInput>
    where?: KnowledgeBaseWhereInput
  }

  export type KnowledgeBaseUpdateToOneWithWhereWithoutChunksInput = {
    where?: KnowledgeBaseWhereInput
    data: XOR<KnowledgeBaseUpdateWithoutChunksInput, KnowledgeBaseUncheckedUpdateWithoutChunksInput>
  }

  export type KnowledgeBaseUpdateWithoutChunksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumKnowledgeCategoryFieldUpdateOperationsInput | $Enums.KnowledgeCategory
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    downloadCount?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    createdBy?: UserUpdateOneRequiredWithoutKnowledgeBaseNestedInput
    tags?: TagUpdateManyWithoutKnowledgeBaseNestedInput
  }

  export type KnowledgeBaseUncheckedUpdateWithoutChunksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumKnowledgeCategoryFieldUpdateOperationsInput | $Enums.KnowledgeCategory
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    downloadCount?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    tags?: TagUncheckedUpdateManyWithoutKnowledgeBaseNestedInput
  }

  export type UserCreateWithoutCulturalStoriesInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentCreateNestedManyWithoutVolunteerInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    knowledgeBase?: KnowledgeBaseCreateNestedManyWithoutCreatedByInput
    sessions?: SessionCreateNestedManyWithoutVolunteerInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutVolunteerInput
    approver?: UserCreateNestedOneWithoutApprovedUsersInput
    approvedUsers?: UserCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutCulturalStoriesInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    approvedBy?: string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentUncheckedCreateNestedManyWithoutVolunteerInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    knowledgeBase?: KnowledgeBaseUncheckedCreateNestedManyWithoutCreatedByInput
    sessions?: SessionUncheckedCreateNestedManyWithoutVolunteerInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutVolunteerInput
    approvedUsers?: UserUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutCulturalStoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCulturalStoriesInput, UserUncheckedCreateWithoutCulturalStoriesInput>
  }

  export type UserUpsertWithoutCulturalStoriesInput = {
    update: XOR<UserUpdateWithoutCulturalStoriesInput, UserUncheckedUpdateWithoutCulturalStoriesInput>
    create: XOR<UserCreateWithoutCulturalStoriesInput, UserUncheckedCreateWithoutCulturalStoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCulturalStoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCulturalStoriesInput, UserUncheckedUpdateWithoutCulturalStoriesInput>
  }

  export type UserUpdateWithoutCulturalStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUpdateManyWithoutVolunteerNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    knowledgeBase?: KnowledgeBaseUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUpdateManyWithoutVolunteerNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutVolunteerNestedInput
    approver?: UserUpdateOneWithoutApprovedUsersNestedInput
    approvedUsers?: UserUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutCulturalStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUncheckedUpdateManyWithoutVolunteerNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    knowledgeBase?: KnowledgeBaseUncheckedUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutVolunteerNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutVolunteerNestedInput
    approvedUsers?: UserUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type ChildCreateWithoutConcernsInput = {
    id?: string
    name: string
    age: number
    gender: $Enums.Gender
    state: string
    district?: string | null
    background?: string | null
    schoolLevel?: string | null
    interests?: ChildCreateinterestsInput | string[]
    challenges?: ChildCreatechallengesInput | string[]
    language?: string
    profileImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: AssignmentCreateNestedManyWithoutChildInput
    sessions?: SessionCreateNestedManyWithoutChildInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutChildInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutChildInput
    tags?: TagCreateNestedManyWithoutChildrenInput
  }

  export type ChildUncheckedCreateWithoutConcernsInput = {
    id?: string
    name: string
    age: number
    gender: $Enums.Gender
    state: string
    district?: string | null
    background?: string | null
    schoolLevel?: string | null
    interests?: ChildCreateinterestsInput | string[]
    challenges?: ChildCreatechallengesInput | string[]
    language?: string
    profileImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutChildInput
    sessions?: SessionUncheckedCreateNestedManyWithoutChildInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutChildInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutChildInput
    tags?: TagUncheckedCreateNestedManyWithoutChildrenInput
  }

  export type ChildCreateOrConnectWithoutConcernsInput = {
    where: ChildWhereUniqueInput
    create: XOR<ChildCreateWithoutConcernsInput, ChildUncheckedCreateWithoutConcernsInput>
  }

  export type ChildUpsertWithoutConcernsInput = {
    update: XOR<ChildUpdateWithoutConcernsInput, ChildUncheckedUpdateWithoutConcernsInput>
    create: XOR<ChildCreateWithoutConcernsInput, ChildUncheckedCreateWithoutConcernsInput>
    where?: ChildWhereInput
  }

  export type ChildUpdateToOneWithWhereWithoutConcernsInput = {
    where?: ChildWhereInput
    data: XOR<ChildUpdateWithoutConcernsInput, ChildUncheckedUpdateWithoutConcernsInput>
  }

  export type ChildUpdateWithoutConcernsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    state?: StringFieldUpdateOperationsInput | string
    district?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    schoolLevel?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    challenges?: ChildUpdatechallengesInput | string[]
    language?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: AssignmentUpdateManyWithoutChildNestedInput
    sessions?: SessionUpdateManyWithoutChildNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutChildNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutChildNestedInput
    tags?: TagUpdateManyWithoutChildrenNestedInput
  }

  export type ChildUncheckedUpdateWithoutConcernsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    state?: StringFieldUpdateOperationsInput | string
    district?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    schoolLevel?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    challenges?: ChildUpdatechallengesInput | string[]
    language?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: AssignmentUncheckedUpdateManyWithoutChildNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutChildNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutChildNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutChildNestedInput
    tags?: TagUncheckedUpdateManyWithoutChildrenNestedInput
  }

  export type SessionCreateWithoutChatMessagesInput = {
    id?: string
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    status?: $Enums.SessionStatus
    sessionType?: $Enums.SessionType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutSessionInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutSessionInput
    summary?: SessionSummaryCreateNestedOneWithoutSessionInput
    child: ChildCreateNestedOneWithoutSessionsInput
    volunteer: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateWithoutChatMessagesInput = {
    id?: string
    childId: string
    volunteerId: string
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    status?: $Enums.SessionStatus
    sessionType?: $Enums.SessionType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutSessionInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutSessionInput
    summary?: SessionSummaryUncheckedCreateNestedOneWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutChatMessagesInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutChatMessagesInput, SessionUncheckedCreateWithoutChatMessagesInput>
  }

  export type UserCreateWithoutChatMessagesInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentCreateNestedManyWithoutVolunteerInput
    culturalStories?: CulturalStoryCreateNestedManyWithoutCreatedByInput
    knowledgeBase?: KnowledgeBaseCreateNestedManyWithoutCreatedByInput
    sessions?: SessionCreateNestedManyWithoutVolunteerInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutVolunteerInput
    approver?: UserCreateNestedOneWithoutApprovedUsersInput
    approvedUsers?: UserCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutChatMessagesInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    approvedBy?: string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentUncheckedCreateNestedManyWithoutVolunteerInput
    culturalStories?: CulturalStoryUncheckedCreateNestedManyWithoutCreatedByInput
    knowledgeBase?: KnowledgeBaseUncheckedCreateNestedManyWithoutCreatedByInput
    sessions?: SessionUncheckedCreateNestedManyWithoutVolunteerInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutVolunteerInput
    approvedUsers?: UserUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutChatMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
  }

  export type SessionUpsertWithoutChatMessagesInput = {
    update: XOR<SessionUpdateWithoutChatMessagesInput, SessionUncheckedUpdateWithoutChatMessagesInput>
    create: XOR<SessionCreateWithoutChatMessagesInput, SessionUncheckedCreateWithoutChatMessagesInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutChatMessagesInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutChatMessagesInput, SessionUncheckedUpdateWithoutChatMessagesInput>
  }

  export type SessionUpdateWithoutChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aiChatConversations?: AiChatConversationUpdateManyWithoutSessionNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutSessionNestedInput
    summary?: SessionSummaryUpdateOneWithoutSessionNestedInput
    child?: ChildUpdateOneRequiredWithoutSessionsNestedInput
    volunteer?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateWithoutChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutSessionNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutSessionNestedInput
    summary?: SessionSummaryUncheckedUpdateOneWithoutSessionNestedInput
  }

  export type UserUpsertWithoutChatMessagesInput = {
    update: XOR<UserUpdateWithoutChatMessagesInput, UserUncheckedUpdateWithoutChatMessagesInput>
    create: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChatMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChatMessagesInput, UserUncheckedUpdateWithoutChatMessagesInput>
  }

  export type UserUpdateWithoutChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUpdateManyWithoutVolunteerNestedInput
    culturalStories?: CulturalStoryUpdateManyWithoutCreatedByNestedInput
    knowledgeBase?: KnowledgeBaseUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUpdateManyWithoutVolunteerNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutVolunteerNestedInput
    approver?: UserUpdateOneWithoutApprovedUsersNestedInput
    approvedUsers?: UserUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUncheckedUpdateManyWithoutVolunteerNestedInput
    culturalStories?: CulturalStoryUncheckedUpdateManyWithoutCreatedByNestedInput
    knowledgeBase?: KnowledgeBaseUncheckedUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutVolunteerNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutVolunteerNestedInput
    approvedUsers?: UserUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type SessionCreateWithoutAiChatConversationsInput = {
    id?: string
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    status?: $Enums.SessionStatus
    sessionType?: $Enums.SessionType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageCreateNestedManyWithoutSessionInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutSessionInput
    summary?: SessionSummaryCreateNestedOneWithoutSessionInput
    child: ChildCreateNestedOneWithoutSessionsInput
    volunteer: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateWithoutAiChatConversationsInput = {
    id?: string
    childId: string
    volunteerId: string
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    status?: $Enums.SessionStatus
    sessionType?: $Enums.SessionType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSessionInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutSessionInput
    summary?: SessionSummaryUncheckedCreateNestedOneWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutAiChatConversationsInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutAiChatConversationsInput, SessionUncheckedCreateWithoutAiChatConversationsInput>
  }

  export type ChildCreateWithoutAiChatConversationsInput = {
    id?: string
    name: string
    age: number
    gender: $Enums.Gender
    state: string
    district?: string | null
    background?: string | null
    schoolLevel?: string | null
    interests?: ChildCreateinterestsInput | string[]
    challenges?: ChildCreatechallengesInput | string[]
    language?: string
    profileImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: AssignmentCreateNestedManyWithoutChildInput
    concerns?: ConcernCreateNestedManyWithoutChildInput
    sessions?: SessionCreateNestedManyWithoutChildInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutChildInput
    tags?: TagCreateNestedManyWithoutChildrenInput
  }

  export type ChildUncheckedCreateWithoutAiChatConversationsInput = {
    id?: string
    name: string
    age: number
    gender: $Enums.Gender
    state: string
    district?: string | null
    background?: string | null
    schoolLevel?: string | null
    interests?: ChildCreateinterestsInput | string[]
    challenges?: ChildCreatechallengesInput | string[]
    language?: string
    profileImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutChildInput
    concerns?: ConcernUncheckedCreateNestedManyWithoutChildInput
    sessions?: SessionUncheckedCreateNestedManyWithoutChildInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutChildInput
    tags?: TagUncheckedCreateNestedManyWithoutChildrenInput
  }

  export type ChildCreateOrConnectWithoutAiChatConversationsInput = {
    where: ChildWhereUniqueInput
    create: XOR<ChildCreateWithoutAiChatConversationsInput, ChildUncheckedCreateWithoutAiChatConversationsInput>
  }

  export type UserCreateWithoutAiChatConversationsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentCreateNestedManyWithoutVolunteerInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    culturalStories?: CulturalStoryCreateNestedManyWithoutCreatedByInput
    knowledgeBase?: KnowledgeBaseCreateNestedManyWithoutCreatedByInput
    sessions?: SessionCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutVolunteerInput
    approver?: UserCreateNestedOneWithoutApprovedUsersInput
    approvedUsers?: UserCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutAiChatConversationsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    approvedBy?: string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentUncheckedCreateNestedManyWithoutVolunteerInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    culturalStories?: CulturalStoryUncheckedCreateNestedManyWithoutCreatedByInput
    knowledgeBase?: KnowledgeBaseUncheckedCreateNestedManyWithoutCreatedByInput
    sessions?: SessionUncheckedCreateNestedManyWithoutVolunteerInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutVolunteerInput
    approvedUsers?: UserUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutAiChatConversationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAiChatConversationsInput, UserUncheckedCreateWithoutAiChatConversationsInput>
  }

  export type AiChatMessageCreateWithoutConversationInput = {
    id?: string
    role: $Enums.AiChatRole
    content: string
    ragContext?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AiChatMessageUncheckedCreateWithoutConversationInput = {
    id?: string
    role: $Enums.AiChatRole
    content: string
    ragContext?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AiChatMessageCreateOrConnectWithoutConversationInput = {
    where: AiChatMessageWhereUniqueInput
    create: XOR<AiChatMessageCreateWithoutConversationInput, AiChatMessageUncheckedCreateWithoutConversationInput>
  }

  export type AiChatMessageCreateManyConversationInputEnvelope = {
    data: AiChatMessageCreateManyConversationInput | AiChatMessageCreateManyConversationInput[]
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithoutAiChatConversationsInput = {
    update: XOR<SessionUpdateWithoutAiChatConversationsInput, SessionUncheckedUpdateWithoutAiChatConversationsInput>
    create: XOR<SessionCreateWithoutAiChatConversationsInput, SessionUncheckedCreateWithoutAiChatConversationsInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutAiChatConversationsInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutAiChatConversationsInput, SessionUncheckedUpdateWithoutAiChatConversationsInput>
  }

  export type SessionUpdateWithoutAiChatConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUpdateManyWithoutSessionNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutSessionNestedInput
    summary?: SessionSummaryUpdateOneWithoutSessionNestedInput
    child?: ChildUpdateOneRequiredWithoutSessionsNestedInput
    volunteer?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateWithoutAiChatConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSessionNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutSessionNestedInput
    summary?: SessionSummaryUncheckedUpdateOneWithoutSessionNestedInput
  }

  export type ChildUpsertWithoutAiChatConversationsInput = {
    update: XOR<ChildUpdateWithoutAiChatConversationsInput, ChildUncheckedUpdateWithoutAiChatConversationsInput>
    create: XOR<ChildCreateWithoutAiChatConversationsInput, ChildUncheckedCreateWithoutAiChatConversationsInput>
    where?: ChildWhereInput
  }

  export type ChildUpdateToOneWithWhereWithoutAiChatConversationsInput = {
    where?: ChildWhereInput
    data: XOR<ChildUpdateWithoutAiChatConversationsInput, ChildUncheckedUpdateWithoutAiChatConversationsInput>
  }

  export type ChildUpdateWithoutAiChatConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    state?: StringFieldUpdateOperationsInput | string
    district?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    schoolLevel?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    challenges?: ChildUpdatechallengesInput | string[]
    language?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: AssignmentUpdateManyWithoutChildNestedInput
    concerns?: ConcernUpdateManyWithoutChildNestedInput
    sessions?: SessionUpdateManyWithoutChildNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutChildNestedInput
    tags?: TagUpdateManyWithoutChildrenNestedInput
  }

  export type ChildUncheckedUpdateWithoutAiChatConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    state?: StringFieldUpdateOperationsInput | string
    district?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    schoolLevel?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    challenges?: ChildUpdatechallengesInput | string[]
    language?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: AssignmentUncheckedUpdateManyWithoutChildNestedInput
    concerns?: ConcernUncheckedUpdateManyWithoutChildNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutChildNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutChildNestedInput
    tags?: TagUncheckedUpdateManyWithoutChildrenNestedInput
  }

  export type UserUpsertWithoutAiChatConversationsInput = {
    update: XOR<UserUpdateWithoutAiChatConversationsInput, UserUncheckedUpdateWithoutAiChatConversationsInput>
    create: XOR<UserCreateWithoutAiChatConversationsInput, UserUncheckedCreateWithoutAiChatConversationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAiChatConversationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAiChatConversationsInput, UserUncheckedUpdateWithoutAiChatConversationsInput>
  }

  export type UserUpdateWithoutAiChatConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUpdateManyWithoutVolunteerNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    culturalStories?: CulturalStoryUpdateManyWithoutCreatedByNestedInput
    knowledgeBase?: KnowledgeBaseUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutVolunteerNestedInput
    approver?: UserUpdateOneWithoutApprovedUsersNestedInput
    approvedUsers?: UserUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutAiChatConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUncheckedUpdateManyWithoutVolunteerNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    culturalStories?: CulturalStoryUncheckedUpdateManyWithoutCreatedByNestedInput
    knowledgeBase?: KnowledgeBaseUncheckedUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutVolunteerNestedInput
    approvedUsers?: UserUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type AiChatMessageUpsertWithWhereUniqueWithoutConversationInput = {
    where: AiChatMessageWhereUniqueInput
    update: XOR<AiChatMessageUpdateWithoutConversationInput, AiChatMessageUncheckedUpdateWithoutConversationInput>
    create: XOR<AiChatMessageCreateWithoutConversationInput, AiChatMessageUncheckedCreateWithoutConversationInput>
  }

  export type AiChatMessageUpdateWithWhereUniqueWithoutConversationInput = {
    where: AiChatMessageWhereUniqueInput
    data: XOR<AiChatMessageUpdateWithoutConversationInput, AiChatMessageUncheckedUpdateWithoutConversationInput>
  }

  export type AiChatMessageUpdateManyWithWhereWithoutConversationInput = {
    where: AiChatMessageScalarWhereInput
    data: XOR<AiChatMessageUpdateManyMutationInput, AiChatMessageUncheckedUpdateManyWithoutConversationInput>
  }

  export type AiChatMessageScalarWhereInput = {
    AND?: AiChatMessageScalarWhereInput | AiChatMessageScalarWhereInput[]
    OR?: AiChatMessageScalarWhereInput[]
    NOT?: AiChatMessageScalarWhereInput | AiChatMessageScalarWhereInput[]
    id?: StringFilter<"AiChatMessage"> | string
    conversationId?: StringFilter<"AiChatMessage"> | string
    role?: EnumAiChatRoleFilter<"AiChatMessage"> | $Enums.AiChatRole
    content?: StringFilter<"AiChatMessage"> | string
    ragContext?: JsonNullableFilter<"AiChatMessage">
    timestamp?: DateTimeFilter<"AiChatMessage"> | Date | string
    metadata?: JsonNullableFilter<"AiChatMessage">
  }

  export type AiChatConversationCreateWithoutMessagesInput = {
    id?: string
    conversationName?: string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    session: SessionCreateNestedOneWithoutAiChatConversationsInput
    child: ChildCreateNestedOneWithoutAiChatConversationsInput
    volunteer: UserCreateNestedOneWithoutAiChatConversationsInput
  }

  export type AiChatConversationUncheckedCreateWithoutMessagesInput = {
    id?: string
    sessionId: string
    childId: string
    volunteerId: string
    conversationName?: string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AiChatConversationCreateOrConnectWithoutMessagesInput = {
    where: AiChatConversationWhereUniqueInput
    create: XOR<AiChatConversationCreateWithoutMessagesInput, AiChatConversationUncheckedCreateWithoutMessagesInput>
  }

  export type AiChatConversationUpsertWithoutMessagesInput = {
    update: XOR<AiChatConversationUpdateWithoutMessagesInput, AiChatConversationUncheckedUpdateWithoutMessagesInput>
    create: XOR<AiChatConversationCreateWithoutMessagesInput, AiChatConversationUncheckedCreateWithoutMessagesInput>
    where?: AiChatConversationWhereInput
  }

  export type AiChatConversationUpdateToOneWithWhereWithoutMessagesInput = {
    where?: AiChatConversationWhereInput
    data: XOR<AiChatConversationUpdateWithoutMessagesInput, AiChatConversationUncheckedUpdateWithoutMessagesInput>
  }

  export type AiChatConversationUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    conversationName?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneRequiredWithoutAiChatConversationsNestedInput
    child?: ChildUpdateOneRequiredWithoutAiChatConversationsNestedInput
    volunteer?: UserUpdateOneRequiredWithoutAiChatConversationsNestedInput
  }

  export type AiChatConversationUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    conversationName?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChildCreateWithoutConversationMemoriesInput = {
    id?: string
    name: string
    age: number
    gender: $Enums.Gender
    state: string
    district?: string | null
    background?: string | null
    schoolLevel?: string | null
    interests?: ChildCreateinterestsInput | string[]
    challenges?: ChildCreatechallengesInput | string[]
    language?: string
    profileImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: AssignmentCreateNestedManyWithoutChildInput
    concerns?: ConcernCreateNestedManyWithoutChildInput
    sessions?: SessionCreateNestedManyWithoutChildInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutChildInput
    tags?: TagCreateNestedManyWithoutChildrenInput
  }

  export type ChildUncheckedCreateWithoutConversationMemoriesInput = {
    id?: string
    name: string
    age: number
    gender: $Enums.Gender
    state: string
    district?: string | null
    background?: string | null
    schoolLevel?: string | null
    interests?: ChildCreateinterestsInput | string[]
    challenges?: ChildCreatechallengesInput | string[]
    language?: string
    profileImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutChildInput
    concerns?: ConcernUncheckedCreateNestedManyWithoutChildInput
    sessions?: SessionUncheckedCreateNestedManyWithoutChildInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutChildInput
    tags?: TagUncheckedCreateNestedManyWithoutChildrenInput
  }

  export type ChildCreateOrConnectWithoutConversationMemoriesInput = {
    where: ChildWhereUniqueInput
    create: XOR<ChildCreateWithoutConversationMemoriesInput, ChildUncheckedCreateWithoutConversationMemoriesInput>
  }

  export type UserCreateWithoutConversationMemoriesInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentCreateNestedManyWithoutVolunteerInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    culturalStories?: CulturalStoryCreateNestedManyWithoutCreatedByInput
    knowledgeBase?: KnowledgeBaseCreateNestedManyWithoutCreatedByInput
    sessions?: SessionCreateNestedManyWithoutVolunteerInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutVolunteerInput
    approver?: UserCreateNestedOneWithoutApprovedUsersInput
    approvedUsers?: UserCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutConversationMemoriesInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    approvedBy?: string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
    assignments?: AssignmentUncheckedCreateNestedManyWithoutVolunteerInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    culturalStories?: CulturalStoryUncheckedCreateNestedManyWithoutCreatedByInput
    knowledgeBase?: KnowledgeBaseUncheckedCreateNestedManyWithoutCreatedByInput
    sessions?: SessionUncheckedCreateNestedManyWithoutVolunteerInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutVolunteerInput
    approvedUsers?: UserUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutConversationMemoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConversationMemoriesInput, UserUncheckedCreateWithoutConversationMemoriesInput>
  }

  export type SessionCreateWithoutConversationMemoriesInput = {
    id?: string
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    status?: $Enums.SessionStatus
    sessionType?: $Enums.SessionType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageCreateNestedManyWithoutSessionInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutSessionInput
    summary?: SessionSummaryCreateNestedOneWithoutSessionInput
    child: ChildCreateNestedOneWithoutSessionsInput
    volunteer: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateWithoutConversationMemoriesInput = {
    id?: string
    childId: string
    volunteerId: string
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    status?: $Enums.SessionStatus
    sessionType?: $Enums.SessionType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSessionInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutSessionInput
    summary?: SessionSummaryUncheckedCreateNestedOneWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutConversationMemoriesInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutConversationMemoriesInput, SessionUncheckedCreateWithoutConversationMemoriesInput>
  }

  export type ChildUpsertWithoutConversationMemoriesInput = {
    update: XOR<ChildUpdateWithoutConversationMemoriesInput, ChildUncheckedUpdateWithoutConversationMemoriesInput>
    create: XOR<ChildCreateWithoutConversationMemoriesInput, ChildUncheckedCreateWithoutConversationMemoriesInput>
    where?: ChildWhereInput
  }

  export type ChildUpdateToOneWithWhereWithoutConversationMemoriesInput = {
    where?: ChildWhereInput
    data: XOR<ChildUpdateWithoutConversationMemoriesInput, ChildUncheckedUpdateWithoutConversationMemoriesInput>
  }

  export type ChildUpdateWithoutConversationMemoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    state?: StringFieldUpdateOperationsInput | string
    district?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    schoolLevel?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    challenges?: ChildUpdatechallengesInput | string[]
    language?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: AssignmentUpdateManyWithoutChildNestedInput
    concerns?: ConcernUpdateManyWithoutChildNestedInput
    sessions?: SessionUpdateManyWithoutChildNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutChildNestedInput
    tags?: TagUpdateManyWithoutChildrenNestedInput
  }

  export type ChildUncheckedUpdateWithoutConversationMemoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    state?: StringFieldUpdateOperationsInput | string
    district?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    schoolLevel?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    challenges?: ChildUpdatechallengesInput | string[]
    language?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: AssignmentUncheckedUpdateManyWithoutChildNestedInput
    concerns?: ConcernUncheckedUpdateManyWithoutChildNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutChildNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutChildNestedInput
    tags?: TagUncheckedUpdateManyWithoutChildrenNestedInput
  }

  export type UserUpsertWithoutConversationMemoriesInput = {
    update: XOR<UserUpdateWithoutConversationMemoriesInput, UserUncheckedUpdateWithoutConversationMemoriesInput>
    create: XOR<UserCreateWithoutConversationMemoriesInput, UserUncheckedCreateWithoutConversationMemoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConversationMemoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConversationMemoriesInput, UserUncheckedUpdateWithoutConversationMemoriesInput>
  }

  export type UserUpdateWithoutConversationMemoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUpdateManyWithoutVolunteerNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    culturalStories?: CulturalStoryUpdateManyWithoutCreatedByNestedInput
    knowledgeBase?: KnowledgeBaseUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUpdateManyWithoutVolunteerNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutVolunteerNestedInput
    approver?: UserUpdateOneWithoutApprovedUsersNestedInput
    approvedUsers?: UserUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutConversationMemoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUncheckedUpdateManyWithoutVolunteerNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    culturalStories?: CulturalStoryUncheckedUpdateManyWithoutCreatedByNestedInput
    knowledgeBase?: KnowledgeBaseUncheckedUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutVolunteerNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutVolunteerNestedInput
    approvedUsers?: UserUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type SessionUpsertWithoutConversationMemoriesInput = {
    update: XOR<SessionUpdateWithoutConversationMemoriesInput, SessionUncheckedUpdateWithoutConversationMemoriesInput>
    create: XOR<SessionCreateWithoutConversationMemoriesInput, SessionUncheckedCreateWithoutConversationMemoriesInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutConversationMemoriesInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutConversationMemoriesInput, SessionUncheckedUpdateWithoutConversationMemoriesInput>
  }

  export type SessionUpdateWithoutConversationMemoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUpdateManyWithoutSessionNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutSessionNestedInput
    summary?: SessionSummaryUpdateOneWithoutSessionNestedInput
    child?: ChildUpdateOneRequiredWithoutSessionsNestedInput
    volunteer?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateWithoutConversationMemoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSessionNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutSessionNestedInput
    summary?: SessionSummaryUncheckedUpdateOneWithoutSessionNestedInput
  }

  export type ChildCreateWithoutTagsInput = {
    id?: string
    name: string
    age: number
    gender: $Enums.Gender
    state: string
    district?: string | null
    background?: string | null
    schoolLevel?: string | null
    interests?: ChildCreateinterestsInput | string[]
    challenges?: ChildCreatechallengesInput | string[]
    language?: string
    profileImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: AssignmentCreateNestedManyWithoutChildInput
    concerns?: ConcernCreateNestedManyWithoutChildInput
    sessions?: SessionCreateNestedManyWithoutChildInput
    aiChatConversations?: AiChatConversationCreateNestedManyWithoutChildInput
    conversationMemories?: ConversationMemoryCreateNestedManyWithoutChildInput
  }

  export type ChildUncheckedCreateWithoutTagsInput = {
    id?: string
    name: string
    age: number
    gender: $Enums.Gender
    state: string
    district?: string | null
    background?: string | null
    schoolLevel?: string | null
    interests?: ChildCreateinterestsInput | string[]
    challenges?: ChildCreatechallengesInput | string[]
    language?: string
    profileImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutChildInput
    concerns?: ConcernUncheckedCreateNestedManyWithoutChildInput
    sessions?: SessionUncheckedCreateNestedManyWithoutChildInput
    aiChatConversations?: AiChatConversationUncheckedCreateNestedManyWithoutChildInput
    conversationMemories?: ConversationMemoryUncheckedCreateNestedManyWithoutChildInput
  }

  export type ChildCreateOrConnectWithoutTagsInput = {
    where: ChildWhereUniqueInput
    create: XOR<ChildCreateWithoutTagsInput, ChildUncheckedCreateWithoutTagsInput>
  }

  export type KnowledgeBaseCreateWithoutTagsInput = {
    id?: string
    title: string
    content: string
    summary?: string | null
    category: $Enums.KnowledgeCategory
    subCategory?: string | null
    fileType?: string | null
    fileUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    downloadCount?: number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: number | null
    isProcessed?: boolean
    views?: number
    chunks?: DocumentChunkCreateNestedManyWithoutKnowledgeBaseInput
    createdBy: UserCreateNestedOneWithoutKnowledgeBaseInput
  }

  export type KnowledgeBaseUncheckedCreateWithoutTagsInput = {
    id?: string
    title: string
    content: string
    summary?: string | null
    category: $Enums.KnowledgeCategory
    subCategory?: string | null
    fileType?: string | null
    fileUrl?: string | null
    isActive?: boolean
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    downloadCount?: number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: number | null
    isProcessed?: boolean
    views?: number
    chunks?: DocumentChunkUncheckedCreateNestedManyWithoutKnowledgeBaseInput
  }

  export type KnowledgeBaseCreateOrConnectWithoutTagsInput = {
    where: KnowledgeBaseWhereUniqueInput
    create: XOR<KnowledgeBaseCreateWithoutTagsInput, KnowledgeBaseUncheckedCreateWithoutTagsInput>
  }

  export type ChildUpsertWithWhereUniqueWithoutTagsInput = {
    where: ChildWhereUniqueInput
    update: XOR<ChildUpdateWithoutTagsInput, ChildUncheckedUpdateWithoutTagsInput>
    create: XOR<ChildCreateWithoutTagsInput, ChildUncheckedCreateWithoutTagsInput>
  }

  export type ChildUpdateWithWhereUniqueWithoutTagsInput = {
    where: ChildWhereUniqueInput
    data: XOR<ChildUpdateWithoutTagsInput, ChildUncheckedUpdateWithoutTagsInput>
  }

  export type ChildUpdateManyWithWhereWithoutTagsInput = {
    where: ChildScalarWhereInput
    data: XOR<ChildUpdateManyMutationInput, ChildUncheckedUpdateManyWithoutTagsInput>
  }

  export type ChildScalarWhereInput = {
    AND?: ChildScalarWhereInput | ChildScalarWhereInput[]
    OR?: ChildScalarWhereInput[]
    NOT?: ChildScalarWhereInput | ChildScalarWhereInput[]
    id?: StringFilter<"Child"> | string
    name?: StringFilter<"Child"> | string
    age?: IntFilter<"Child"> | number
    gender?: EnumGenderFilter<"Child"> | $Enums.Gender
    state?: StringFilter<"Child"> | string
    district?: StringNullableFilter<"Child"> | string | null
    background?: StringNullableFilter<"Child"> | string | null
    schoolLevel?: StringNullableFilter<"Child"> | string | null
    interests?: StringNullableListFilter<"Child">
    challenges?: StringNullableListFilter<"Child">
    language?: StringFilter<"Child"> | string
    profileImage?: StringNullableFilter<"Child"> | string | null
    isActive?: BoolFilter<"Child"> | boolean
    createdAt?: DateTimeFilter<"Child"> | Date | string
    updatedAt?: DateTimeFilter<"Child"> | Date | string
  }

  export type KnowledgeBaseUpsertWithWhereUniqueWithoutTagsInput = {
    where: KnowledgeBaseWhereUniqueInput
    update: XOR<KnowledgeBaseUpdateWithoutTagsInput, KnowledgeBaseUncheckedUpdateWithoutTagsInput>
    create: XOR<KnowledgeBaseCreateWithoutTagsInput, KnowledgeBaseUncheckedCreateWithoutTagsInput>
  }

  export type KnowledgeBaseUpdateWithWhereUniqueWithoutTagsInput = {
    where: KnowledgeBaseWhereUniqueInput
    data: XOR<KnowledgeBaseUpdateWithoutTagsInput, KnowledgeBaseUncheckedUpdateWithoutTagsInput>
  }

  export type KnowledgeBaseUpdateManyWithWhereWithoutTagsInput = {
    where: KnowledgeBaseScalarWhereInput
    data: XOR<KnowledgeBaseUpdateManyMutationInput, KnowledgeBaseUncheckedUpdateManyWithoutTagsInput>
  }

  export type AssignmentCreateManyVolunteerInput = {
    id?: string
    childId: string
    assignedAt?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type ChatMessageCreateManyUserInput = {
    id?: string
    sessionId?: string | null
    message: string
    response?: string | null
    context?: string | null
    isSystemMsg?: boolean
    createdAt?: Date | string
  }

  export type CulturalStoryCreateManyCreatedByInput = {
    id?: string
    title: string
    source: $Enums.StorySource
    summary: string
    fullStory: string
    themes?: CulturalStoryCreatethemesInput | string[]
    applicableFor?: CulturalStoryCreateapplicableForInput | string[]
    moralLessons?: CulturalStoryCreatemoralLessonsInput | string[]
    tags?: CulturalStoryCreatetagsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KnowledgeBaseCreateManyCreatedByInput = {
    id?: string
    title: string
    content: string
    summary?: string | null
    category: $Enums.KnowledgeCategory
    subCategory?: string | null
    fileType?: string | null
    fileUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    downloadCount?: number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: number | null
    isProcessed?: boolean
    views?: number
  }

  export type SessionCreateManyVolunteerInput = {
    id?: string
    childId: string
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    status?: $Enums.SessionStatus
    sessionType?: $Enums.SessionType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AiChatConversationCreateManyVolunteerInput = {
    id?: string
    sessionId: string
    childId: string
    conversationName?: string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationMemoryCreateManyVolunteerInput = {
    id?: string
    childId: string
    sessionId?: string | null
    memoryType: $Enums.MemoryType
    content: string
    importance?: number
    associatedTags?: ConversationMemoryCreateassociatedTagsInput | string[]
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateManyApproverInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    state?: string | null
    phone?: string | null
    specialization?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    approvalStatus?: $Enums.ApprovalStatus
    approvedAt?: Date | string | null
    experience?: string | null
    motivation?: string | null
    rejectionReason?: string | null
  }

  export type AssignmentUpdateWithoutVolunteerInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    child?: ChildUpdateOneRequiredWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutVolunteerInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssignmentUncheckedUpdateManyWithoutVolunteerInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatMessageUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableStringFieldUpdateOperationsInput | string | null
    isSystemMsg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneWithoutChatMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableStringFieldUpdateOperationsInput | string | null
    isSystemMsg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableStringFieldUpdateOperationsInput | string | null
    isSystemMsg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CulturalStoryUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    source?: EnumStorySourceFieldUpdateOperationsInput | $Enums.StorySource
    summary?: StringFieldUpdateOperationsInput | string
    fullStory?: StringFieldUpdateOperationsInput | string
    themes?: CulturalStoryUpdatethemesInput | string[]
    applicableFor?: CulturalStoryUpdateapplicableForInput | string[]
    moralLessons?: CulturalStoryUpdatemoralLessonsInput | string[]
    tags?: CulturalStoryUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CulturalStoryUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    source?: EnumStorySourceFieldUpdateOperationsInput | $Enums.StorySource
    summary?: StringFieldUpdateOperationsInput | string
    fullStory?: StringFieldUpdateOperationsInput | string
    themes?: CulturalStoryUpdatethemesInput | string[]
    applicableFor?: CulturalStoryUpdateapplicableForInput | string[]
    moralLessons?: CulturalStoryUpdatemoralLessonsInput | string[]
    tags?: CulturalStoryUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CulturalStoryUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    source?: EnumStorySourceFieldUpdateOperationsInput | $Enums.StorySource
    summary?: StringFieldUpdateOperationsInput | string
    fullStory?: StringFieldUpdateOperationsInput | string
    themes?: CulturalStoryUpdatethemesInput | string[]
    applicableFor?: CulturalStoryUpdateapplicableForInput | string[]
    moralLessons?: CulturalStoryUpdatemoralLessonsInput | string[]
    tags?: CulturalStoryUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnowledgeBaseUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumKnowledgeCategoryFieldUpdateOperationsInput | $Enums.KnowledgeCategory
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    downloadCount?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    chunks?: DocumentChunkUpdateManyWithoutKnowledgeBaseNestedInput
    tags?: TagUpdateManyWithoutKnowledgeBaseNestedInput
  }

  export type KnowledgeBaseUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumKnowledgeCategoryFieldUpdateOperationsInput | $Enums.KnowledgeCategory
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    downloadCount?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    chunks?: DocumentChunkUncheckedUpdateManyWithoutKnowledgeBaseNestedInput
    tags?: TagUncheckedUpdateManyWithoutKnowledgeBaseNestedInput
  }

  export type KnowledgeBaseUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumKnowledgeCategoryFieldUpdateOperationsInput | $Enums.KnowledgeCategory
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    downloadCount?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
  }

  export type SessionUpdateWithoutVolunteerInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUpdateManyWithoutSessionNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutSessionNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutSessionNestedInput
    summary?: SessionSummaryUpdateOneWithoutSessionNestedInput
    child?: ChildUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateWithoutVolunteerInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSessionNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutSessionNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutSessionNestedInput
    summary?: SessionSummaryUncheckedUpdateOneWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateManyWithoutVolunteerInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatConversationUpdateWithoutVolunteerInput = {
    id?: StringFieldUpdateOperationsInput | string
    conversationName?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneRequiredWithoutAiChatConversationsNestedInput
    child?: ChildUpdateOneRequiredWithoutAiChatConversationsNestedInput
    messages?: AiChatMessageUpdateManyWithoutConversationNestedInput
  }

  export type AiChatConversationUncheckedUpdateWithoutVolunteerInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    conversationName?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: AiChatMessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type AiChatConversationUncheckedUpdateManyWithoutVolunteerInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    conversationName?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationMemoryUpdateWithoutVolunteerInput = {
    id?: StringFieldUpdateOperationsInput | string
    memoryType?: EnumMemoryTypeFieldUpdateOperationsInput | $Enums.MemoryType
    content?: StringFieldUpdateOperationsInput | string
    importance?: IntFieldUpdateOperationsInput | number
    associatedTags?: ConversationMemoryUpdateassociatedTagsInput | string[]
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    child?: ChildUpdateOneRequiredWithoutConversationMemoriesNestedInput
    session?: SessionUpdateOneWithoutConversationMemoriesNestedInput
  }

  export type ConversationMemoryUncheckedUpdateWithoutVolunteerInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    memoryType?: EnumMemoryTypeFieldUpdateOperationsInput | $Enums.MemoryType
    content?: StringFieldUpdateOperationsInput | string
    importance?: IntFieldUpdateOperationsInput | number
    associatedTags?: ConversationMemoryUpdateassociatedTagsInput | string[]
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationMemoryUncheckedUpdateManyWithoutVolunteerInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    memoryType?: EnumMemoryTypeFieldUpdateOperationsInput | $Enums.MemoryType
    content?: StringFieldUpdateOperationsInput | string
    importance?: IntFieldUpdateOperationsInput | number
    associatedTags?: ConversationMemoryUpdateassociatedTagsInput | string[]
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUpdateManyWithoutVolunteerNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    culturalStories?: CulturalStoryUpdateManyWithoutCreatedByNestedInput
    knowledgeBase?: KnowledgeBaseUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUpdateManyWithoutVolunteerNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutVolunteerNestedInput
    approvedUsers?: UserUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: AssignmentUncheckedUpdateManyWithoutVolunteerNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    culturalStories?: CulturalStoryUncheckedUpdateManyWithoutCreatedByNestedInput
    knowledgeBase?: KnowledgeBaseUncheckedUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutVolunteerNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutVolunteerNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutVolunteerNestedInput
    approvedUsers?: UserUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateManyWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    motivation?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssignmentCreateManyChildInput = {
    id?: string
    volunteerId: string
    assignedAt?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type ConcernCreateManyChildInput = {
    id?: string
    title: string
    description: string
    category: $Enums.ConcernCategory
    severity?: $Enums.Severity
    status?: $Enums.ConcernStatus
    identifiedAt?: Date | string
    resolvedAt?: Date | string | null
    resolution?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateManyChildInput = {
    id?: string
    volunteerId: string
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    status?: $Enums.SessionStatus
    sessionType?: $Enums.SessionType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AiChatConversationCreateManyChildInput = {
    id?: string
    sessionId: string
    volunteerId: string
    conversationName?: string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationMemoryCreateManyChildInput = {
    id?: string
    volunteerId: string
    sessionId?: string | null
    memoryType: $Enums.MemoryType
    content: string
    importance?: number
    associatedTags?: ConversationMemoryCreateassociatedTagsInput | string[]
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssignmentUpdateWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    volunteer?: UserUpdateOneRequiredWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssignmentUncheckedUpdateManyWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConcernUpdateWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumConcernCategoryFieldUpdateOperationsInput | $Enums.ConcernCategory
    severity?: EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
    status?: EnumConcernStatusFieldUpdateOperationsInput | $Enums.ConcernStatus
    identifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConcernUncheckedUpdateWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumConcernCategoryFieldUpdateOperationsInput | $Enums.ConcernCategory
    severity?: EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
    status?: EnumConcernStatusFieldUpdateOperationsInput | $Enums.ConcernStatus
    identifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConcernUncheckedUpdateManyWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumConcernCategoryFieldUpdateOperationsInput | $Enums.ConcernCategory
    severity?: EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
    status?: EnumConcernStatusFieldUpdateOperationsInput | $Enums.ConcernStatus
    identifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpdateWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUpdateManyWithoutSessionNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutSessionNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutSessionNestedInput
    summary?: SessionSummaryUpdateOneWithoutSessionNestedInput
    volunteer?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSessionNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutSessionNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutSessionNestedInput
    summary?: SessionSummaryUncheckedUpdateOneWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateManyWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatConversationUpdateWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    conversationName?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneRequiredWithoutAiChatConversationsNestedInput
    volunteer?: UserUpdateOneRequiredWithoutAiChatConversationsNestedInput
    messages?: AiChatMessageUpdateManyWithoutConversationNestedInput
  }

  export type AiChatConversationUncheckedUpdateWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    conversationName?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: AiChatMessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type AiChatConversationUncheckedUpdateManyWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    conversationName?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationMemoryUpdateWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    memoryType?: EnumMemoryTypeFieldUpdateOperationsInput | $Enums.MemoryType
    content?: StringFieldUpdateOperationsInput | string
    importance?: IntFieldUpdateOperationsInput | number
    associatedTags?: ConversationMemoryUpdateassociatedTagsInput | string[]
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    volunteer?: UserUpdateOneRequiredWithoutConversationMemoriesNestedInput
    session?: SessionUpdateOneWithoutConversationMemoriesNestedInput
  }

  export type ConversationMemoryUncheckedUpdateWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    memoryType?: EnumMemoryTypeFieldUpdateOperationsInput | $Enums.MemoryType
    content?: StringFieldUpdateOperationsInput | string
    importance?: IntFieldUpdateOperationsInput | number
    associatedTags?: ConversationMemoryUpdateassociatedTagsInput | string[]
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationMemoryUncheckedUpdateManyWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    memoryType?: EnumMemoryTypeFieldUpdateOperationsInput | $Enums.MemoryType
    content?: StringFieldUpdateOperationsInput | string
    importance?: IntFieldUpdateOperationsInput | number
    associatedTags?: ConversationMemoryUpdateassociatedTagsInput | string[]
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knowledgeBase?: KnowledgeBaseUpdateManyWithoutTagsNestedInput
  }

  export type TagUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knowledgeBase?: KnowledgeBaseUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type TagUncheckedUpdateManyWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateManySessionInput = {
    id?: string
    userId: string
    message: string
    response?: string | null
    context?: string | null
    isSystemMsg?: boolean
    createdAt?: Date | string
  }

  export type AiChatConversationCreateManySessionInput = {
    id?: string
    childId: string
    volunteerId: string
    conversationName?: string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationMemoryCreateManySessionInput = {
    id?: string
    childId: string
    volunteerId: string
    memoryType: $Enums.MemoryType
    content: string
    importance?: number
    associatedTags?: ConversationMemoryCreateassociatedTagsInput | string[]
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatMessageUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableStringFieldUpdateOperationsInput | string | null
    isSystemMsg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChatMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableStringFieldUpdateOperationsInput | string | null
    isSystemMsg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableStringFieldUpdateOperationsInput | string | null
    isSystemMsg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatConversationUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    conversationName?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    child?: ChildUpdateOneRequiredWithoutAiChatConversationsNestedInput
    volunteer?: UserUpdateOneRequiredWithoutAiChatConversationsNestedInput
    messages?: AiChatMessageUpdateManyWithoutConversationNestedInput
  }

  export type AiChatConversationUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    conversationName?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: AiChatMessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type AiChatConversationUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    conversationName?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationMemoryUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    memoryType?: EnumMemoryTypeFieldUpdateOperationsInput | $Enums.MemoryType
    content?: StringFieldUpdateOperationsInput | string
    importance?: IntFieldUpdateOperationsInput | number
    associatedTags?: ConversationMemoryUpdateassociatedTagsInput | string[]
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    child?: ChildUpdateOneRequiredWithoutConversationMemoriesNestedInput
    volunteer?: UserUpdateOneRequiredWithoutConversationMemoriesNestedInput
  }

  export type ConversationMemoryUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    memoryType?: EnumMemoryTypeFieldUpdateOperationsInput | $Enums.MemoryType
    content?: StringFieldUpdateOperationsInput | string
    importance?: IntFieldUpdateOperationsInput | number
    associatedTags?: ConversationMemoryUpdateassociatedTagsInput | string[]
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationMemoryUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    memoryType?: EnumMemoryTypeFieldUpdateOperationsInput | $Enums.MemoryType
    content?: StringFieldUpdateOperationsInput | string
    importance?: IntFieldUpdateOperationsInput | number
    associatedTags?: ConversationMemoryUpdateassociatedTagsInput | string[]
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentChunkCreateManyKnowledgeBaseInput = {
    id?: string
    content: string
    chunkIndex: number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type DocumentChunkUpdateWithoutKnowledgeBaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    chunkIndex?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentChunkUncheckedUpdateWithoutKnowledgeBaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    chunkIndex?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentChunkUncheckedUpdateManyWithoutKnowledgeBaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    chunkIndex?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUpdateWithoutKnowledgeBaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: ChildUpdateManyWithoutTagsNestedInput
  }

  export type TagUncheckedUpdateWithoutKnowledgeBaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: ChildUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type TagUncheckedUpdateManyWithoutKnowledgeBaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatMessageCreateManyConversationInput = {
    id?: string
    role: $Enums.AiChatRole
    content: string
    ragContext?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AiChatMessageUpdateWithoutConversationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumAiChatRoleFieldUpdateOperationsInput | $Enums.AiChatRole
    content?: StringFieldUpdateOperationsInput | string
    ragContext?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AiChatMessageUncheckedUpdateWithoutConversationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumAiChatRoleFieldUpdateOperationsInput | $Enums.AiChatRole
    content?: StringFieldUpdateOperationsInput | string
    ragContext?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AiChatMessageUncheckedUpdateManyWithoutConversationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumAiChatRoleFieldUpdateOperationsInput | $Enums.AiChatRole
    content?: StringFieldUpdateOperationsInput | string
    ragContext?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ChildUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    state?: StringFieldUpdateOperationsInput | string
    district?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    schoolLevel?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    challenges?: ChildUpdatechallengesInput | string[]
    language?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: AssignmentUpdateManyWithoutChildNestedInput
    concerns?: ConcernUpdateManyWithoutChildNestedInput
    sessions?: SessionUpdateManyWithoutChildNestedInput
    aiChatConversations?: AiChatConversationUpdateManyWithoutChildNestedInput
    conversationMemories?: ConversationMemoryUpdateManyWithoutChildNestedInput
  }

  export type ChildUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    state?: StringFieldUpdateOperationsInput | string
    district?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    schoolLevel?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    challenges?: ChildUpdatechallengesInput | string[]
    language?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: AssignmentUncheckedUpdateManyWithoutChildNestedInput
    concerns?: ConcernUncheckedUpdateManyWithoutChildNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutChildNestedInput
    aiChatConversations?: AiChatConversationUncheckedUpdateManyWithoutChildNestedInput
    conversationMemories?: ConversationMemoryUncheckedUpdateManyWithoutChildNestedInput
  }

  export type ChildUncheckedUpdateManyWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    state?: StringFieldUpdateOperationsInput | string
    district?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    schoolLevel?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    challenges?: ChildUpdatechallengesInput | string[]
    language?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnowledgeBaseUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumKnowledgeCategoryFieldUpdateOperationsInput | $Enums.KnowledgeCategory
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    downloadCount?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    chunks?: DocumentChunkUpdateManyWithoutKnowledgeBaseNestedInput
    createdBy?: UserUpdateOneRequiredWithoutKnowledgeBaseNestedInput
  }

  export type KnowledgeBaseUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumKnowledgeCategoryFieldUpdateOperationsInput | $Enums.KnowledgeCategory
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    downloadCount?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    chunks?: DocumentChunkUncheckedUpdateManyWithoutKnowledgeBaseNestedInput
  }

  export type KnowledgeBaseUncheckedUpdateManyWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumKnowledgeCategoryFieldUpdateOperationsInput | $Enums.KnowledgeCategory
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    downloadCount?: IntFieldUpdateOperationsInput | number
    embeddings?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}